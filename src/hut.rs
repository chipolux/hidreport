// THIS FILE IS GENERATED, DO NOT EDIT

//! A wrapper around the HID Usage Tables (HUT). For reference, see the
//! [HID Usage Tables](https://usb.org/document-library/hid-usage-tables-15).
//! Note that this module is created through code generation.
//!
//! In this document and unless stated otherwise, a reference to "section a.b.c" refers to the
//! [HID Device Class Definition for HID 1.11](https://www.usb.org/document-library/device-class-definition-hid-111).
//!
//! # Terminology
//!
//! See Section 5.5: a HID Usage is a 32 bit value comprising of a 16-bit Usage
//! Page and a 16-bit Usage ID so that:
//! ```
//! let usage_page: u16 = 0x01; // Generic Desktop
//! let usage_id: u16 = 0x02; // Mouse
//! let usage: u32 = (usage_page as u32) << 16 | usage_id as u32;
//!
//! let u = GenericDesktop::Mouse;
//! assert!(usage == u.usage());
//! ```
//! In this module:
//! - "Usage Page" refers to the 16-bit value. Where the Usage Page is converted
//!   to or from a 32-bit value the Usage Page is in the upper 16 bits of that value and
//!   the lower 16 bits are ignored or set to zero.
//! - "Usage ID" refers to the 16-bit value. Where the Usage ID is converted to
//!   or from a 32-bit value the Usage is in the lower 16 bits of that value and !   the upper 16 bits are ignored or set to zero.
//! - "Usage" refers to the 32-bit value comprising a Usage Page and a Usage.
//!
//! # Vendor Defined Usage Pages
//!
//! [Vendor Defined Usage Pages](VendorDefinedPage1) and [Usages](VendorDefinedPage1::VendorUsage) are not autogenerated and thus
//! follow a different approach: the Usage inside the Usage Page is a simple
//! numeric usage that needs to be destructured in `match` statements.
//!
//! # Renames
//!
//! For technical reasons, spaces, (` `), dashes (`-`), and slashes (`/`) are
//! stripped out of Usage Page and Usage names. The string representation via
//! the `Display` trait will have the unmodified value.
//!
//! Usage Pages and Usages starting with a number are translated into their
//! English word, for example [GamingControls::ThreeDGameController]. Numbers
//! inside a word are left as-is.

use std::fmt;
use std::ops::BitOr;
use thiserror::Error;

use crate::hid;
use crate::types;

#[derive(Error, Debug)]
pub enum HutError {
    #[error("Unknown Usage Page {usage_page}")]
    UnknownUsagePage { usage_page: u16 },
    #[error("Unknown Usage")]
    UnknownUsage,
}

type Result<T> = std::result::Result<T, HutError>;

/// A HID UsagePage, see section 5.5. This represents the upper 16 bits in the
/// 32-bit
///
/// Note: this enum is generated from the HUT documents.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum UsagePage {
    /// Usage Page `0x0`: "Undefined"
    ///
    /// See [Undefined].
    Undefined,
    /// Usage Page `0x1`: "Generic Desktop"
    ///
    /// See [GenericDesktop].
    GenericDesktop,
    /// Usage Page `0x2`: "Simulation Controls"
    ///
    /// See [SimulationControls].
    SimulationControls,
    /// Usage Page `0x3`: "VR Controls"
    ///
    /// See [VRControls].
    VRControls,
    /// Usage Page `0x4`: "Sports Controls"
    ///
    /// See [SportsControls].
    SportsControls,
    /// Usage Page `0x5`: "Gaming Controls"
    ///
    /// See [GamingControls].
    GamingControls,
    /// Usage Page `0x6`: "Generic Device Controls"
    ///
    /// See [GenericDeviceControls].
    GenericDeviceControls,
    /// Usage Page `0x7`: "Keyboard"
    ///
    /// See [Keyboard].
    Keyboard,
    /// Usage Page `0x8`: "LEDs"
    ///
    /// See [LEDs].
    LEDs,
    /// Usage Page `0x9`: "Button"
    ///
    /// See [Button].
    Button,
    /// Usage Page `0x10`: "Ordinals"
    ///
    /// See [Ordinals].
    Ordinals,
    /// Usage Page `0x11`: "Telephony Devices"
    ///
    /// See [TelephonyDevices].
    TelephonyDevices,
    /// Usage Page `0x12`: "Consumer Devices"
    ///
    /// See [ConsumerDevices].
    ConsumerDevices,
    /// Usage Page `0x13`: "Digitizers"
    ///
    /// See [Digitizers].
    Digitizers,
    /// Usage Page `0x14`: "Haptic"
    ///
    /// See [Haptic].
    Haptic,
    /// Usage Page `0x16`: "Unicode"
    ///
    /// See [Unicode].
    Unicode,
    /// Usage Page `0x18`: "Eye and Head Trackers"
    ///
    /// See [EyeandHeadTrackers].
    EyeandHeadTrackers,
    /// Usage Page `0x20`: "Auxiliary Display"
    ///
    /// See [AuxiliaryDisplay].
    AuxiliaryDisplay,
    /// Usage Page `0x32`: "Sensor"
    ///
    /// See [Sensor].
    Sensor,
    /// Usage Page `0x64`: "Medical Instruments"
    ///
    /// See [MedicalInstruments].
    MedicalInstruments,
    /// Usage Page `0x65`: "Braille Display"
    ///
    /// See [BrailleDisplay].
    BrailleDisplay,
    /// Usage Page `0x89`: "Lighting and Illumination"
    ///
    /// See [LightingandIllumination].
    LightingandIllumination,
    /// Usage Page `0x128`: "Monitor"
    ///
    /// See [Monitor].
    Monitor,
    /// Usage Page `0x129`: "Monitor Enumerated Values"
    ///
    /// See [MonitorEnumeratedValues].
    MonitorEnumeratedValues,
    /// Usage Page `0x130`: "VESA Virtual Controls"
    ///
    /// See [VESAVirtualControls].
    VESAVirtualControls,
    /// Usage Page `0x131`: "VESA Command"
    ///
    /// See [VESACommand].
    VESACommand,
    /// Usage Page `0x132`: "Power Device"
    ///
    /// See [PowerDevice].
    PowerDevice,
    /// Usage Page `0x133`: "Battery System"
    ///
    /// See [BatterySystem].
    BatterySystem,
    /// Usage Page `0x140`: "Bar Code Scanner"
    ///
    /// See [BarCodeScanner].
    BarCodeScanner,
    /// Usage Page `0x141`: "Scale"
    ///
    /// See [Scale].
    Scale,
    /// Usage Page `0x142`: "Magnetic Stripe Reading"
    ///
    /// See [MagneticStripeReading].
    MagneticStripeReading,
    /// Usage Page `0x144`: "Camera Control"
    ///
    /// See [CameraControl].
    CameraControl,
    /// Usage Page `0x145`: "Arcade Page OAAF"
    ///
    /// See [ArcadePageOAAF].
    ArcadePageOAAF,
    /// Usage Page `0x146`: "Gaming Device"
    ///
    /// See [GamingDevice].
    GamingDevice,
    /// Usage Page `0x61904`: "FIDO Alliance"
    ///
    /// See [FIDOAlliance].
    FIDOAlliance,
    /// Usage Page `0x65293`: "Wacom"
    ///
    /// See [Wacom].
    Wacom,
    /// The Vendor Defined Page. See [VendorDefinedPage1].
    VendorDefinedPage1,
}

impl UsagePage {
    /// Returns the Usage Page for the given Usage Page value. This is the
    /// 16-bit Usage Page value only, not the full 32-bit Usage.
    ///
    /// The returned value is always the "Undefined" usage of the matching
    /// Usage Page.
    pub fn from_usage_page_value(usage_page: u16) -> Result<UsagePage> {
        UsagePage::try_from(usage_page)
    }

    /// Returns the Usage Page for the given Usage numeric value. The Usage Page
    /// must be in the upper 16 bits of the `usage` value and the lower 16 bits
    /// are ignored.
    pub fn from_usage_value(usage: u32) -> Result<UsagePage> {
        let up: u16 = (usage >> 16) as u16;
        UsagePage::try_from(up)
    }

    /// Returns the 16-bit value for this Usage Page.
    pub fn usage_page(&self) -> u16 {
        u16::try_from(self).unwrap()
    }

    /// Returns the 32-bit Usage that is this Usage Page combined with
    /// the 16 bits Usage ID.
    pub fn to_usage_from_value(&self, usage: u16) -> Result<Usage> {
        let up: u32 = (self.usage_page() as u32) << 16;
        let u: u32 = usage as u32;
        Usage::try_from(up | u)
    }

    pub fn to_usage(&self, usage: &types::UsageId) -> Result<Usage> {
        let up: u32 = (self.usage_page() as u32) << 16;
        let u: u32 = u16::from(usage) as u32;
        Usage::try_from(up | u)
    }
}

/// Usage Page `0x0`: "Undefined"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Undefined {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
}

impl fmt::Display for Undefined {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Undefined::Undefined => "Undefined",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x1`: "Generic Desktop"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GenericDesktop {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Pointer"
    Pointer,
    /// Usage ID `0x2`: "Mouse"
    Mouse,
    /// Usage ID `0x4`: "Joystick"
    Joystick,
    /// Usage ID `0x5`: "Game Pad"
    GamePad,
    /// Usage ID `0x6`: "Keyboard"
    Keyboard,
    /// Usage ID `0x7`: "Keypad"
    Keypad,
    /// Usage ID `0x8`: "Multi Axis"
    MultiAxis,
    /// Usage ID `0x10`: "Water Cooling Device"
    WaterCoolingDevice,
    /// Usage ID `0x11`: "Computer Chassis Device"
    ComputerChassisDevice,
    /// Usage ID `0x12`: "Wireless Radio Controls"
    WirelessRadioControls,
    /// Usage ID `0x13`: "Portable Device Control"
    PortableDeviceControl,
    /// Usage ID `0x14`: "System Multi-Axis Controller"
    SystemMultiAxisController,
    /// Usage ID `0x15`: "Spatial Controller"
    SpatialController,
    /// Usage ID `0x16`: "Assistive Control"
    AssistiveControl,
    /// Usage ID `0x48`: "X"
    X,
    /// Usage ID `0x49`: "Y"
    Y,
    /// Usage ID `0x50`: "Z"
    Z,
    /// Usage ID `0x51`: "Rx"
    Rx,
    /// Usage ID `0x52`: "Ry"
    Ry,
    /// Usage ID `0x53`: "Rz"
    Rz,
    /// Usage ID `0x54`: "Slider"
    Slider,
    /// Usage ID `0x55`: "Dial"
    Dial,
    /// Usage ID `0x56`: "Wheel"
    Wheel,
    /// Usage ID `0x57`: "Hat switch"
    Hatswitch,
    /// Usage ID `0x58`: "Counted Buffer"
    CountedBuffer,
    /// Usage ID `0x59`: "Byte Count"
    ByteCount,
    /// Usage ID `0x60`: "Motion"
    Motion,
    /// Usage ID `0x61`: "Start"
    Start,
    /// Usage ID `0x62`: "Select"
    Select,
    /// Usage ID `0x64`: "Vx"
    Vx,
    /// Usage ID `0x65`: "Vy"
    Vy,
    /// Usage ID `0x66`: "Vz"
    Vz,
    /// Usage ID `0x67`: "Vbrx"
    Vbrx,
    /// Usage ID `0x68`: "Vbry"
    Vbry,
    /// Usage ID `0x69`: "Vbrz"
    Vbrz,
    /// Usage ID `0x70`: "Vno"
    Vno,
    /// Usage ID `0x71`: "Feature"
    Feature,
    /// Usage ID `0x72`: "Resolution Multiplier"
    ResolutionMultiplier,
    /// Usage ID `0x73`: "Qx"
    Qx,
    /// Usage ID `0x74`: "Qy"
    Qy,
    /// Usage ID `0x75`: "Qz"
    Qz,
    /// Usage ID `0x76`: "Qw"
    Qw,
    /// Usage ID `0x128`: "System Control"
    SystemControl,
    /// Usage ID `0x129`: "System Power Down"
    SystemPowerDown,
    /// Usage ID `0x130`: "System Sleep"
    SystemSleep,
    /// Usage ID `0x131`: "System Wake Up"
    SystemWakeUp,
    /// Usage ID `0x132`: "System Context Menu"
    SystemContextMenu,
    /// Usage ID `0x133`: "System Main Menu"
    SystemMainMenu,
    /// Usage ID `0x134`: "System App Menu"
    SystemAppMenu,
    /// Usage ID `0x135`: "System Help Menu"
    SystemHelpMenu,
    /// Usage ID `0x136`: "System Menu Exit"
    SystemMenuExit,
    /// Usage ID `0x137`: "System Menu Select"
    SystemMenuSelect,
    /// Usage ID `0x138`: "System Menu Right"
    SystemMenuRight,
    /// Usage ID `0x139`: "System Menu Left"
    SystemMenuLeft,
    /// Usage ID `0x140`: "System Menu Up"
    SystemMenuUp,
    /// Usage ID `0x141`: "System Menu Down"
    SystemMenuDown,
    /// Usage ID `0x142`: "System Cold Restart"
    SystemColdRestart,
    /// Usage ID `0x143`: "System Warm Restart"
    SystemWarmRestart,
    /// Usage ID `0x144`: "D-Pad Up"
    DPadUp,
    /// Usage ID `0x145`: "D-Pad Down"
    DPadDown,
    /// Usage ID `0x146`: "D-Pad Right"
    DPadRight,
    /// Usage ID `0x147`: "D-Pad Left"
    DPadLeft,
    /// Usage ID `0x148`: "Index Trigger"
    IndexTrigger,
    /// Usage ID `0x149`: "Palm Trigger"
    PalmTrigger,
    /// Usage ID `0x150`: "Thumbstick"
    Thumbstick,
    /// Usage ID `0x151`: "System Function Shift"
    SystemFunctionShift,
    /// Usage ID `0x152`: "System Function Shift Lock"
    SystemFunctionShiftLock,
    /// Usage ID `0x153`: "System Function Shift Lock Indicator"
    SystemFunctionShiftLockIndicator,
    /// Usage ID `0x154`: "System Dismiss Notification"
    SystemDismissNotification,
    /// Usage ID `0x160`: "System Dock"
    SystemDock,
    /// Usage ID `0x161`: "System UnDock"
    SystemUnDock,
    /// Usage ID `0x162`: "System Setup"
    SystemSetup,
    /// Usage ID `0x163`: "System Break"
    SystemBreak,
    /// Usage ID `0x164`: "System Debugger Break"
    SystemDebuggerBreak,
    /// Usage ID `0x165`: "Application Break"
    ApplicationBreak,
    /// Usage ID `0x166`: "Application Debugger Break"
    ApplicationDebuggerBreak,
    /// Usage ID `0x167`: "System Speaker Mute"
    SystemSpeakerMute,
    /// Usage ID `0x168`: "System Hibernate"
    SystemHibernate,
    /// Usage ID `0x176`: "System Display Invert"
    SystemDisplayInvert,
    /// Usage ID `0x177`: "System Display Internal"
    SystemDisplayInternal,
    /// Usage ID `0x178`: "System Display External"
    SystemDisplayExternal,
    /// Usage ID `0x179`: "System Display Both"
    SystemDisplayBoth,
    /// Usage ID `0x180`: "System Display Dual"
    SystemDisplayDual,
    /// Usage ID `0x181`: "System Display Toggle Internal External"
    SystemDisplayToggleInternalExternal,
    /// Usage ID `0x182`: "System Display Swap Primary Secondary"
    SystemDisplaySwapPrimarySecondary,
    /// Usage ID `0x183`: "System Display LCDAuto Scale"
    SystemDisplayLCDAutoScale,
    /// Usage ID `0x192`: "Sensor Zone"
    SensorZone,
    /// Usage ID `0x193`: "RPM"
    RPM,
    /// Usage ID `0x194`: "Coolant Level"
    CoolantLevel,
    /// Usage ID `0x195`: "Coolant Critical Level"
    CoolantCriticalLevel,
    /// Usage ID `0x196`: "Coolant Pump"
    CoolantPump,
    /// Usage ID `0x197`: "Chassis Enclosure"
    ChassisEnclosure,
    /// Usage ID `0x198`: "Wireless Radio Button"
    WirelessRadioButton,
    /// Usage ID `0x199`: "Wireless Radio LED"
    WirelessRadioLED,
    /// Usage ID `0x200`: "Wireless Radio Slider Switch"
    WirelessRadioSliderSwitch,
    /// Usage ID `0x201`: "System Display Rotation Lock Button"
    SystemDisplayRotationLockButton,
    /// Usage ID `0x202`: "System Display Rotation Lock Slider Switch"
    SystemDisplayRotationLockSliderSwitch,
    /// Usage ID `0x203`: "Control Enable"
    ControlEnable,
}

impl fmt::Display for GenericDesktop {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            GenericDesktop::Undefined => "Undefined",
            GenericDesktop::Pointer => "Pointer",
            GenericDesktop::Mouse => "Mouse",
            GenericDesktop::Joystick => "Joystick",
            GenericDesktop::GamePad => "Game Pad",
            GenericDesktop::Keyboard => "Keyboard",
            GenericDesktop::Keypad => "Keypad",
            GenericDesktop::MultiAxis => "Multi Axis",
            GenericDesktop::WaterCoolingDevice => "Water Cooling Device",
            GenericDesktop::ComputerChassisDevice => "Computer Chassis Device",
            GenericDesktop::WirelessRadioControls => "Wireless Radio Controls",
            GenericDesktop::PortableDeviceControl => "Portable Device Control",
            GenericDesktop::SystemMultiAxisController => "System Multi-Axis Controller",
            GenericDesktop::SpatialController => "Spatial Controller",
            GenericDesktop::AssistiveControl => "Assistive Control",
            GenericDesktop::X => "X",
            GenericDesktop::Y => "Y",
            GenericDesktop::Z => "Z",
            GenericDesktop::Rx => "Rx",
            GenericDesktop::Ry => "Ry",
            GenericDesktop::Rz => "Rz",
            GenericDesktop::Slider => "Slider",
            GenericDesktop::Dial => "Dial",
            GenericDesktop::Wheel => "Wheel",
            GenericDesktop::Hatswitch => "Hat switch",
            GenericDesktop::CountedBuffer => "Counted Buffer",
            GenericDesktop::ByteCount => "Byte Count",
            GenericDesktop::Motion => "Motion",
            GenericDesktop::Start => "Start",
            GenericDesktop::Select => "Select",
            GenericDesktop::Vx => "Vx",
            GenericDesktop::Vy => "Vy",
            GenericDesktop::Vz => "Vz",
            GenericDesktop::Vbrx => "Vbrx",
            GenericDesktop::Vbry => "Vbry",
            GenericDesktop::Vbrz => "Vbrz",
            GenericDesktop::Vno => "Vno",
            GenericDesktop::Feature => "Feature",
            GenericDesktop::ResolutionMultiplier => "Resolution Multiplier",
            GenericDesktop::Qx => "Qx",
            GenericDesktop::Qy => "Qy",
            GenericDesktop::Qz => "Qz",
            GenericDesktop::Qw => "Qw",
            GenericDesktop::SystemControl => "System Control",
            GenericDesktop::SystemPowerDown => "System Power Down",
            GenericDesktop::SystemSleep => "System Sleep",
            GenericDesktop::SystemWakeUp => "System Wake Up",
            GenericDesktop::SystemContextMenu => "System Context Menu",
            GenericDesktop::SystemMainMenu => "System Main Menu",
            GenericDesktop::SystemAppMenu => "System App Menu",
            GenericDesktop::SystemHelpMenu => "System Help Menu",
            GenericDesktop::SystemMenuExit => "System Menu Exit",
            GenericDesktop::SystemMenuSelect => "System Menu Select",
            GenericDesktop::SystemMenuRight => "System Menu Right",
            GenericDesktop::SystemMenuLeft => "System Menu Left",
            GenericDesktop::SystemMenuUp => "System Menu Up",
            GenericDesktop::SystemMenuDown => "System Menu Down",
            GenericDesktop::SystemColdRestart => "System Cold Restart",
            GenericDesktop::SystemWarmRestart => "System Warm Restart",
            GenericDesktop::DPadUp => "D-Pad Up",
            GenericDesktop::DPadDown => "D-Pad Down",
            GenericDesktop::DPadRight => "D-Pad Right",
            GenericDesktop::DPadLeft => "D-Pad Left",
            GenericDesktop::IndexTrigger => "Index Trigger",
            GenericDesktop::PalmTrigger => "Palm Trigger",
            GenericDesktop::Thumbstick => "Thumbstick",
            GenericDesktop::SystemFunctionShift => "System Function Shift",
            GenericDesktop::SystemFunctionShiftLock => "System Function Shift Lock",
            GenericDesktop::SystemFunctionShiftLockIndicator => {
                "System Function Shift Lock Indicator"
            }
            GenericDesktop::SystemDismissNotification => "System Dismiss Notification",
            GenericDesktop::SystemDock => "System Dock",
            GenericDesktop::SystemUnDock => "System UnDock",
            GenericDesktop::SystemSetup => "System Setup",
            GenericDesktop::SystemBreak => "System Break",
            GenericDesktop::SystemDebuggerBreak => "System Debugger Break",
            GenericDesktop::ApplicationBreak => "Application Break",
            GenericDesktop::ApplicationDebuggerBreak => "Application Debugger Break",
            GenericDesktop::SystemSpeakerMute => "System Speaker Mute",
            GenericDesktop::SystemHibernate => "System Hibernate",
            GenericDesktop::SystemDisplayInvert => "System Display Invert",
            GenericDesktop::SystemDisplayInternal => "System Display Internal",
            GenericDesktop::SystemDisplayExternal => "System Display External",
            GenericDesktop::SystemDisplayBoth => "System Display Both",
            GenericDesktop::SystemDisplayDual => "System Display Dual",
            GenericDesktop::SystemDisplayToggleInternalExternal => {
                "System Display Toggle Internal External"
            }
            GenericDesktop::SystemDisplaySwapPrimarySecondary => {
                "System Display Swap Primary Secondary"
            }
            GenericDesktop::SystemDisplayLCDAutoScale => "System Display LCDAuto Scale",
            GenericDesktop::SensorZone => "Sensor Zone",
            GenericDesktop::RPM => "RPM",
            GenericDesktop::CoolantLevel => "Coolant Level",
            GenericDesktop::CoolantCriticalLevel => "Coolant Critical Level",
            GenericDesktop::CoolantPump => "Coolant Pump",
            GenericDesktop::ChassisEnclosure => "Chassis Enclosure",
            GenericDesktop::WirelessRadioButton => "Wireless Radio Button",
            GenericDesktop::WirelessRadioLED => "Wireless Radio LED",
            GenericDesktop::WirelessRadioSliderSwitch => "Wireless Radio Slider Switch",
            GenericDesktop::SystemDisplayRotationLockButton => {
                "System Display Rotation Lock Button"
            }
            GenericDesktop::SystemDisplayRotationLockSliderSwitch => {
                "System Display Rotation Lock Slider Switch"
            }
            GenericDesktop::ControlEnable => "Control Enable",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x2`: "Simulation Controls"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum SimulationControls {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Flight Simulation Device"
    FlightSimulationDevice,
    /// Usage ID `0x2`: "Automobile Simulation Device"
    AutomobileSimulationDevice,
    /// Usage ID `0x3`: "Tank Simulation Device"
    TankSimulationDevice,
    /// Usage ID `0x4`: "Spaceship Simulation Device"
    SpaceshipSimulationDevice,
    /// Usage ID `0x5`: "Submarine Simulation Device"
    SubmarineSimulationDevice,
    /// Usage ID `0x6`: "Sailing Simulation Device"
    SailingSimulationDevice,
    /// Usage ID `0x7`: "Motorcycle Simulation Device"
    MotorcycleSimulationDevice,
    /// Usage ID `0x8`: "Sports Simulation Device"
    SportsSimulationDevice,
    /// Usage ID `0x9`: "Airplane Simulation Device"
    AirplaneSimulationDevice,
    /// Usage ID `0x10`: "Helicopter Simulation Device"
    HelicopterSimulationDevice,
    /// Usage ID `0x11`: "Magic Carpet Simulation Device"
    MagicCarpetSimulationDevice,
    /// Usage ID `0x12`: "Bicycle"
    Bicycle,
    /// Usage ID `0x32`: "Flight Control Stick"
    FlightControlStick,
    /// Usage ID `0x33`: "Flight Stick"
    FlightStick,
    /// Usage ID `0x34`: "Cyclic Control"
    CyclicControl,
    /// Usage ID `0x35`: "Cyclic Trim"
    CyclicTrim,
    /// Usage ID `0x36`: "Flight Yoke"
    FlightYoke,
    /// Usage ID `0x37`: "Track Control"
    TrackControl,
    /// Usage ID `0x38`: "Driving Control"
    DrivingControl,
    /// Usage ID `0x176`: "Aileron"
    Aileron,
    /// Usage ID `0x177`: "Aileron Trim"
    AileronTrim,
    /// Usage ID `0x178`: "Anti-Torque Control"
    AntiTorqueControl,
    /// Usage ID `0x179`: "Auto-pilot enable"
    Autopilotenable,
    /// Usage ID `0x180`: "Chaff Release"
    ChaffRelease,
    /// Usage ID `0x181`: "Collective Control"
    CollectiveControl,
    /// Usage ID `0x182`: "Dive Brake"
    DiveBrake,
    /// Usage ID `0x183`: "Electronic Counter Measures"
    ElectronicCounterMeasures,
    /// Usage ID `0x184`: "Elevator"
    Elevator,
    /// Usage ID `0x185`: "Elevator Trim"
    ElevatorTrim,
    /// Usage ID `0x186`: "Rudder"
    Rudder,
    /// Usage ID `0x187`: "Throttle"
    Throttle,
    /// Usage ID `0x188`: "Flight Communication"
    FlightCommunication,
    /// Usage ID `0x189`: "Flare Release"
    FlareRelease,
    /// Usage ID `0x190`: "Landing Gear"
    LandingGear,
    /// Usage ID `0x191`: "Toe Brake"
    ToeBrake,
    /// Usage ID `0x192`: "Trigger"
    Trigger,
    /// Usage ID `0x193`: "Weapons Arm"
    WeaponsArm,
    /// Usage ID `0x194`: "Weapons Select"
    WeaponsSelect,
    /// Usage ID `0x195`: "Wing Flaps"
    WingFlaps,
    /// Usage ID `0x196`: "Accelerator"
    Accelerator,
    /// Usage ID `0x197`: "Brake"
    Brake,
    /// Usage ID `0x198`: "Clutch"
    Clutch,
    /// Usage ID `0x199`: "Shifter"
    Shifter,
    /// Usage ID `0x200`: "Steering"
    Steering,
    /// Usage ID `0x201`: "Turret Direction"
    TurretDirection,
    /// Usage ID `0x202`: "Barrel Elevation"
    BarrelElevation,
    /// Usage ID `0x203`: "Dive Plane"
    DivePlane,
    /// Usage ID `0x204`: "Ballast"
    Ballast,
    /// Usage ID `0x205`: "Bicycle Crank"
    BicycleCrank,
    /// Usage ID `0x206`: "Handle Bars"
    HandleBars,
    /// Usage ID `0x207`: "Front Brake"
    FrontBrake,
    /// Usage ID `0x208`: "Rear Brake"
    RearBrake,
}

impl fmt::Display for SimulationControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            SimulationControls::Undefined => "Undefined",
            SimulationControls::FlightSimulationDevice => "Flight Simulation Device",
            SimulationControls::AutomobileSimulationDevice => "Automobile Simulation Device",
            SimulationControls::TankSimulationDevice => "Tank Simulation Device",
            SimulationControls::SpaceshipSimulationDevice => "Spaceship Simulation Device",
            SimulationControls::SubmarineSimulationDevice => "Submarine Simulation Device",
            SimulationControls::SailingSimulationDevice => "Sailing Simulation Device",
            SimulationControls::MotorcycleSimulationDevice => "Motorcycle Simulation Device",
            SimulationControls::SportsSimulationDevice => "Sports Simulation Device",
            SimulationControls::AirplaneSimulationDevice => "Airplane Simulation Device",
            SimulationControls::HelicopterSimulationDevice => "Helicopter Simulation Device",
            SimulationControls::MagicCarpetSimulationDevice => "Magic Carpet Simulation Device",
            SimulationControls::Bicycle => "Bicycle",
            SimulationControls::FlightControlStick => "Flight Control Stick",
            SimulationControls::FlightStick => "Flight Stick",
            SimulationControls::CyclicControl => "Cyclic Control",
            SimulationControls::CyclicTrim => "Cyclic Trim",
            SimulationControls::FlightYoke => "Flight Yoke",
            SimulationControls::TrackControl => "Track Control",
            SimulationControls::DrivingControl => "Driving Control",
            SimulationControls::Aileron => "Aileron",
            SimulationControls::AileronTrim => "Aileron Trim",
            SimulationControls::AntiTorqueControl => "Anti-Torque Control",
            SimulationControls::Autopilotenable => "Auto-pilot enable",
            SimulationControls::ChaffRelease => "Chaff Release",
            SimulationControls::CollectiveControl => "Collective Control",
            SimulationControls::DiveBrake => "Dive Brake",
            SimulationControls::ElectronicCounterMeasures => "Electronic Counter Measures",
            SimulationControls::Elevator => "Elevator",
            SimulationControls::ElevatorTrim => "Elevator Trim",
            SimulationControls::Rudder => "Rudder",
            SimulationControls::Throttle => "Throttle",
            SimulationControls::FlightCommunication => "Flight Communication",
            SimulationControls::FlareRelease => "Flare Release",
            SimulationControls::LandingGear => "Landing Gear",
            SimulationControls::ToeBrake => "Toe Brake",
            SimulationControls::Trigger => "Trigger",
            SimulationControls::WeaponsArm => "Weapons Arm",
            SimulationControls::WeaponsSelect => "Weapons Select",
            SimulationControls::WingFlaps => "Wing Flaps",
            SimulationControls::Accelerator => "Accelerator",
            SimulationControls::Brake => "Brake",
            SimulationControls::Clutch => "Clutch",
            SimulationControls::Shifter => "Shifter",
            SimulationControls::Steering => "Steering",
            SimulationControls::TurretDirection => "Turret Direction",
            SimulationControls::BarrelElevation => "Barrel Elevation",
            SimulationControls::DivePlane => "Dive Plane",
            SimulationControls::Ballast => "Ballast",
            SimulationControls::BicycleCrank => "Bicycle Crank",
            SimulationControls::HandleBars => "Handle Bars",
            SimulationControls::FrontBrake => "Front Brake",
            SimulationControls::RearBrake => "Rear Brake",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x3`: "VR Controls"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VRControls {
    /// Usage ID `0x0`: "Unidentified"
    Unidentified,
    /// Usage ID `0x1`: "Belt"
    Belt,
    /// Usage ID `0x2`: "Body Suit"
    BodySuit,
    /// Usage ID `0x3`: "Flexor"
    Flexor,
    /// Usage ID `0x4`: "Glove"
    Glove,
    /// Usage ID `0x5`: "Head Tracker"
    HeadTracker,
    /// Usage ID `0x6`: "Head Mounted Display"
    HeadMountedDisplay,
    /// Usage ID `0x7`: "Hand Tracker"
    HandTracker,
    /// Usage ID `0x8`: "Oculometer"
    Oculometer,
    /// Usage ID `0x9`: "Vest"
    Vest,
    /// Usage ID `0x10`: "Animatronic Device"
    AnimatronicDevice,
    /// Usage ID `0x32`: "Stereo Enable"
    StereoEnable,
    /// Usage ID `0x33`: "Display Enable"
    DisplayEnable,
}

impl fmt::Display for VRControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VRControls::Unidentified => "Unidentified",
            VRControls::Belt => "Belt",
            VRControls::BodySuit => "Body Suit",
            VRControls::Flexor => "Flexor",
            VRControls::Glove => "Glove",
            VRControls::HeadTracker => "Head Tracker",
            VRControls::HeadMountedDisplay => "Head Mounted Display",
            VRControls::HandTracker => "Hand Tracker",
            VRControls::Oculometer => "Oculometer",
            VRControls::Vest => "Vest",
            VRControls::AnimatronicDevice => "Animatronic Device",
            VRControls::StereoEnable => "Stereo Enable",
            VRControls::DisplayEnable => "Display Enable",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x4`: "Sports Controls"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum SportsControls {
    /// Usage ID `0x0`: "Unidentified"
    Unidentified,
    /// Usage ID `0x1`: "Baseball Bat"
    BaseballBat,
    /// Usage ID `0x2`: "Golf Club"
    GolfClub,
    /// Usage ID `0x3`: "Rowing Machine"
    RowingMachine,
    /// Usage ID `0x4`: "Treadmill"
    Treadmill,
    /// Usage ID `0x48`: "Oar"
    Oar,
    /// Usage ID `0x49`: "Slope"
    Slope,
    /// Usage ID `0x50`: "Rate"
    Rate,
    /// Usage ID `0x51`: "Stick Speed"
    StickSpeed,
    /// Usage ID `0x52`: "Stick Face Angle"
    StickFaceAngle,
    /// Usage ID `0x53`: "Stick Heel/Toe"
    StickHeelToe,
    /// Usage ID `0x54`: "Stick Follow Through"
    StickFollowThrough,
    /// Usage ID `0x55`: "Stick Tempo"
    StickTempo,
    /// Usage ID `0x56`: "Stick Type"
    StickType,
    /// Usage ID `0x57`: "Stick Height"
    StickHeight,
    /// Usage ID `0x80`: "Putter"
    Putter,
    /// Usage ID `0x81`: "1 Iron"
    OneIron,
    /// Usage ID `0x82`: "2 Iron"
    TwoIron,
    /// Usage ID `0x83`: "3 Iron"
    ThreeIron,
    /// Usage ID `0x84`: "4 Iron"
    FourIron,
    /// Usage ID `0x85`: "5 Iron"
    FiveIron,
    /// Usage ID `0x86`: "6 Iron"
    SixIron,
    /// Usage ID `0x87`: "7 Iron"
    SevenIron,
    /// Usage ID `0x88`: "8 Iron"
    EightIron,
    /// Usage ID `0x89`: "9 Iron"
    NineIron,
    /// Usage ID `0x90`: "10 Iron"
    One0Iron,
    /// Usage ID `0x91`: "11 Iron"
    One1Iron,
    /// Usage ID `0x92`: "Sand Wedge"
    SandWedge,
    /// Usage ID `0x93`: "Loft Wedge"
    LoftWedge,
    /// Usage ID `0x94`: "Power Wedge"
    PowerWedge,
    /// Usage ID `0x95`: "1 Wood"
    OneWood,
    /// Usage ID `0x96`: "3 Wood"
    ThreeWood,
    /// Usage ID `0x97`: "5 Wood"
    FiveWood,
    /// Usage ID `0x98`: "7 Wood"
    SevenWood,
    /// Usage ID `0x99`: "9 Wood"
    NineWood,
}

impl fmt::Display for SportsControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            SportsControls::Unidentified => "Unidentified",
            SportsControls::BaseballBat => "Baseball Bat",
            SportsControls::GolfClub => "Golf Club",
            SportsControls::RowingMachine => "Rowing Machine",
            SportsControls::Treadmill => "Treadmill",
            SportsControls::Oar => "Oar",
            SportsControls::Slope => "Slope",
            SportsControls::Rate => "Rate",
            SportsControls::StickSpeed => "Stick Speed",
            SportsControls::StickFaceAngle => "Stick Face Angle",
            SportsControls::StickHeelToe => "Stick Heel/Toe",
            SportsControls::StickFollowThrough => "Stick Follow Through",
            SportsControls::StickTempo => "Stick Tempo",
            SportsControls::StickType => "Stick Type",
            SportsControls::StickHeight => "Stick Height",
            SportsControls::Putter => "Putter",
            SportsControls::OneIron => "1 Iron",
            SportsControls::TwoIron => "2 Iron",
            SportsControls::ThreeIron => "3 Iron",
            SportsControls::FourIron => "4 Iron",
            SportsControls::FiveIron => "5 Iron",
            SportsControls::SixIron => "6 Iron",
            SportsControls::SevenIron => "7 Iron",
            SportsControls::EightIron => "8 Iron",
            SportsControls::NineIron => "9 Iron",
            SportsControls::One0Iron => "10 Iron",
            SportsControls::One1Iron => "11 Iron",
            SportsControls::SandWedge => "Sand Wedge",
            SportsControls::LoftWedge => "Loft Wedge",
            SportsControls::PowerWedge => "Power Wedge",
            SportsControls::OneWood => "1 Wood",
            SportsControls::ThreeWood => "3 Wood",
            SportsControls::FiveWood => "5 Wood",
            SportsControls::SevenWood => "7 Wood",
            SportsControls::NineWood => "9 Wood",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x5`: "Gaming Controls"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GamingControls {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "3D Game Controller"
    ThreeDGameController,
    /// Usage ID `0x2`: "Pinball Device"
    PinballDevice,
    /// Usage ID `0x3`: "Gun Device"
    GunDevice,
    /// Usage ID `0x32`: "Point of View"
    PointofView,
    /// Usage ID `0x33`: "Turn Right/Left"
    TurnRightLeft,
    /// Usage ID `0x34`: "Pitch Forward/Backward"
    PitchForwardBackward,
    /// Usage ID `0x35`: "Roll Right/Left"
    RollRightLeft,
    /// Usage ID `0x36`: "Move Right/Left"
    MoveRightLeft,
    /// Usage ID `0x37`: "Move Forward/Backward"
    MoveForwardBackward,
    /// Usage ID `0x38`: "Move Up/Down"
    MoveUpDown,
    /// Usage ID `0x39`: "Lean Right/Left"
    LeanRightLeft,
    /// Usage ID `0x40`: "Lean Forward/Backward"
    LeanForwardBackward,
    /// Usage ID `0x41`: "Height of POV"
    HeightofPOV,
    /// Usage ID `0x42`: "Flipper"
    Flipper,
    /// Usage ID `0x43`: "Secondary Flipper"
    SecondaryFlipper,
    /// Usage ID `0x44`: "Bump"
    Bump,
    /// Usage ID `0x45`: "New Game"
    NewGame,
    /// Usage ID `0x46`: "Shoot Ball"
    ShootBall,
    /// Usage ID `0x47`: "Player"
    Player,
    /// Usage ID `0x48`: "Gun Bolt"
    GunBolt,
    /// Usage ID `0x49`: "Gun Clip"
    GunClip,
    /// Usage ID `0x50`: "Gun Selector"
    GunSelector,
    /// Usage ID `0x51`: "Gun Single Shot"
    GunSingleShot,
    /// Usage ID `0x52`: "Gun Burst"
    GunBurst,
    /// Usage ID `0x53`: "Gun Automatic"
    GunAutomatic,
    /// Usage ID `0x54`: "Gun Safety"
    GunSafety,
    /// Usage ID `0x55`: "Gamepad Fire/Jump"
    GamepadFireJump,
    /// Usage ID `0x57`: "Gamepad Trigger"
    GamepadTrigger,
    /// Usage ID `0x58`: "Form-fitting gamepad"
    Formfittinggamepad,
}

impl fmt::Display for GamingControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            GamingControls::Undefined => "Undefined",
            GamingControls::ThreeDGameController => "3D Game Controller",
            GamingControls::PinballDevice => "Pinball Device",
            GamingControls::GunDevice => "Gun Device",
            GamingControls::PointofView => "Point of View",
            GamingControls::TurnRightLeft => "Turn Right/Left",
            GamingControls::PitchForwardBackward => "Pitch Forward/Backward",
            GamingControls::RollRightLeft => "Roll Right/Left",
            GamingControls::MoveRightLeft => "Move Right/Left",
            GamingControls::MoveForwardBackward => "Move Forward/Backward",
            GamingControls::MoveUpDown => "Move Up/Down",
            GamingControls::LeanRightLeft => "Lean Right/Left",
            GamingControls::LeanForwardBackward => "Lean Forward/Backward",
            GamingControls::HeightofPOV => "Height of POV",
            GamingControls::Flipper => "Flipper",
            GamingControls::SecondaryFlipper => "Secondary Flipper",
            GamingControls::Bump => "Bump",
            GamingControls::NewGame => "New Game",
            GamingControls::ShootBall => "Shoot Ball",
            GamingControls::Player => "Player",
            GamingControls::GunBolt => "Gun Bolt",
            GamingControls::GunClip => "Gun Clip",
            GamingControls::GunSelector => "Gun Selector",
            GamingControls::GunSingleShot => "Gun Single Shot",
            GamingControls::GunBurst => "Gun Burst",
            GamingControls::GunAutomatic => "Gun Automatic",
            GamingControls::GunSafety => "Gun Safety",
            GamingControls::GamepadFireJump => "Gamepad Fire/Jump",
            GamingControls::GamepadTrigger => "Gamepad Trigger",
            GamingControls::Formfittinggamepad => "Form-fitting gamepad",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x6`: "Generic Device Controls"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GenericDeviceControls {
    /// Usage ID `0x0`: "Unidentified"
    Unidentified,
    /// Usage ID `0x1`: "Background Controls"
    BackgroundControls,
    /// Usage ID `0x32`: "Battery Strength"
    BatteryStrength,
    /// Usage ID `0x33`: "Wireless Channel"
    WirelessChannel,
    /// Usage ID `0x34`: "Wireless ID"
    WirelessID,
    /// Usage ID `0x35`: "Discover Wireless Control"
    DiscoverWirelessControl,
    /// Usage ID `0x36`: "Security Code Character Entered"
    SecurityCodeCharacterEntered,
    /// Usage ID `0x37`: "Security Code Character Erased"
    SecurityCodeCharacterErased,
    /// Usage ID `0x38`: "Security Code Cleared"
    SecurityCodeCleared,
    /// Usage ID `0x39`: "Sequence ID"
    SequenceID,
    /// Usage ID `0x40`: "Sequence ID Reset"
    SequenceIDReset,
    /// Usage ID `0x41`: "RF Signal Strength"
    RFSignalStrength,
    /// Usage ID `0x42`: "Software Version"
    SoftwareVersion,
    /// Usage ID `0x43`: "Protocol Version"
    ProtocolVersion,
    /// Usage ID `0x44`: "Hardware Version"
    HardwareVersion,
    /// Usage ID `0x45`: "Major"
    Major,
    /// Usage ID `0x46`: "Minor"
    Minor,
    /// Usage ID `0x47`: "Revision"
    Revision,
    /// Usage ID `0x48`: "Handedness"
    Handedness,
    /// Usage ID `0x49`: "Either Hand"
    EitherHand,
    /// Usage ID `0x50`: "Left Hand"
    LeftHand,
    /// Usage ID `0x51`: "Right Hand"
    RightHand,
    /// Usage ID `0x52`: "Both Hands"
    BothHands,
    /// Usage ID `0x64`: "Grip Pose Offset"
    GripPoseOffset,
    /// Usage ID `0x65`: "Pointer Pose Offset"
    PointerPoseOffset,
}

impl fmt::Display for GenericDeviceControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            GenericDeviceControls::Unidentified => "Unidentified",
            GenericDeviceControls::BackgroundControls => "Background Controls",
            GenericDeviceControls::BatteryStrength => "Battery Strength",
            GenericDeviceControls::WirelessChannel => "Wireless Channel",
            GenericDeviceControls::WirelessID => "Wireless ID",
            GenericDeviceControls::DiscoverWirelessControl => "Discover Wireless Control",
            GenericDeviceControls::SecurityCodeCharacterEntered => {
                "Security Code Character Entered"
            }
            GenericDeviceControls::SecurityCodeCharacterErased => "Security Code Character Erased",
            GenericDeviceControls::SecurityCodeCleared => "Security Code Cleared",
            GenericDeviceControls::SequenceID => "Sequence ID",
            GenericDeviceControls::SequenceIDReset => "Sequence ID Reset",
            GenericDeviceControls::RFSignalStrength => "RF Signal Strength",
            GenericDeviceControls::SoftwareVersion => "Software Version",
            GenericDeviceControls::ProtocolVersion => "Protocol Version",
            GenericDeviceControls::HardwareVersion => "Hardware Version",
            GenericDeviceControls::Major => "Major",
            GenericDeviceControls::Minor => "Minor",
            GenericDeviceControls::Revision => "Revision",
            GenericDeviceControls::Handedness => "Handedness",
            GenericDeviceControls::EitherHand => "Either Hand",
            GenericDeviceControls::LeftHand => "Left Hand",
            GenericDeviceControls::RightHand => "Right Hand",
            GenericDeviceControls::BothHands => "Both Hands",
            GenericDeviceControls::GripPoseOffset => "Grip Pose Offset",
            GenericDeviceControls::PointerPoseOffset => "Pointer Pose Offset",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x7`: "Keyboard"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Keyboard {
    /// Usage ID `0x1`: "ErrorRollOver"
    ErrorRollOver,
    /// Usage ID `0x2`: "POSTFail"
    POSTFail,
    /// Usage ID `0x3`: "ErrorUndefine"
    ErrorUndefine,
    /// Usage ID `0x4`: "a and A"
    aAndA,
    /// Usage ID `0x5`: "b and B"
    bAndB,
    /// Usage ID `0x6`: "c and C"
    cAndC,
    /// Usage ID `0x7`: "d and D"
    dAndD,
    /// Usage ID `0x8`: "e and E"
    eAndE,
    /// Usage ID `0x9`: "f and F"
    fAndF,
    /// Usage ID `0x10`: "g and G"
    gAndG,
    /// Usage ID `0x11`: "h and H"
    hAndH,
    /// Usage ID `0x12`: "i and I"
    iAndI,
    /// Usage ID `0x13`: "j and J"
    jAndJ,
    /// Usage ID `0x14`: "k and K"
    kAndK,
    /// Usage ID `0x15`: "l and L"
    lAndL,
    /// Usage ID `0x16`: "m and M"
    mAndM,
    /// Usage ID `0x17`: "n and N"
    nAndN,
    /// Usage ID `0x18`: "o and O"
    oAndO,
    /// Usage ID `0x19`: "p and P"
    pAndP,
    /// Usage ID `0x20`: "q and Q"
    qAndQ,
    /// Usage ID `0x21`: "r and R"
    rAndR,
    /// Usage ID `0x22`: "s and S"
    sAndS,
    /// Usage ID `0x23`: "t and T"
    tAndT,
    /// Usage ID `0x24`: "u and U"
    uAndU,
    /// Usage ID `0x25`: "v and V"
    vAndV,
    /// Usage ID `0x26`: "w and W"
    wAndW,
    /// Usage ID `0x27`: "x and X"
    xAndX,
    /// Usage ID `0x28`: "y and Y"
    yAndY,
    /// Usage ID `0x29`: "z and Z"
    zAndZ,
    /// Usage ID `0x30`: "1 and !"
    OneAndExclamationMark,
    /// Usage ID `0x31`: "2 and @"
    TwoAndAt,
    /// Usage ID `0x32`: "3 and #"
    ThreeAndHash,
    /// Usage ID `0x33`: "4 and $"
    FourAndDollar,
    /// Usage ID `0x34`: "5 and %"
    FiveAndPercent,
    /// Usage ID `0x35`: "6 and ^"
    SixAndCaret,
    /// Usage ID `0x36`: "7 and &"
    SevenAndAmpersand,
    /// Usage ID `0x37`: "8 and *"
    EightAndStar,
    /// Usage ID `0x38`: "9 and ("
    NineAndOpenParenthesis,
    /// Usage ID `0x39`: "0 and )"
    ZeroAndCloseParenthesis,
    /// Usage ID `0x40`: "Return (ENTER)"
    ReturnOpenParenthesisENTERCloseParenthesis,
    /// Usage ID `0x41`: "ESCAPE"
    ESCAPE,
    /// Usage ID `0x42`: "DELETE (Backspace)"
    DELETEOpenParenthesisBackspaceCloseParenthesis,
    /// Usage ID `0x43`: "Tab"
    Tab,
    /// Usage ID `0x44`: "Spacebar"
    Spacebar,
    /// Usage ID `0x45`: "- and (underscore)"
    MinusAndOpenParenthesisunderscoreCloseParenthesis,
    /// Usage ID `0x46`: "= and +"
    EqualsAndPlus,
    /// Usage ID `0x47`: "[ and {"
    OpenBracketAndOpenBrace,
    /// Usage ID `0x48`: "] and }"
    CloseBracketAndCloseBrace,
    /// Usage ID `0x49`: "\\ and |"
    BackslashAndPipe,
    /// Usage ID `0x50`: "Non-US # and ~"
    NonMinusUSHashAndTilde,
    /// Usage ID `0x51`: "; and :"
    SemicolonAndColon,
    /// Usage ID `0x52`: "' and \""
    SingleQuoteAndDoubleQuote,
    /// Usage ID `0x53`: "Grave Accent and Tilde"
    GraveAccentAndTilde,
    /// Usage ID `0x54`: "Keyboard, and <"
    KeyboardCommaAndLessThan,
    /// Usage ID `0x55`: ". and >"
    PeriodAndGreaterThan,
    /// Usage ID `0x56`: "/ and ?"
    SlashAndQuestionMark,
    /// Usage ID `0x57`: "Caps Lock"
    CapsLock,
    /// Usage ID `0x58`: "F1"
    F1,
    /// Usage ID `0x59`: "F2"
    F2,
    /// Usage ID `0x60`: "F3"
    F3,
    /// Usage ID `0x61`: "F4"
    F4,
    /// Usage ID `0x62`: "F5"
    F5,
    /// Usage ID `0x63`: "F6"
    F6,
    /// Usage ID `0x64`: "F7"
    F7,
    /// Usage ID `0x65`: "F8"
    F8,
    /// Usage ID `0x66`: "F9"
    F9,
    /// Usage ID `0x67`: "F10"
    F10,
    /// Usage ID `0x68`: "F11"
    F11,
    /// Usage ID `0x69`: "F12"
    F12,
    /// Usage ID `0x70`: "PrintScreen"
    PrintScreen,
    /// Usage ID `0x71`: "Scroll Lock"
    ScrollLock,
    /// Usage ID `0x72`: "Pause"
    Pause,
    /// Usage ID `0x73`: "Insert"
    Insert,
    /// Usage ID `0x74`: "Home"
    Home,
    /// Usage ID `0x75`: "PageUp"
    PageUp,
    /// Usage ID `0x76`: "Delete Forward"
    DeleteForward,
    /// Usage ID `0x77`: "End"
    End,
    /// Usage ID `0x78`: "PageDown"
    PageDown,
    /// Usage ID `0x79`: "RightArrow"
    RightArrow,
    /// Usage ID `0x80`: "LeftArrow"
    LeftArrow,
    /// Usage ID `0x81`: "DownArrow"
    DownArrow,
    /// Usage ID `0x82`: "UpArrow"
    UpArrow,
    /// Usage ID `0x83`: "Keypad Num Lock and Clear"
    KeypadNumLockAndClear,
    /// Usage ID `0x84`: "Keypad /"
    KeypadSlash,
    /// Usage ID `0x85`: "Keypad *"
    KeypadStar,
    /// Usage ID `0x86`: "Keypad -"
    KeypadMinus,
    /// Usage ID `0x87`: "Keypad +"
    KeypadPlus,
    /// Usage ID `0x88`: "Keypad ENTER"
    KeypadENTER,
    /// Usage ID `0x89`: "Keypad 1 and End"
    Keypad1AndEnd,
    /// Usage ID `0x90`: "Keypad 2 and Down Arrow"
    Keypad2AndDownArrow,
    /// Usage ID `0x91`: "Keypad 3 and PageDn"
    Keypad3AndPageDn,
    /// Usage ID `0x92`: "Keypad 4 and Left Arrow"
    Keypad4AndLeftArrow,
    /// Usage ID `0x93`: "Keypad 5"
    Keypad5,
    /// Usage ID `0x94`: "Keypad 6 and Right Arrow"
    Keypad6AndRightArrow,
    /// Usage ID `0x95`: "Keypad 7 and Home"
    Keypad7AndHome,
    /// Usage ID `0x96`: "Keypad 8 and Up Arrow"
    Keypad8AndUpArrow,
    /// Usage ID `0x97`: "Keypad 9 and PageUp"
    Keypad9AndPageUp,
    /// Usage ID `0x98`: "Keypad 0 and Insert"
    Keypad0AndInsert,
    /// Usage ID `0x99`: "Keypad . and Delete"
    KeypadPeriodAndDelete,
    /// Usage ID `0x100`: "Non-US \\ and |"
    NonMinusUSBackslashAndPipe,
    /// Usage ID `0x101`: "Application"
    Application,
    /// Usage ID `0x102`: "Power"
    Power,
    /// Usage ID `0x103`: "Keypad ="
    KeypadEquals,
    /// Usage ID `0x104`: "F13"
    F13,
    /// Usage ID `0x105`: "F14"
    F14,
    /// Usage ID `0x106`: "F15"
    F15,
    /// Usage ID `0x107`: "F16"
    F16,
    /// Usage ID `0x108`: "F17"
    F17,
    /// Usage ID `0x109`: "F18"
    F18,
    /// Usage ID `0x110`: "F19"
    F19,
    /// Usage ID `0x111`: "F20"
    F20,
    /// Usage ID `0x112`: "F21"
    F21,
    /// Usage ID `0x113`: "F22"
    F22,
    /// Usage ID `0x114`: "F23"
    F23,
    /// Usage ID `0x115`: "F24"
    F24,
    /// Usage ID `0x116`: "Execute"
    Execute,
    /// Usage ID `0x117`: "Help"
    Help,
    /// Usage ID `0x118`: "Menu"
    Menu,
    /// Usage ID `0x119`: "Select"
    Select,
    /// Usage ID `0x120`: "Stop"
    Stop,
    /// Usage ID `0x121`: "Again"
    Again,
    /// Usage ID `0x122`: "Undo"
    Undo,
    /// Usage ID `0x123`: "Cut"
    Cut,
    /// Usage ID `0x124`: "Copy"
    Copy,
    /// Usage ID `0x125`: "Paste"
    Paste,
    /// Usage ID `0x126`: "Find"
    Find,
    /// Usage ID `0x127`: "Mute"
    Mute,
    /// Usage ID `0x128`: "Volume Up"
    VolumeUp,
    /// Usage ID `0x129`: "Volume Down"
    VolumeDown,
    /// Usage ID `0x130`: "Locking Caps Lock"
    LockingCapsLock,
    /// Usage ID `0x131`: "Locking Num Lock"
    LockingNumLock,
    /// Usage ID `0x132`: "Locking Scroll Lock"
    LockingScrollLock,
    /// Usage ID `0x133`: "Keypad Comma"
    KeypadComma,
    /// Usage ID `0x134`: "Keypad Equal Sign"
    KeypadEqualSign,
    /// Usage ID `0x135`: "Kanji1"
    Kanji1,
    /// Usage ID `0x136`: "Kanji2"
    Kanji2,
    /// Usage ID `0x137`: "Kanji3"
    Kanji3,
    /// Usage ID `0x138`: "Kanji4"
    Kanji4,
    /// Usage ID `0x139`: "Kanji5"
    Kanji5,
    /// Usage ID `0x140`: "Kanji6"
    Kanji6,
    /// Usage ID `0x141`: "Kanji7"
    Kanji7,
    /// Usage ID `0x142`: "Kanji8"
    Kanji8,
    /// Usage ID `0x143`: "Kanji9"
    Kanji9,
    /// Usage ID `0x144`: "LANG1"
    LANG1,
    /// Usage ID `0x145`: "LANG2"
    LANG2,
    /// Usage ID `0x146`: "LANG3"
    LANG3,
    /// Usage ID `0x147`: "LANG4"
    LANG4,
    /// Usage ID `0x148`: "LANG5"
    LANG5,
    /// Usage ID `0x149`: "LANG6"
    LANG6,
    /// Usage ID `0x150`: "LANG7"
    LANG7,
    /// Usage ID `0x151`: "LANG8"
    LANG8,
    /// Usage ID `0x152`: "LANG9"
    LANG9,
    /// Usage ID `0x153`: "Alternate Erase"
    AlternateErase,
    /// Usage ID `0x154`: "SysReq/Attention"
    SysReqSlashAttention,
    /// Usage ID `0x155`: "Cancel"
    Cancel,
    /// Usage ID `0x156`: "Clear"
    Clear,
    /// Usage ID `0x157`: "Prior"
    Prior,
    /// Usage ID `0x158`: "Return"
    Return,
    /// Usage ID `0x159`: "Separator"
    Separator,
    /// Usage ID `0x160`: "Out"
    Out,
    /// Usage ID `0x161`: "Oper"
    Oper,
    /// Usage ID `0x162`: "Clear/Again"
    ClearSlashAgain,
    /// Usage ID `0x163`: "CrSel/Props"
    CrSelSlashProps,
    /// Usage ID `0x164`: "ExSel"
    ExSel,
    /// Usage ID `0x224`: "LeftControl"
    LeftControl,
    /// Usage ID `0x225`: "LeftShift"
    LeftShift,
    /// Usage ID `0x226`: "LeftAlt"
    LeftAlt,
    /// Usage ID `0x227`: "Left GUI"
    LeftGUI,
    /// Usage ID `0x228`: "RightControl"
    RightControl,
    /// Usage ID `0x229`: "RightShift"
    RightShift,
    /// Usage ID `0x230`: "RightAlt"
    RightAlt,
    /// Usage ID `0x231`: "Right GUI"
    RightGUI,
}

impl fmt::Display for Keyboard {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Keyboard::ErrorRollOver => "ErrorRollOver",
            Keyboard::POSTFail => "POSTFail",
            Keyboard::ErrorUndefine => "ErrorUndefine",
            Keyboard::aAndA => "a and A",
            Keyboard::bAndB => "b and B",
            Keyboard::cAndC => "c and C",
            Keyboard::dAndD => "d and D",
            Keyboard::eAndE => "e and E",
            Keyboard::fAndF => "f and F",
            Keyboard::gAndG => "g and G",
            Keyboard::hAndH => "h and H",
            Keyboard::iAndI => "i and I",
            Keyboard::jAndJ => "j and J",
            Keyboard::kAndK => "k and K",
            Keyboard::lAndL => "l and L",
            Keyboard::mAndM => "m and M",
            Keyboard::nAndN => "n and N",
            Keyboard::oAndO => "o and O",
            Keyboard::pAndP => "p and P",
            Keyboard::qAndQ => "q and Q",
            Keyboard::rAndR => "r and R",
            Keyboard::sAndS => "s and S",
            Keyboard::tAndT => "t and T",
            Keyboard::uAndU => "u and U",
            Keyboard::vAndV => "v and V",
            Keyboard::wAndW => "w and W",
            Keyboard::xAndX => "x and X",
            Keyboard::yAndY => "y and Y",
            Keyboard::zAndZ => "z and Z",
            Keyboard::OneAndExclamationMark => "1 and !",
            Keyboard::TwoAndAt => "2 and @",
            Keyboard::ThreeAndHash => "3 and #",
            Keyboard::FourAndDollar => "4 and $",
            Keyboard::FiveAndPercent => "5 and %",
            Keyboard::SixAndCaret => "6 and ^",
            Keyboard::SevenAndAmpersand => "7 and &",
            Keyboard::EightAndStar => "8 and *",
            Keyboard::NineAndOpenParenthesis => "9 and (",
            Keyboard::ZeroAndCloseParenthesis => "0 and )",
            Keyboard::ReturnOpenParenthesisENTERCloseParenthesis => "Return (ENTER)",
            Keyboard::ESCAPE => "ESCAPE",
            Keyboard::DELETEOpenParenthesisBackspaceCloseParenthesis => "DELETE (Backspace)",
            Keyboard::Tab => "Tab",
            Keyboard::Spacebar => "Spacebar",
            Keyboard::MinusAndOpenParenthesisunderscoreCloseParenthesis => "- and (underscore)",
            Keyboard::EqualsAndPlus => "= and +",
            Keyboard::OpenBracketAndOpenBrace => "[ and {",
            Keyboard::CloseBracketAndCloseBrace => "] and }",
            Keyboard::BackslashAndPipe => "\\ and |",
            Keyboard::NonMinusUSHashAndTilde => "Non-US # and ~",
            Keyboard::SemicolonAndColon => "; and :",
            Keyboard::SingleQuoteAndDoubleQuote => "' and \"",
            Keyboard::GraveAccentAndTilde => "Grave Accent and Tilde",
            Keyboard::KeyboardCommaAndLessThan => "Keyboard, and <",
            Keyboard::PeriodAndGreaterThan => ". and >",
            Keyboard::SlashAndQuestionMark => "/ and ?",
            Keyboard::CapsLock => "Caps Lock",
            Keyboard::F1 => "F1",
            Keyboard::F2 => "F2",
            Keyboard::F3 => "F3",
            Keyboard::F4 => "F4",
            Keyboard::F5 => "F5",
            Keyboard::F6 => "F6",
            Keyboard::F7 => "F7",
            Keyboard::F8 => "F8",
            Keyboard::F9 => "F9",
            Keyboard::F10 => "F10",
            Keyboard::F11 => "F11",
            Keyboard::F12 => "F12",
            Keyboard::PrintScreen => "PrintScreen",
            Keyboard::ScrollLock => "Scroll Lock",
            Keyboard::Pause => "Pause",
            Keyboard::Insert => "Insert",
            Keyboard::Home => "Home",
            Keyboard::PageUp => "PageUp",
            Keyboard::DeleteForward => "Delete Forward",
            Keyboard::End => "End",
            Keyboard::PageDown => "PageDown",
            Keyboard::RightArrow => "RightArrow",
            Keyboard::LeftArrow => "LeftArrow",
            Keyboard::DownArrow => "DownArrow",
            Keyboard::UpArrow => "UpArrow",
            Keyboard::KeypadNumLockAndClear => "Keypad Num Lock and Clear",
            Keyboard::KeypadSlash => "Keypad /",
            Keyboard::KeypadStar => "Keypad *",
            Keyboard::KeypadMinus => "Keypad -",
            Keyboard::KeypadPlus => "Keypad +",
            Keyboard::KeypadENTER => "Keypad ENTER",
            Keyboard::Keypad1AndEnd => "Keypad 1 and End",
            Keyboard::Keypad2AndDownArrow => "Keypad 2 and Down Arrow",
            Keyboard::Keypad3AndPageDn => "Keypad 3 and PageDn",
            Keyboard::Keypad4AndLeftArrow => "Keypad 4 and Left Arrow",
            Keyboard::Keypad5 => "Keypad 5",
            Keyboard::Keypad6AndRightArrow => "Keypad 6 and Right Arrow",
            Keyboard::Keypad7AndHome => "Keypad 7 and Home",
            Keyboard::Keypad8AndUpArrow => "Keypad 8 and Up Arrow",
            Keyboard::Keypad9AndPageUp => "Keypad 9 and PageUp",
            Keyboard::Keypad0AndInsert => "Keypad 0 and Insert",
            Keyboard::KeypadPeriodAndDelete => "Keypad . and Delete",
            Keyboard::NonMinusUSBackslashAndPipe => "Non-US \\ and |",
            Keyboard::Application => "Application",
            Keyboard::Power => "Power",
            Keyboard::KeypadEquals => "Keypad =",
            Keyboard::F13 => "F13",
            Keyboard::F14 => "F14",
            Keyboard::F15 => "F15",
            Keyboard::F16 => "F16",
            Keyboard::F17 => "F17",
            Keyboard::F18 => "F18",
            Keyboard::F19 => "F19",
            Keyboard::F20 => "F20",
            Keyboard::F21 => "F21",
            Keyboard::F22 => "F22",
            Keyboard::F23 => "F23",
            Keyboard::F24 => "F24",
            Keyboard::Execute => "Execute",
            Keyboard::Help => "Help",
            Keyboard::Menu => "Menu",
            Keyboard::Select => "Select",
            Keyboard::Stop => "Stop",
            Keyboard::Again => "Again",
            Keyboard::Undo => "Undo",
            Keyboard::Cut => "Cut",
            Keyboard::Copy => "Copy",
            Keyboard::Paste => "Paste",
            Keyboard::Find => "Find",
            Keyboard::Mute => "Mute",
            Keyboard::VolumeUp => "Volume Up",
            Keyboard::VolumeDown => "Volume Down",
            Keyboard::LockingCapsLock => "Locking Caps Lock",
            Keyboard::LockingNumLock => "Locking Num Lock",
            Keyboard::LockingScrollLock => "Locking Scroll Lock",
            Keyboard::KeypadComma => "Keypad Comma",
            Keyboard::KeypadEqualSign => "Keypad Equal Sign",
            Keyboard::Kanji1 => "Kanji1",
            Keyboard::Kanji2 => "Kanji2",
            Keyboard::Kanji3 => "Kanji3",
            Keyboard::Kanji4 => "Kanji4",
            Keyboard::Kanji5 => "Kanji5",
            Keyboard::Kanji6 => "Kanji6",
            Keyboard::Kanji7 => "Kanji7",
            Keyboard::Kanji8 => "Kanji8",
            Keyboard::Kanji9 => "Kanji9",
            Keyboard::LANG1 => "LANG1",
            Keyboard::LANG2 => "LANG2",
            Keyboard::LANG3 => "LANG3",
            Keyboard::LANG4 => "LANG4",
            Keyboard::LANG5 => "LANG5",
            Keyboard::LANG6 => "LANG6",
            Keyboard::LANG7 => "LANG7",
            Keyboard::LANG8 => "LANG8",
            Keyboard::LANG9 => "LANG9",
            Keyboard::AlternateErase => "Alternate Erase",
            Keyboard::SysReqSlashAttention => "SysReq/Attention",
            Keyboard::Cancel => "Cancel",
            Keyboard::Clear => "Clear",
            Keyboard::Prior => "Prior",
            Keyboard::Return => "Return",
            Keyboard::Separator => "Separator",
            Keyboard::Out => "Out",
            Keyboard::Oper => "Oper",
            Keyboard::ClearSlashAgain => "Clear/Again",
            Keyboard::CrSelSlashProps => "CrSel/Props",
            Keyboard::ExSel => "ExSel",
            Keyboard::LeftControl => "LeftControl",
            Keyboard::LeftShift => "LeftShift",
            Keyboard::LeftAlt => "LeftAlt",
            Keyboard::LeftGUI => "Left GUI",
            Keyboard::RightControl => "RightControl",
            Keyboard::RightShift => "RightShift",
            Keyboard::RightAlt => "RightAlt",
            Keyboard::RightGUI => "Right GUI",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x8`: "LEDs"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum LEDs {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Num Lock"
    NumLock,
    /// Usage ID `0x2`: "Caps Lock"
    CapsLock,
    /// Usage ID `0x3`: "Scroll Lock"
    ScrollLock,
    /// Usage ID `0x4`: "Compose"
    Compose,
    /// Usage ID `0x5`: "Kana"
    Kana,
    /// Usage ID `0x6`: "Power"
    Power,
    /// Usage ID `0x7`: "Shift"
    Shift,
    /// Usage ID `0x8`: "Do Not Disturb"
    DoNotDisturb,
    /// Usage ID `0x9`: "Mute"
    Mute,
    /// Usage ID `0x10`: "Tone Enable"
    ToneEnable,
    /// Usage ID `0x11`: "High Cut Filter"
    HighCutFilter,
    /// Usage ID `0x12`: "Low Cut Filter"
    LowCutFilter,
    /// Usage ID `0x13`: "Equalizer Enable"
    EqualizerEnable,
    /// Usage ID `0x14`: "Sound Field On"
    SoundFieldOn,
    /// Usage ID `0x15`: "Surround field On"
    SurroundfieldOn,
    /// Usage ID `0x16`: "Repeat"
    Repeat,
    /// Usage ID `0x17`: "Stereo"
    Stereo,
    /// Usage ID `0x18`: "Sampling Rate Detect"
    SamplingRateDetect,
    /// Usage ID `0x19`: "Spinning"
    Spinning,
    /// Usage ID `0x20`: "CAV"
    CAV,
    /// Usage ID `0x21`: "CLV"
    CLV,
    /// Usage ID `0x22`: "Recording Format Detect"
    RecordingFormatDetect,
    /// Usage ID `0x23`: "Off-Hook"
    OffHook,
    /// Usage ID `0x24`: "Ring"
    Ring,
    /// Usage ID `0x25`: "Message Waiting"
    MessageWaiting,
    /// Usage ID `0x26`: "Data Mode"
    DataMode,
    /// Usage ID `0x27`: "Battery Operation"
    BatteryOperation,
    /// Usage ID `0x28`: "Battery OK"
    BatteryOK,
    /// Usage ID `0x29`: "Battery Low"
    BatteryLow,
    /// Usage ID `0x30`: "Speaker"
    Speaker,
    /// Usage ID `0x31`: "Head Set"
    HeadSet,
    /// Usage ID `0x32`: "Hold"
    Hold,
    /// Usage ID `0x33`: "Microphone"
    Microphone,
    /// Usage ID `0x34`: "Coverage"
    Coverage,
    /// Usage ID `0x35`: "Night Mode"
    NightMode,
    /// Usage ID `0x36`: "Send Calls"
    SendCalls,
    /// Usage ID `0x37`: "Call Pickup"
    CallPickup,
    /// Usage ID `0x38`: "Conference"
    Conference,
    /// Usage ID `0x39`: "Stand-by"
    Standby,
    /// Usage ID `0x40`: "Camera On"
    CameraOn,
    /// Usage ID `0x41`: "Camera Off"
    CameraOff,
    /// Usage ID `0x42`: "On-Line"
    OnLine,
    /// Usage ID `0x43`: "Off-Line"
    OffLine,
    /// Usage ID `0x44`: "Busy"
    Busy,
    /// Usage ID `0x45`: "Ready"
    Ready,
    /// Usage ID `0x46`: "Paper-Out"
    PaperOut,
    /// Usage ID `0x47`: "Paper-Jam"
    PaperJam,
    /// Usage ID `0x48`: "Remote"
    Remote,
    /// Usage ID `0x49`: "Forward"
    Forward,
    /// Usage ID `0x50`: "Reverse"
    Reverse,
    /// Usage ID `0x51`: "Stop"
    Stop,
    /// Usage ID `0x52`: "Rewind"
    Rewind,
    /// Usage ID `0x53`: "Fast Forward"
    FastForward,
    /// Usage ID `0x54`: "Play"
    Play,
    /// Usage ID `0x55`: "Pause"
    Pause,
    /// Usage ID `0x56`: "Record"
    Record,
    /// Usage ID `0x57`: "Error"
    Error,
    /// Usage ID `0x58`: "Usage Selected Indicator"
    UsageSelectedIndicator,
    /// Usage ID `0x59`: "Usage In Use Indicator"
    UsageInUseIndicator,
    /// Usage ID `0x60`: "Usage Multi Mode Indicator"
    UsageMultiModeIndicator,
    /// Usage ID `0x61`: "Indicator On"
    IndicatorOn,
    /// Usage ID `0x62`: "Indicator Flash"
    IndicatorFlash,
    /// Usage ID `0x63`: "Indicator Slow Blink"
    IndicatorSlowBlink,
    /// Usage ID `0x64`: "Indicator Fast Blink"
    IndicatorFastBlink,
    /// Usage ID `0x65`: "Indicator Off"
    IndicatorOff,
    /// Usage ID `0x66`: "Flash On Time"
    FlashOnTime,
    /// Usage ID `0x67`: "Slow Blink On Time"
    SlowBlinkOnTime,
    /// Usage ID `0x68`: "Slow Blink Off Time"
    SlowBlinkOffTime,
    /// Usage ID `0x69`: "Fast Blink On Time"
    FastBlinkOnTime,
    /// Usage ID `0x70`: "Fast Blink Off Time"
    FastBlinkOffTime,
    /// Usage ID `0x71`: "Usage Indicator Color"
    UsageIndicatorColor,
    /// Usage ID `0x72`: "Indicator Red"
    IndicatorRed,
    /// Usage ID `0x73`: "Indicator Green"
    IndicatorGreen,
    /// Usage ID `0x74`: "Indicator Amber"
    IndicatorAmber,
    /// Usage ID `0x75`: "Generic Indicator"
    GenericIndicator,
    /// Usage ID `0x76`: "System Suspend"
    SystemSuspend,
    /// Usage ID `0x77`: "External Power Connected"
    ExternalPowerConnected,
    /// Usage ID `0x78`: "Indicator Blue"
    IndicatorBlue,
    /// Usage ID `0x79`: "Indicator Orange"
    IndicatorOrange,
    /// Usage ID `0x80`: "Good Status"
    GoodStatus,
    /// Usage ID `0x81`: "Warning Status"
    WarningStatus,
    /// Usage ID `0x82`: "RGBLED"
    RGBLED,
    /// Usage ID `0x83`: "Red LEDChannel"
    RedLEDChannel,
    /// Usage ID `0x84`: "Greed LEDChannel"
    GreedLEDChannel,
    /// Usage ID `0x85`: "Blue LEDChannel"
    BlueLEDChannel,
    /// Usage ID `0x86`: "LEDIntensity"
    LEDIntensity,
    /// Usage ID `0x96`: "Player Indicator"
    PlayerIndicator,
    /// Usage ID `0x97`: "Player 1"
    Player1,
    /// Usage ID `0x98`: "Player 2"
    Player2,
    /// Usage ID `0x99`: "Player 3"
    Player3,
    /// Usage ID `0x100`: "Player 4"
    Player4,
    /// Usage ID `0x101`: "Player 5"
    Player5,
    /// Usage ID `0x102`: "Player 6"
    Player6,
    /// Usage ID `0x103`: "Player 7"
    Player7,
    /// Usage ID `0x104`: "Player 8"
    Player8,
}

impl fmt::Display for LEDs {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            LEDs::Undefined => "Undefined",
            LEDs::NumLock => "Num Lock",
            LEDs::CapsLock => "Caps Lock",
            LEDs::ScrollLock => "Scroll Lock",
            LEDs::Compose => "Compose",
            LEDs::Kana => "Kana",
            LEDs::Power => "Power",
            LEDs::Shift => "Shift",
            LEDs::DoNotDisturb => "Do Not Disturb",
            LEDs::Mute => "Mute",
            LEDs::ToneEnable => "Tone Enable",
            LEDs::HighCutFilter => "High Cut Filter",
            LEDs::LowCutFilter => "Low Cut Filter",
            LEDs::EqualizerEnable => "Equalizer Enable",
            LEDs::SoundFieldOn => "Sound Field On",
            LEDs::SurroundfieldOn => "Surround field On",
            LEDs::Repeat => "Repeat",
            LEDs::Stereo => "Stereo",
            LEDs::SamplingRateDetect => "Sampling Rate Detect",
            LEDs::Spinning => "Spinning",
            LEDs::CAV => "CAV",
            LEDs::CLV => "CLV",
            LEDs::RecordingFormatDetect => "Recording Format Detect",
            LEDs::OffHook => "Off-Hook",
            LEDs::Ring => "Ring",
            LEDs::MessageWaiting => "Message Waiting",
            LEDs::DataMode => "Data Mode",
            LEDs::BatteryOperation => "Battery Operation",
            LEDs::BatteryOK => "Battery OK",
            LEDs::BatteryLow => "Battery Low",
            LEDs::Speaker => "Speaker",
            LEDs::HeadSet => "Head Set",
            LEDs::Hold => "Hold",
            LEDs::Microphone => "Microphone",
            LEDs::Coverage => "Coverage",
            LEDs::NightMode => "Night Mode",
            LEDs::SendCalls => "Send Calls",
            LEDs::CallPickup => "Call Pickup",
            LEDs::Conference => "Conference",
            LEDs::Standby => "Stand-by",
            LEDs::CameraOn => "Camera On",
            LEDs::CameraOff => "Camera Off",
            LEDs::OnLine => "On-Line",
            LEDs::OffLine => "Off-Line",
            LEDs::Busy => "Busy",
            LEDs::Ready => "Ready",
            LEDs::PaperOut => "Paper-Out",
            LEDs::PaperJam => "Paper-Jam",
            LEDs::Remote => "Remote",
            LEDs::Forward => "Forward",
            LEDs::Reverse => "Reverse",
            LEDs::Stop => "Stop",
            LEDs::Rewind => "Rewind",
            LEDs::FastForward => "Fast Forward",
            LEDs::Play => "Play",
            LEDs::Pause => "Pause",
            LEDs::Record => "Record",
            LEDs::Error => "Error",
            LEDs::UsageSelectedIndicator => "Usage Selected Indicator",
            LEDs::UsageInUseIndicator => "Usage In Use Indicator",
            LEDs::UsageMultiModeIndicator => "Usage Multi Mode Indicator",
            LEDs::IndicatorOn => "Indicator On",
            LEDs::IndicatorFlash => "Indicator Flash",
            LEDs::IndicatorSlowBlink => "Indicator Slow Blink",
            LEDs::IndicatorFastBlink => "Indicator Fast Blink",
            LEDs::IndicatorOff => "Indicator Off",
            LEDs::FlashOnTime => "Flash On Time",
            LEDs::SlowBlinkOnTime => "Slow Blink On Time",
            LEDs::SlowBlinkOffTime => "Slow Blink Off Time",
            LEDs::FastBlinkOnTime => "Fast Blink On Time",
            LEDs::FastBlinkOffTime => "Fast Blink Off Time",
            LEDs::UsageIndicatorColor => "Usage Indicator Color",
            LEDs::IndicatorRed => "Indicator Red",
            LEDs::IndicatorGreen => "Indicator Green",
            LEDs::IndicatorAmber => "Indicator Amber",
            LEDs::GenericIndicator => "Generic Indicator",
            LEDs::SystemSuspend => "System Suspend",
            LEDs::ExternalPowerConnected => "External Power Connected",
            LEDs::IndicatorBlue => "Indicator Blue",
            LEDs::IndicatorOrange => "Indicator Orange",
            LEDs::GoodStatus => "Good Status",
            LEDs::WarningStatus => "Warning Status",
            LEDs::RGBLED => "RGBLED",
            LEDs::RedLEDChannel => "Red LEDChannel",
            LEDs::GreedLEDChannel => "Greed LEDChannel",
            LEDs::BlueLEDChannel => "Blue LEDChannel",
            LEDs::LEDIntensity => "LEDIntensity",
            LEDs::PlayerIndicator => "Player Indicator",
            LEDs::Player1 => "Player 1",
            LEDs::Player2 => "Player 2",
            LEDs::Player3 => "Player 3",
            LEDs::Player4 => "Player 4",
            LEDs::Player5 => "Player 5",
            LEDs::Player6 => "Player 6",
            LEDs::Player7 => "Player 7",
            LEDs::Player8 => "Player 8",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x9`: "Button"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Button {
    /// Usage ID `0x0`: "No Buttons Pressed"
    NoButtonsPressed,
}

impl fmt::Display for Button {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Button::NoButtonsPressed => "No Buttons Pressed",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x10`: "Ordinals"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Ordinals {
    /// Usage ID `0x0`: "Unused"
    Unused,
}

impl fmt::Display for Ordinals {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Ordinals::Unused => "Unused",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x11`: "Telephony Devices"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum TelephonyDevices {
    /// Usage ID `0x0`: "Unassigned"
    Unassigned,
    /// Usage ID `0x1`: "Phone"
    Phone,
    /// Usage ID `0x2`: "Answering Machine"
    AnsweringMachine,
    /// Usage ID `0x3`: "Message Controls"
    MessageControls,
    /// Usage ID `0x4`: "Handset"
    Handset,
    /// Usage ID `0x5`: "Headset"
    Headset,
    /// Usage ID `0x6`: "Telephony Key Pad"
    TelephonyKeyPad,
    /// Usage ID `0x7`: "Programmable Button"
    ProgrammableButton,
    /// Usage ID `0x32`: "Hook Switch"
    HookSwitch,
    /// Usage ID `0x33`: "Flash"
    Flash,
    /// Usage ID `0x34`: "Feature"
    Feature,
    /// Usage ID `0x35`: "Hold"
    Hold,
    /// Usage ID `0x36`: "Redial"
    Redial,
    /// Usage ID `0x37`: "Transfer"
    Transfer,
    /// Usage ID `0x38`: "Drop"
    Drop,
    /// Usage ID `0x39`: "Park"
    Park,
    /// Usage ID `0x40`: "Forward Calls"
    ForwardCalls,
    /// Usage ID `0x41`: "Alternate Function"
    AlternateFunction,
    /// Usage ID `0x42`: "Line OSC"
    LineOSC,
    /// Usage ID `0x43`: "Speaker Phone"
    SpeakerPhone,
    /// Usage ID `0x44`: "Conference"
    Conference,
    /// Usage ID `0x45`: "Ring Enable"
    RingEnable,
    /// Usage ID `0x46`: "Ring Select"
    RingSelect,
    /// Usage ID `0x47`: "Phone Mute"
    PhoneMute,
    /// Usage ID `0x48`: "Caller ID"
    CallerID,
    /// Usage ID `0x49`: "Send"
    Send,
    /// Usage ID `0x80`: "Speed Dial"
    SpeedDial,
    /// Usage ID `0x81`: "Store Number"
    StoreNumber,
    /// Usage ID `0x82`: "Recall Number"
    RecallNumber,
    /// Usage ID `0x83`: "Phone Directory"
    PhoneDirectory,
    /// Usage ID `0x112`: "Voice Mail"
    VoiceMail,
    /// Usage ID `0x113`: "Screen Calls"
    ScreenCalls,
    /// Usage ID `0x114`: "Do Not Disturb"
    DoNotDisturb,
    /// Usage ID `0x115`: "Message"
    Message,
    /// Usage ID `0x116`: "Answer On/Off"
    AnswerOnOff,
    /// Usage ID `0x144`: "Inside Dial Tone"
    InsideDialTone,
    /// Usage ID `0x145`: "Outside Dial Tone"
    OutsideDialTone,
    /// Usage ID `0x146`: "Inside Ring Tone"
    InsideRingTone,
    /// Usage ID `0x147`: "Outside Ring Tone"
    OutsideRingTone,
    /// Usage ID `0x148`: "Priority Ring Tone"
    PriorityRingTone,
    /// Usage ID `0x149`: "Inside Ringback"
    InsideRingback,
    /// Usage ID `0x150`: "Priority Ringback"
    PriorityRingback,
    /// Usage ID `0x151`: "Line Busy Tone"
    LineBusyTone,
    /// Usage ID `0x152`: "Reorder Tone"
    ReorderTone,
    /// Usage ID `0x153`: "Call Waiting Tone"
    CallWaitingTone,
    /// Usage ID `0x154`: "Confirmation Tone 1"
    ConfirmationTone1,
    /// Usage ID `0x155`: "Confirmation Tone 2"
    ConfirmationTone2,
    /// Usage ID `0x156`: "Tones Off"
    TonesOff,
    /// Usage ID `0x157`: "Outside Ringback"
    OutsideRingback,
    /// Usage ID `0x158`: "Ringer"
    Ringer,
    /// Usage ID `0x176`: "Phone Key 0"
    PhoneKey0,
    /// Usage ID `0x177`: "Phone Key 1"
    PhoneKey1,
    /// Usage ID `0x178`: "Phone Key 2"
    PhoneKey2,
    /// Usage ID `0x179`: "Phone Key 3"
    PhoneKey3,
    /// Usage ID `0x180`: "Phone Key 4"
    PhoneKey4,
    /// Usage ID `0x181`: "Phone Key 5"
    PhoneKey5,
    /// Usage ID `0x182`: "Phone Key 6"
    PhoneKey6,
    /// Usage ID `0x183`: "Phone Key 7"
    PhoneKey7,
    /// Usage ID `0x184`: "Phone Key 8"
    PhoneKey8,
    /// Usage ID `0x185`: "Phone Key 9"
    PhoneKey9,
    /// Usage ID `0x186`: "Phone Key Star"
    PhoneKeyStar,
    /// Usage ID `0x187`: "Phone Key Pound"
    PhoneKeyPound,
    /// Usage ID `0x188`: "Phone Key A"
    PhoneKeyA,
    /// Usage ID `0x189`: "Phone Key B"
    PhoneKeyB,
    /// Usage ID `0x190`: "Phone Key C"
    PhoneKeyC,
    /// Usage ID `0x191`: "Phone Key D"
    PhoneKeyD,
    /// Usage ID `0x192`: "Phone Call History Key"
    PhoneCallHistoryKey,
    /// Usage ID `0x193`: "Phone Caller ID Key"
    PhoneCallerIDKey,
    /// Usage ID `0x194`: "Phone Settings Key"
    PhoneSettingsKey,
    /// Usage ID `0x240`: "Host Control"
    HostControl,
    /// Usage ID `0x241`: "Host Available"
    HostAvailable,
    /// Usage ID `0x242`: "Host Call Active"
    HostCallActive,
    /// Usage ID `0x243`: "Activate Handset Audio"
    ActivateHandsetAudio,
    /// Usage ID `0x244`: "Ring Type"
    RingType,
    /// Usage ID `0x245`: "Re-dialable Phone Number"
    RedialablePhoneNumber,
    /// Usage ID `0x248`: "Stop Ring Tone"
    StopRingTone,
    /// Usage ID `0x249`: "PSTN Ring Tone"
    PSTNRingTone,
    /// Usage ID `0x250`: "Host Ring Tone"
    HostRingTone,
    /// Usage ID `0x251`: "Alert Sound Error"
    AlertSoundError,
    /// Usage ID `0x252`: "Alert Sound Confirm"
    AlertSoundConfirm,
    /// Usage ID `0x253`: "Alert Sound Notification"
    AlertSoundNotification,
    /// Usage ID `0x254`: "Silent Ring"
    SilentRing,
    /// Usage ID `0x264`: "Email Message Waiting"
    EmailMessageWaiting,
    /// Usage ID `0x265`: "oicemail Message Waiting"
    oicemailMessageWaiting,
    /// Usage ID `0x266`: "ost Hold"
    ostHold,
    /// Usage ID `0x272`: "Incoming Call History Count"
    IncomingCallHistoryCount,
    /// Usage ID `0x273`: "Outgoing Call History Count"
    OutgoingCallHistoryCount,
    /// Usage ID `0x274`: "Incoming Call History"
    IncomingCallHistory,
    /// Usage ID `0x275`: "Outgoing Call History"
    OutgoingCallHistory,
    /// Usage ID `0x276`: "Phone Locale"
    PhoneLocale,
    /// Usage ID `0x320`: "Phone Time Second"
    PhoneTimeSecond,
    /// Usage ID `0x321`: "Phone Time Minute"
    PhoneTimeMinute,
    /// Usage ID `0x322`: "Phone Time Hour"
    PhoneTimeHour,
    /// Usage ID `0x323`: "Phone Date Day"
    PhoneDateDay,
    /// Usage ID `0x324`: "Phone Date Month"
    PhoneDateMonth,
    /// Usage ID `0x325`: "Phone Date Year"
    PhoneDateYear,
    /// Usage ID `0x326`: "Handset Nickname"
    HandsetNickname,
    /// Usage ID `0x327`: "Address Book ID"
    AddressBookID,
    /// Usage ID `0x330`: "Call Duration"
    CallDuration,
    /// Usage ID `0x331`: "Dual Mode Phone"
    DualModePhone,
}

impl fmt::Display for TelephonyDevices {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            TelephonyDevices::Unassigned => "Unassigned",
            TelephonyDevices::Phone => "Phone",
            TelephonyDevices::AnsweringMachine => "Answering Machine",
            TelephonyDevices::MessageControls => "Message Controls",
            TelephonyDevices::Handset => "Handset",
            TelephonyDevices::Headset => "Headset",
            TelephonyDevices::TelephonyKeyPad => "Telephony Key Pad",
            TelephonyDevices::ProgrammableButton => "Programmable Button",
            TelephonyDevices::HookSwitch => "Hook Switch",
            TelephonyDevices::Flash => "Flash",
            TelephonyDevices::Feature => "Feature",
            TelephonyDevices::Hold => "Hold",
            TelephonyDevices::Redial => "Redial",
            TelephonyDevices::Transfer => "Transfer",
            TelephonyDevices::Drop => "Drop",
            TelephonyDevices::Park => "Park",
            TelephonyDevices::ForwardCalls => "Forward Calls",
            TelephonyDevices::AlternateFunction => "Alternate Function",
            TelephonyDevices::LineOSC => "Line OSC",
            TelephonyDevices::SpeakerPhone => "Speaker Phone",
            TelephonyDevices::Conference => "Conference",
            TelephonyDevices::RingEnable => "Ring Enable",
            TelephonyDevices::RingSelect => "Ring Select",
            TelephonyDevices::PhoneMute => "Phone Mute",
            TelephonyDevices::CallerID => "Caller ID",
            TelephonyDevices::Send => "Send",
            TelephonyDevices::SpeedDial => "Speed Dial",
            TelephonyDevices::StoreNumber => "Store Number",
            TelephonyDevices::RecallNumber => "Recall Number",
            TelephonyDevices::PhoneDirectory => "Phone Directory",
            TelephonyDevices::VoiceMail => "Voice Mail",
            TelephonyDevices::ScreenCalls => "Screen Calls",
            TelephonyDevices::DoNotDisturb => "Do Not Disturb",
            TelephonyDevices::Message => "Message",
            TelephonyDevices::AnswerOnOff => "Answer On/Off",
            TelephonyDevices::InsideDialTone => "Inside Dial Tone",
            TelephonyDevices::OutsideDialTone => "Outside Dial Tone",
            TelephonyDevices::InsideRingTone => "Inside Ring Tone",
            TelephonyDevices::OutsideRingTone => "Outside Ring Tone",
            TelephonyDevices::PriorityRingTone => "Priority Ring Tone",
            TelephonyDevices::InsideRingback => "Inside Ringback",
            TelephonyDevices::PriorityRingback => "Priority Ringback",
            TelephonyDevices::LineBusyTone => "Line Busy Tone",
            TelephonyDevices::ReorderTone => "Reorder Tone",
            TelephonyDevices::CallWaitingTone => "Call Waiting Tone",
            TelephonyDevices::ConfirmationTone1 => "Confirmation Tone 1",
            TelephonyDevices::ConfirmationTone2 => "Confirmation Tone 2",
            TelephonyDevices::TonesOff => "Tones Off",
            TelephonyDevices::OutsideRingback => "Outside Ringback",
            TelephonyDevices::Ringer => "Ringer",
            TelephonyDevices::PhoneKey0 => "Phone Key 0",
            TelephonyDevices::PhoneKey1 => "Phone Key 1",
            TelephonyDevices::PhoneKey2 => "Phone Key 2",
            TelephonyDevices::PhoneKey3 => "Phone Key 3",
            TelephonyDevices::PhoneKey4 => "Phone Key 4",
            TelephonyDevices::PhoneKey5 => "Phone Key 5",
            TelephonyDevices::PhoneKey6 => "Phone Key 6",
            TelephonyDevices::PhoneKey7 => "Phone Key 7",
            TelephonyDevices::PhoneKey8 => "Phone Key 8",
            TelephonyDevices::PhoneKey9 => "Phone Key 9",
            TelephonyDevices::PhoneKeyStar => "Phone Key Star",
            TelephonyDevices::PhoneKeyPound => "Phone Key Pound",
            TelephonyDevices::PhoneKeyA => "Phone Key A",
            TelephonyDevices::PhoneKeyB => "Phone Key B",
            TelephonyDevices::PhoneKeyC => "Phone Key C",
            TelephonyDevices::PhoneKeyD => "Phone Key D",
            TelephonyDevices::PhoneCallHistoryKey => "Phone Call History Key",
            TelephonyDevices::PhoneCallerIDKey => "Phone Caller ID Key",
            TelephonyDevices::PhoneSettingsKey => "Phone Settings Key",
            TelephonyDevices::HostControl => "Host Control",
            TelephonyDevices::HostAvailable => "Host Available",
            TelephonyDevices::HostCallActive => "Host Call Active",
            TelephonyDevices::ActivateHandsetAudio => "Activate Handset Audio",
            TelephonyDevices::RingType => "Ring Type",
            TelephonyDevices::RedialablePhoneNumber => "Re-dialable Phone Number",
            TelephonyDevices::StopRingTone => "Stop Ring Tone",
            TelephonyDevices::PSTNRingTone => "PSTN Ring Tone",
            TelephonyDevices::HostRingTone => "Host Ring Tone",
            TelephonyDevices::AlertSoundError => "Alert Sound Error",
            TelephonyDevices::AlertSoundConfirm => "Alert Sound Confirm",
            TelephonyDevices::AlertSoundNotification => "Alert Sound Notification",
            TelephonyDevices::SilentRing => "Silent Ring",
            TelephonyDevices::EmailMessageWaiting => "Email Message Waiting",
            TelephonyDevices::oicemailMessageWaiting => "oicemail Message Waiting",
            TelephonyDevices::ostHold => "ost Hold",
            TelephonyDevices::IncomingCallHistoryCount => "Incoming Call History Count",
            TelephonyDevices::OutgoingCallHistoryCount => "Outgoing Call History Count",
            TelephonyDevices::IncomingCallHistory => "Incoming Call History",
            TelephonyDevices::OutgoingCallHistory => "Outgoing Call History",
            TelephonyDevices::PhoneLocale => "Phone Locale",
            TelephonyDevices::PhoneTimeSecond => "Phone Time Second",
            TelephonyDevices::PhoneTimeMinute => "Phone Time Minute",
            TelephonyDevices::PhoneTimeHour => "Phone Time Hour",
            TelephonyDevices::PhoneDateDay => "Phone Date Day",
            TelephonyDevices::PhoneDateMonth => "Phone Date Month",
            TelephonyDevices::PhoneDateYear => "Phone Date Year",
            TelephonyDevices::HandsetNickname => "Handset Nickname",
            TelephonyDevices::AddressBookID => "Address Book ID",
            TelephonyDevices::CallDuration => "Call Duration",
            TelephonyDevices::DualModePhone => "Dual Mode Phone",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x12`: "Consumer Devices"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum ConsumerDevices {
    /// Usage ID `0x1`: "Consumer Control"
    ConsumerControl,
    /// Usage ID `0x2`: "Numeric Key Pad"
    NumericKeyPad,
    /// Usage ID `0x3`: "Programmable Buttons"
    ProgrammableButtons,
    /// Usage ID `0x4`: "Microphone"
    Microphone,
    /// Usage ID `0x5`: "Headphone"
    Headphone,
    /// Usage ID `0x6`: "Graphic Equalizer"
    GraphicEqualizer,
    /// Usage ID `0x32`: "+10"
    Plus10,
    /// Usage ID `0x33`: "+100"
    Plus100,
    /// Usage ID `0x34`: "AM/PM"
    AMPM,
    /// Usage ID `0x48`: "Power"
    Power,
    /// Usage ID `0x49`: "Reset"
    Reset,
    /// Usage ID `0x50`: "Sleep"
    Sleep,
    /// Usage ID `0x51`: "Sleep After"
    SleepAfter,
    /// Usage ID `0x52`: "Sleep Mode"
    SleepMode,
    /// Usage ID `0x53`: "Illumination"
    Illumination,
    /// Usage ID `0x54`: "Function Buttons"
    FunctionButtons,
    /// Usage ID `0x64`: "Menu"
    Menu,
    /// Usage ID `0x65`: "Menu Pick"
    MenuPick,
    /// Usage ID `0x66`: "Menu Up"
    MenuUp,
    /// Usage ID `0x67`: "Menu Down"
    MenuDown,
    /// Usage ID `0x68`: "Menu Left"
    MenuLeft,
    /// Usage ID `0x69`: "Menu Right"
    MenuRight,
    /// Usage ID `0x70`: "Menu Escape"
    MenuEscape,
    /// Usage ID `0x71`: "Menu Value Increase"
    MenuValueIncrease,
    /// Usage ID `0x72`: "Menu Value Decrease"
    MenuValueDecrease,
    /// Usage ID `0x96`: "Data On Screen"
    DataOnScreen,
    /// Usage ID `0x97`: "Closed Caption"
    ClosedCaption,
    /// Usage ID `0x98`: "Closed Caption Select"
    ClosedCaptionSelect,
    /// Usage ID `0x99`: "VCR/TV"
    VCRTV,
    /// Usage ID `0x100`: "Broadcast Mode"
    BroadcastMode,
    /// Usage ID `0x101`: "Snapshot"
    Snapshot,
    /// Usage ID `0x102`: "Still"
    Still,
    /// Usage ID `0x103`: "Picture-in-Picture Toggle"
    PictureinPictureToggle,
    /// Usage ID `0x104`: "Picture-in-Picture Swap"
    PictureinPictureSwap,
    /// Usage ID `0x105`: "Red Menu Button"
    RedMenuButton,
    /// Usage ID `0x106`: "Green Menu Button"
    GreenMenuButton,
    /// Usage ID `0x107`: "Blue Menu Button"
    BlueMenuButton,
    /// Usage ID `0x108`: "Yellow Menu Button"
    YellowMenuButton,
    /// Usage ID `0x109`: "Aspect"
    Aspect,
    /// Usage ID `0x110`: "3D Mode Select"
    ThreeDModeSelect,
    /// Usage ID `0x111`: "Display Brightness Increment"
    DisplayBrightnessIncrement,
    /// Usage ID `0x112`: "Display Brightness Decrement"
    DisplayBrightnessDecrement,
    /// Usage ID `0x113`: "Display Brightness"
    DisplayBrightness,
    /// Usage ID `0x114`: "Display Backlight Toggle"
    DisplayBacklightToggle,
    /// Usage ID `0x115`: "Display Set Brightness to Minimum"
    DisplaySetBrightnesstoMinimum,
    /// Usage ID `0x116`: "Display Set Brightness to Maximum"
    DisplaySetBrightnesstoMaximum,
    /// Usage ID `0x117`: "Display Set Auto Brightness"
    DisplaySetAutoBrightness,
    /// Usage ID `0x118`: "Camera Access Enabled"
    CameraAccessEnabled,
    /// Usage ID `0x119`: "Camera Access Disabled"
    CameraAccessDisabled,
    /// Usage ID `0x120`: "Camera Access Toggle"
    CameraAccessToggle,
    /// Usage ID `0x121`: "Keyboard Brightness Increment"
    KeyboardBrightnessIncrement,
    /// Usage ID `0x122`: "Keyboard Brightness Decrement"
    KeyboardBrightnessDecrement,
    /// Usage ID `0x123`: "Keyboard Backlight Set Level"
    KeyboardBacklightSetLevel,
    /// Usage ID `0x124`: "Keyboard Backlight OOC"
    KeyboardBacklightOOC,
    /// Usage ID `0x125`: "Keyboard Backlight Set Minimum"
    KeyboardBacklightSetMinimum,
    /// Usage ID `0x126`: "Keyboard Backlight Set Maximum"
    KeyboardBacklightSetMaximum,
    /// Usage ID `0x127`: "Keyboard Backlight Auto"
    KeyboardBacklightAuto,
    /// Usage ID `0x128`: "Selection"
    Selection,
    /// Usage ID `0x129`: "Assign Selection"
    AssignSelection,
    /// Usage ID `0x130`: "Mode Step"
    ModeStep,
    /// Usage ID `0x131`: "Recall Last"
    RecallLast,
    /// Usage ID `0x132`: "Enter Channel"
    EnterChannel,
    /// Usage ID `0x133`: "Order Movie"
    OrderMovie,
    /// Usage ID `0x134`: "Channel"
    Channel,
    /// Usage ID `0x135`: "Media Selection"
    MediaSelection,
    /// Usage ID `0x136`: "Media Select Computer"
    MediaSelectComputer,
    /// Usage ID `0x137`: "Media Select TV"
    MediaSelectTV,
    /// Usage ID `0x138`: "Media Select WWW"
    MediaSelectWWW,
    /// Usage ID `0x139`: "Media Select DVD"
    MediaSelectDVD,
    /// Usage ID `0x140`: "Media Select Telephone"
    MediaSelectTelephone,
    /// Usage ID `0x141`: "Media Select Program Guide"
    MediaSelectProgramGuide,
    /// Usage ID `0x142`: "Media Select Video Phone"
    MediaSelectVideoPhone,
    /// Usage ID `0x143`: "Media Select Games"
    MediaSelectGames,
    /// Usage ID `0x144`: "Media Select Messages"
    MediaSelectMessages,
    /// Usage ID `0x145`: "Media Select CD"
    MediaSelectCD,
    /// Usage ID `0x146`: "Media Select VCR"
    MediaSelectVCR,
    /// Usage ID `0x147`: "Media Select Tuner"
    MediaSelectTuner,
    /// Usage ID `0x148`: "Quit"
    Quit,
    /// Usage ID `0x149`: "Help"
    Help,
    /// Usage ID `0x150`: "Media Select Tape"
    MediaSelectTape,
    /// Usage ID `0x151`: "Media Select Cable"
    MediaSelectCable,
    /// Usage ID `0x152`: "Media Select Satellite"
    MediaSelectSatellite,
    /// Usage ID `0x153`: "Media Select Security"
    MediaSelectSecurity,
    /// Usage ID `0x154`: "Media Select Home"
    MediaSelectHome,
    /// Usage ID `0x155`: "Media Select Call"
    MediaSelectCall,
    /// Usage ID `0x156`: "Channel Increment"
    ChannelIncrement,
    /// Usage ID `0x157`: "Channel Decrement"
    ChannelDecrement,
    /// Usage ID `0x158`: "Media Select SAP"
    MediaSelectSAP,
    /// Usage ID `0x160`: "VCR Plus"
    VCRPlus,
    /// Usage ID `0x161`: "Once"
    Once,
    /// Usage ID `0x162`: "Daily"
    Daily,
    /// Usage ID `0x163`: "Weekly"
    Weekly,
    /// Usage ID `0x164`: "Monthly"
    Monthly,
    /// Usage ID `0x176`: "Play"
    Play,
    /// Usage ID `0x177`: "Pause"
    Pause,
    /// Usage ID `0x178`: "Record"
    Record,
    /// Usage ID `0x179`: "Fast Forward"
    FastForward,
    /// Usage ID `0x180`: "Rewind"
    Rewind,
    /// Usage ID `0x181`: "Scan Next Track"
    ScanNextTrack,
    /// Usage ID `0x182`: "Scan Previous Track"
    ScanPreviousTrack,
    /// Usage ID `0x183`: "Stop"
    Stop,
    /// Usage ID `0x184`: "Eject"
    Eject,
    /// Usage ID `0x185`: "Random Play"
    RandomPlay,
    /// Usage ID `0x186`: "Select Disc"
    SelectDisc,
    /// Usage ID `0x187`: "Enter Disc"
    EnterDisc,
    /// Usage ID `0x188`: "Repeat"
    Repeat,
    /// Usage ID `0x189`: "Tracking"
    Tracking,
    /// Usage ID `0x190`: "Track Normal"
    TrackNormal,
    /// Usage ID `0x191`: "Slow Tracking"
    SlowTracking,
    /// Usage ID `0x192`: "Frame Forward"
    FrameForward,
    /// Usage ID `0x193`: "Frame Back"
    FrameBack,
    /// Usage ID `0x194`: "Mark"
    Mark,
    /// Usage ID `0x195`: "Clear Mark"
    ClearMark,
    /// Usage ID `0x196`: "Repeat From Mark"
    RepeatFromMark,
    /// Usage ID `0x197`: "Return To Mark"
    ReturnToMark,
    /// Usage ID `0x198`: "Search Mark Forward"
    SearchMarkForward,
    /// Usage ID `0x199`: "Search Mark Backwards"
    SearchMarkBackwards,
    /// Usage ID `0x200`: "Counter Reset"
    CounterReset,
    /// Usage ID `0x201`: "Show Counter"
    ShowCounter,
    /// Usage ID `0x202`: "Tracking Increment"
    TrackingIncrement,
    /// Usage ID `0x203`: "Tracking Decrement"
    TrackingDecrement,
    /// Usage ID `0x204`: "Stop/Eject"
    StopEject,
    /// Usage ID `0x205`: "Play/Pause"
    PlayPause,
    /// Usage ID `0x206`: "Play/Skip"
    PlaySkip,
    /// Usage ID `0x207`: "Voice Command"
    VoiceCommand,
    /// Usage ID `0x208`: "Invoke Capture Interface"
    InvokeCaptureInterface,
    /// Usage ID `0x209`: "Start or Stop Game Recording"
    StartorStopGameRecording,
    /// Usage ID `0x210`: "Historical Game Capture"
    HistoricalGameCapture,
    /// Usage ID `0x211`: "Capture Game Screenshot"
    CaptureGameScreenshot,
    /// Usage ID `0x212`: "Show or Hide Recording Indicator"
    ShoworHideRecordingIndicator,
    /// Usage ID `0x213`: "Start or Stop Microphone Capture"
    StartorStopMicrophoneCapture,
    /// Usage ID `0x214`: "Start or Stop Camera Capture"
    StartorStopCameraCapture,
    /// Usage ID `0x215`: "Start or Stop Game Broadcast"
    StartorStopGameBroadcast,
    /// Usage ID `0x224`: "Volume"
    Volume,
    /// Usage ID `0x225`: "Balance"
    Balance,
    /// Usage ID `0x226`: "Mute"
    Mute,
    /// Usage ID `0x227`: "Bass"
    Bass,
    /// Usage ID `0x228`: "Treble"
    Treble,
    /// Usage ID `0x229`: "Bass Boost"
    BassBoost,
    /// Usage ID `0x230`: "Surround Mode"
    SurroundMode,
    /// Usage ID `0x231`: "Loudness"
    Loudness,
    /// Usage ID `0x232`: "MPX"
    MPX,
    /// Usage ID `0x233`: "Volume Up"
    VolumeUp,
    /// Usage ID `0x234`: "Volume Down"
    VolumeDown,
    /// Usage ID `0x240`: "Speed Select"
    SpeedSelect,
    /// Usage ID `0x241`: "Playback Speed"
    PlaybackSpeed,
    /// Usage ID `0x242`: "Standard Play"
    StandardPlay,
    /// Usage ID `0x243`: "Long Play"
    LongPlay,
    /// Usage ID `0x244`: "Extended Play"
    ExtendedPlay,
    /// Usage ID `0x245`: "Slow"
    Slow,
    /// Usage ID `0x256`: "Fan Enable"
    FanEnable,
    /// Usage ID `0x257`: "Fan Speed"
    FanSpeed,
    /// Usage ID `0x258`: "Light Enable"
    LightEnable,
    /// Usage ID `0x259`: "Light Illumination Level"
    LightIlluminationLevel,
    /// Usage ID `0x260`: "Climate Control Enable"
    ClimateControlEnable,
    /// Usage ID `0x261`: "Room Temperature"
    RoomTemperature,
    /// Usage ID `0x262`: "Security Enable"
    SecurityEnable,
    /// Usage ID `0x263`: "Fire Alarm"
    FireAlarm,
    /// Usage ID `0x264`: "Police Alarm"
    PoliceAlarm,
    /// Usage ID `0x265`: "Proximity"
    Proximity,
    /// Usage ID `0x266`: "Motion"
    Motion,
    /// Usage ID `0x267`: "Duress Alarm"
    DuressAlarm,
    /// Usage ID `0x268`: "Holdup Alarm"
    HoldupAlarm,
    /// Usage ID `0x269`: "Medical Alarm"
    MedicalAlarm,
    /// Usage ID `0x336`: "Balance Right"
    BalanceRight,
    /// Usage ID `0x337`: "Balance Left"
    BalanceLeft,
    /// Usage ID `0x338`: "Bass Increment"
    BassIncrement,
    /// Usage ID `0x339`: "Bass Decrement"
    BassDecrement,
    /// Usage ID `0x340`: "Treble Increment"
    TrebleIncrement,
    /// Usage ID `0x341`: "Treble Decrement"
    TrebleDecrement,
    /// Usage ID `0x352`: "Speaker System"
    SpeakerSystem,
    /// Usage ID `0x353`: "Channel Left"
    ChannelLeft,
    /// Usage ID `0x354`: "Channel Right"
    ChannelRight,
    /// Usage ID `0x355`: "Channel Center"
    ChannelCenter,
    /// Usage ID `0x356`: "Channel Front"
    ChannelFront,
    /// Usage ID `0x357`: "Channel Center Front"
    ChannelCenterFront,
    /// Usage ID `0x358`: "Channel Side"
    ChannelSide,
    /// Usage ID `0x359`: "Channel Surround"
    ChannelSurround,
    /// Usage ID `0x360`: "Channel Low Freq Enhancement"
    ChannelLowFreqEnhancement,
    /// Usage ID `0x361`: "Channel Top"
    ChannelTop,
    /// Usage ID `0x362`: "Channel Unknown"
    ChannelUnknown,
    /// Usage ID `0x368`: "Sub-channel"
    Subchannel,
    /// Usage ID `0x369`: "Sub-channel Increment"
    SubchannelIncrement,
    /// Usage ID `0x370`: "Sub-channel Decrement"
    SubchannelDecrement,
    /// Usage ID `0x371`: "Alternate Audio Increment"
    AlternateAudioIncrement,
    /// Usage ID `0x372`: "Alternate Audio Decrement"
    AlternateAudioDecrement,
    /// Usage ID `0x384`: "Application Launch Buttons"
    ApplicationLaunchButtons,
    /// Usage ID `0x385`: "AL Launch Button Config Tool"
    ALLaunchButtonConfigTool,
    /// Usage ID `0x386`: "AL Programmable Button Config"
    ALProgrammableButtonConfig,
    /// Usage ID `0x387`: "AL Consumer Control Config"
    ALConsumerControlConfig,
    /// Usage ID `0x388`: "AL Word Processor"
    ALWordProcessor,
    /// Usage ID `0x389`: "AL Text Editor"
    ALTextEditor,
    /// Usage ID `0x390`: "AL Spreadsheet"
    ALSpreadsheet,
    /// Usage ID `0x391`: "AL Graphics Editor"
    ALGraphicsEditor,
    /// Usage ID `0x392`: "AL Presentation App"
    ALPresentationApp,
    /// Usage ID `0x393`: "AL Database App"
    ALDatabaseApp,
    /// Usage ID `0x394`: "AL Email Reader"
    ALEmailReader,
    /// Usage ID `0x395`: "AL Newsreader"
    ALNewsreader,
    /// Usage ID `0x396`: "AL Voicemail"
    ALVoicemail,
    /// Usage ID `0x397`: "AL Contacts/Address Book"
    ALContactsAddressBook,
    /// Usage ID `0x398`: "AL Calendar/Schedule"
    ALCalendarSchedule,
    /// Usage ID `0x399`: "AL Task/Project Manager"
    ALTaskProjectManager,
    /// Usage ID `0x400`: "AL Log/Journal/Timecard"
    ALLogJournalTimecard,
    /// Usage ID `0x401`: "AL Checkbook/Finance"
    ALCheckbookFinance,
    /// Usage ID `0x402`: "AL Calculator"
    ALCalculator,
    /// Usage ID `0x403`: "AL A/VCapture/Playback"
    ALAVCapturePlayback,
    /// Usage ID `0x404`: "AL Local Machine Browser"
    ALLocalMachineBrowser,
    /// Usage ID `0x405`: "AL LAN/WANBrowser"
    ALLANWANBrowser,
    /// Usage ID `0x406`: "AL Internet Browser"
    ALInternetBrowser,
    /// Usage ID `0x407`: "AL Remote Networking/ISPConnect"
    ALRemoteNetworkingISPConnect,
    /// Usage ID `0x408`: "AL Network Conference"
    ALNetworkConference,
    /// Usage ID `0x409`: "AL Network Chat"
    ALNetworkChat,
    /// Usage ID `0x410`: "AL Telephony/Dialer"
    ALTelephonyDialer,
    /// Usage ID `0x411`: "AL Logon"
    ALLogon,
    /// Usage ID `0x412`: "AL Logoff"
    ALLogoff,
    /// Usage ID `0x413`: "AL Logon/Logoff"
    ALLogonLogoff,
    /// Usage ID `0x414`: "AL Terminal Lock/Screensaver"
    ALTerminalLockScreensaver,
    /// Usage ID `0x415`: "AL Control Panel"
    ALControlPanel,
    /// Usage ID `0x416`: "AL Command Line Processor/Run"
    ALCommandLineProcessorRun,
    /// Usage ID `0x417`: "AL Process/Task Manager"
    ALProcessTaskManager,
    /// Usage ID `0x418`: "AL Select Task/Application"
    ALSelectTaskApplication,
    /// Usage ID `0x419`: "AL Next Task/Application"
    ALNextTaskApplication,
    /// Usage ID `0x420`: "AL Previous Task/Application"
    ALPreviousTaskApplication,
    /// Usage ID `0x421`: "AL Preempt Halt Task/Application"
    ALPreemptHaltTaskApplication,
    /// Usage ID `0x422`: "AL Integrated Help Center"
    ALIntegratedHelpCenter,
    /// Usage ID `0x423`: "AL Documents"
    ALDocuments,
    /// Usage ID `0x424`: "AL Thesaurus"
    ALThesaurus,
    /// Usage ID `0x425`: "AL Dictionary"
    ALDictionary,
    /// Usage ID `0x426`: "AL Desktop"
    ALDesktop,
    /// Usage ID `0x427`: "AL Spell Check"
    ALSpellCheck,
    /// Usage ID `0x428`: "AL Grammar Check"
    ALGrammarCheck,
    /// Usage ID `0x429`: "AL Wireless Status"
    ALWirelessStatus,
    /// Usage ID `0x430`: "AL Keyboard Layout"
    ALKeyboardLayout,
    /// Usage ID `0x431`: "AL Virus Protection"
    ALVirusProtection,
    /// Usage ID `0x432`: "AL Encryption"
    ALEncryption,
    /// Usage ID `0x433`: "AL Screen Saver"
    ALScreenSaver,
    /// Usage ID `0x434`: "AL Alarms"
    ALAlarms,
    /// Usage ID `0x435`: "AL Clock"
    ALClock,
    /// Usage ID `0x436`: "AL File Browser"
    ALFileBrowser,
    /// Usage ID `0x437`: "AL Power Status"
    ALPowerStatus,
    /// Usage ID `0x438`: "AL Image Browser"
    ALImageBrowser,
    /// Usage ID `0x439`: "AL Audio Browser"
    ALAudioBrowser,
    /// Usage ID `0x440`: "AL Movie Browser"
    ALMovieBrowser,
    /// Usage ID `0x441`: "AL Digital Rights Manager"
    ALDigitalRightsManager,
    /// Usage ID `0x442`: "AL Digital Wallet"
    ALDigitalWallet,
    /// Usage ID `0x444`: "AL Instant Messaging"
    ALInstantMessaging,
    /// Usage ID `0x445`: "AL OEMFeatures Tips Tuto Browser"
    ALOEMFeaturesTipsTutoBrowser,
    /// Usage ID `0x446`: "AL OEMHelp"
    ALOEMHelp,
    /// Usage ID `0x447`: "AL Online Community"
    ALOnlineCommunity,
    /// Usage ID `0x448`: "AL Entertainment Content Browser"
    ALEntertainmentContentBrowser,
    /// Usage ID `0x449`: "AL Online Shopping Browser"
    ALOnlineShoppingBrowser,
    /// Usage ID `0x450`: "AL Smart Card Information/Help"
    ALSmartCardInformationHelp,
    /// Usage ID `0x451`: "AL Market Monitor Finance Browser"
    ALMarketMonitorFinanceBrowser,
    /// Usage ID `0x452`: "AL Customized Corp News Browser"
    ALCustomizedCorpNewsBrowser,
    /// Usage ID `0x453`: "AL Online Activity Browser"
    ALOnlineActivityBrowser,
    /// Usage ID `0x454`: "AL Research/Search Browser"
    ALResearchSearchBrowser,
    /// Usage ID `0x455`: "AL Audio Player"
    ALAudioPlayer,
    /// Usage ID `0x456`: "AL Message Status"
    ALMessageStatus,
    /// Usage ID `0x457`: "AL Contact Sync"
    ALContactSync,
    /// Usage ID `0x512`: "Generic GUIApplication Controls"
    GenericGUIApplicationControls,
    /// Usage ID `0x513`: "AC New"
    ACNew,
    /// Usage ID `0x514`: "AC Open"
    ACOpen,
    /// Usage ID `0x515`: "AC Close"
    ACClose,
    /// Usage ID `0x516`: "AC Exit"
    ACExit,
    /// Usage ID `0x517`: "AC Maximize"
    ACMaximize,
    /// Usage ID `0x518`: "AC Minimize"
    ACMinimize,
    /// Usage ID `0x519`: "AC Save"
    ACSave,
    /// Usage ID `0x520`: "AC Print"
    ACPrint,
    /// Usage ID `0x521`: "AC Properties"
    ACProperties,
    /// Usage ID `0x538`: "AC Undo"
    ACUndo,
    /// Usage ID `0x539`: "AC Copy"
    ACCopy,
    /// Usage ID `0x540`: "AC Cut"
    ACCut,
    /// Usage ID `0x541`: "AC Paste"
    ACPaste,
    /// Usage ID `0x542`: "AC Select All"
    ACSelectAll,
    /// Usage ID `0x543`: "AC Find"
    ACFind,
    /// Usage ID `0x544`: "AC Findand Replace"
    ACFindandReplace,
    /// Usage ID `0x545`: "AC Search"
    ACSearch,
    /// Usage ID `0x546`: "AC Go To"
    ACGoTo,
    /// Usage ID `0x547`: "AC Home"
    ACHome,
    /// Usage ID `0x548`: "AC Back"
    ACBack,
    /// Usage ID `0x549`: "AC Forward"
    ACForward,
    /// Usage ID `0x550`: "AC Stop"
    ACStop,
    /// Usage ID `0x551`: "AC Refresh"
    ACRefresh,
    /// Usage ID `0x552`: "AC Previous Link"
    ACPreviousLink,
    /// Usage ID `0x553`: "AC Next Link"
    ACNextLink,
    /// Usage ID `0x554`: "AC Bookmarks"
    ACBookmarks,
    /// Usage ID `0x555`: "AC History"
    ACHistory,
    /// Usage ID `0x556`: "AC Subscriptions"
    ACSubscriptions,
    /// Usage ID `0x557`: "AC Zoom In"
    ACZoomIn,
    /// Usage ID `0x558`: "AC Zoom Out"
    ACZoomOut,
    /// Usage ID `0x559`: "AC Zoom"
    ACZoom,
    /// Usage ID `0x560`: "AC Full Screen View"
    ACFullScreenView,
    /// Usage ID `0x561`: "AC Normal View"
    ACNormalView,
    /// Usage ID `0x562`: "AC View Toggle"
    ACViewToggle,
    /// Usage ID `0x563`: "AC Scroll Up"
    ACScrollUp,
    /// Usage ID `0x564`: "AC Scroll Down"
    ACScrollDown,
    /// Usage ID `0x565`: "AC Scroll"
    ACScroll,
    /// Usage ID `0x566`: "AC Pan Left"
    ACPanLeft,
    /// Usage ID `0x567`: "AC Pan Right"
    ACPanRight,
    /// Usage ID `0x568`: "AC Pan"
    ACPan,
    /// Usage ID `0x569`: "AC New Window"
    ACNewWindow,
    /// Usage ID `0x570`: "AC Tile Horizontally"
    ACTileHorizontally,
    /// Usage ID `0x571`: "AC Tile Vertically"
    ACTileVertically,
    /// Usage ID `0x572`: "AC Format"
    ACFormat,
    /// Usage ID `0x573`: "AC Edit"
    ACEdit,
    /// Usage ID `0x574`: "AC Bold"
    ACBold,
    /// Usage ID `0x575`: "AC Italics"
    ACItalics,
    /// Usage ID `0x576`: "AC Underline"
    ACUnderline,
    /// Usage ID `0x577`: "AC Strikethrough"
    ACStrikethrough,
    /// Usage ID `0x578`: "AC Subscript"
    ACSubscript,
    /// Usage ID `0x579`: "AC Superscript"
    ACSuperscript,
    /// Usage ID `0x580`: "AC All Caps"
    ACAllCaps,
    /// Usage ID `0x581`: "AC Rotate"
    ACRotate,
    /// Usage ID `0x582`: "AC Resize"
    ACResize,
    /// Usage ID `0x583`: "AC Fliphorizontal"
    ACFliphorizontal,
    /// Usage ID `0x584`: "AC Flip Vertical"
    ACFlipVertical,
    /// Usage ID `0x585`: "AC Mirror Horizontal"
    ACMirrorHorizontal,
    /// Usage ID `0x586`: "AC Mirror Vertical"
    ACMirrorVertical,
    /// Usage ID `0x587`: "AC Font Select"
    ACFontSelect,
    /// Usage ID `0x588`: "AC Font Color"
    ACFontColor,
    /// Usage ID `0x589`: "AC Font Size"
    ACFontSize,
    /// Usage ID `0x590`: "AC Justify Left"
    ACJustifyLeft,
    /// Usage ID `0x591`: "AC Justify Center H"
    ACJustifyCenterH,
    /// Usage ID `0x592`: "AC Justify Right"
    ACJustifyRight,
    /// Usage ID `0x593`: "AC Justify Block H"
    ACJustifyBlockH,
    /// Usage ID `0x594`: "AC Justify Top"
    ACJustifyTop,
    /// Usage ID `0x595`: "AC Justify Center V"
    ACJustifyCenterV,
    /// Usage ID `0x596`: "AC Justify Bottom"
    ACJustifyBottom,
    /// Usage ID `0x597`: "AC Justify Block V"
    ACJustifyBlockV,
    /// Usage ID `0x598`: "AC Indent Decrease"
    ACIndentDecrease,
    /// Usage ID `0x599`: "AC Indent Increase"
    ACIndentIncrease,
    /// Usage ID `0x600`: "AC Numbered List"
    ACNumberedList,
    /// Usage ID `0x601`: "AC Restart Numbering"
    ACRestartNumbering,
    /// Usage ID `0x602`: "AC Bulleted List"
    ACBulletedList,
    /// Usage ID `0x603`: "AC Promote"
    ACPromote,
    /// Usage ID `0x604`: "AC Demote"
    ACDemote,
    /// Usage ID `0x605`: "AC Yes"
    ACYes,
    /// Usage ID `0x606`: "AC No"
    ACNo,
    /// Usage ID `0x607`: "AC Cancel"
    ACCancel,
    /// Usage ID `0x608`: "AC Catalog"
    ACCatalog,
    /// Usage ID `0x609`: "AC Buy/Checkout"
    ACBuyCheckout,
    /// Usage ID `0x610`: "AC Addto Cart"
    ACAddtoCart,
    /// Usage ID `0x611`: "AC Expand"
    ACExpand,
    /// Usage ID `0x612`: "AC Expand All"
    ACExpandAll,
    /// Usage ID `0x613`: "AC Collapse"
    ACCollapse,
    /// Usage ID `0x614`: "AC Collapse All"
    ACCollapseAll,
    /// Usage ID `0x615`: "AC Print Preview"
    ACPrintPreview,
    /// Usage ID `0x616`: "AC Paste Special"
    ACPasteSpecial,
    /// Usage ID `0x617`: "AC Insert Mode"
    ACInsertMode,
    /// Usage ID `0x618`: "AC Delete"
    ACDelete,
    /// Usage ID `0x619`: "AC Lock"
    ACLock,
    /// Usage ID `0x620`: "AC Unlock"
    ACUnlock,
    /// Usage ID `0x621`: "AC Protect"
    ACProtect,
    /// Usage ID `0x622`: "AC Unprotect"
    ACUnprotect,
    /// Usage ID `0x623`: "AC Attach Comment"
    ACAttachComment,
    /// Usage ID `0x624`: "AC Delete Comment"
    ACDeleteComment,
    /// Usage ID `0x625`: "AC View Comment"
    ACViewComment,
    /// Usage ID `0x626`: "AC Select Word"
    ACSelectWord,
    /// Usage ID `0x627`: "AC Select Sentence"
    ACSelectSentence,
    /// Usage ID `0x628`: "AC Select Paragraph"
    ACSelectParagraph,
    /// Usage ID `0x629`: "AC Select Column"
    ACSelectColumn,
    /// Usage ID `0x630`: "AC Select Row"
    ACSelectRow,
    /// Usage ID `0x631`: "AC Select Table"
    ACSelectTable,
    /// Usage ID `0x632`: "AC Select Object"
    ACSelectObject,
    /// Usage ID `0x633`: "AC Redo/Repeat"
    ACRedoRepeat,
    /// Usage ID `0x634`: "AC Sort"
    ACSort,
    /// Usage ID `0x635`: "AC Sort Ascending"
    ACSortAscending,
    /// Usage ID `0x636`: "AC Sort Descending"
    ACSortDescending,
    /// Usage ID `0x637`: "AC Filter"
    ACFilter,
    /// Usage ID `0x638`: "AC Set Clock"
    ACSetClock,
    /// Usage ID `0x639`: "AC View Clock"
    ACViewClock,
    /// Usage ID `0x640`: "AC Select Time Zone"
    ACSelectTimeZone,
    /// Usage ID `0x641`: "AC Edit Time Zones"
    ACEditTimeZones,
    /// Usage ID `0x642`: "AC Set Alarm"
    ACSetAlarm,
    /// Usage ID `0x643`: "AC Clear Alarm"
    ACClearAlarm,
    /// Usage ID `0x644`: "AC Snooze Alarm"
    ACSnoozeAlarm,
    /// Usage ID `0x645`: "AC Reset Alarm"
    ACResetAlarm,
    /// Usage ID `0x646`: "AC Synchronize"
    ACSynchronize,
    /// Usage ID `0x647`: "AC Send/Receive"
    ACSendReceive,
    /// Usage ID `0x648`: "AC Send To"
    ACSendTo,
    /// Usage ID `0x649`: "AC Reply"
    ACReply,
    /// Usage ID `0x650`: "AC Reply All"
    ACReplyAll,
    /// Usage ID `0x651`: "AC Forward Msg"
    ACForwardMsg,
    /// Usage ID `0x652`: "AC Send"
    ACSend,
    /// Usage ID `0x653`: "AC Attach File"
    ACAttachFile,
    /// Usage ID `0x654`: "AC Upload"
    ACUpload,
    /// Usage ID `0x655`: "AC Download(Save Target As)"
    ACDownloadSaveTargetAs,
    /// Usage ID `0x656`: "AC Set Borders"
    ACSetBorders,
    /// Usage ID `0x657`: "AC Insert Row"
    ACInsertRow,
    /// Usage ID `0x658`: "AC Insert Column"
    ACInsertColumn,
    /// Usage ID `0x659`: "AC Insert File"
    ACInsertFile,
    /// Usage ID `0x660`: "AC Insert Picture"
    ACInsertPicture,
    /// Usage ID `0x661`: "AC Insert Object"
    ACInsertObject,
    /// Usage ID `0x662`: "AC Insert Symbol"
    ACInsertSymbol,
    /// Usage ID `0x663`: "AC Saveand Close"
    ACSaveandClose,
    /// Usage ID `0x664`: "AC Rename"
    ACRename,
    /// Usage ID `0x665`: "AC Merge"
    ACMerge,
    /// Usage ID `0x666`: "AC Split"
    ACSplit,
    /// Usage ID `0x667`: "AC Disribute Horizontally"
    ACDisributeHorizontally,
    /// Usage ID `0x668`: "AC Distribute Vertically"
    ACDistributeVertically,
    /// Usage ID `0x669`: "AC Next Keyboard Layout Select"
    ACNextKeyboardLayoutSelect,
    /// Usage ID `0x670`: "AC Navigation Guidance"
    ACNavigationGuidance,
    /// Usage ID `0x671`: "AC Desktop Show All Windows"
    ACDesktopShowAllWindows,
    /// Usage ID `0x672`: "ACSoft Key Left"
    ACSoftKeyLeft,
    /// Usage ID `0x673`: "ACSoft Key Right"
    ACSoftKeyRight,
    /// Usage ID `0x688`: "AC Idle Keep Alive"
    ACIdleKeepAlive,
    /// Usage ID `0x704`: "Extended Keyboard Attributes Collection"
    ExtendedKeyboardAttributesCollection,
    /// Usage ID `0x705`: "Keyboard Form Factor"
    KeyboardFormFactor,
    /// Usage ID `0x706`: "Keyboard Key Type"
    KeyboardKeyType,
    /// Usage ID `0x707`: "Keyboard Physical Layout"
    KeyboardPhysicalLayout,
    /// Usage ID `0x708`: "Vendor-Specific Keyboard Physical Layout"
    VendorSpecificKeyboardPhysicalLayout,
    /// Usage ID `0x709`: "Keyboard IETF Language Tag Index"
    KeyboardIETFLanguageTagIndex,
    /// Usage ID `0x710`: "Implemented Keyboard Input AssistControls"
    ImplementedKeyboardInputAssistControls,
    /// Usage ID `0x711`: "Keyboard Input Assist Previous"
    KeyboardInputAssistPrevious,
    /// Usage ID `0x712`: "Keyboard Input Assist NextS"
    KeyboardInputAssistNextS,
    /// Usage ID `0x713`: "Keyboard Input Assist Previous Group"
    KeyboardInputAssistPreviousGroup,
    /// Usage ID `0x714`: "Keyboard Input Assist NextGroup"
    KeyboardInputAssistNextGroup,
    /// Usage ID `0x715`: "Keyboard Input Assist Accept"
    KeyboardInputAssistAccept,
    /// Usage ID `0x716`: "Keyboard Input Assist Cancel"
    KeyboardInputAssistCancel,
    /// Usage ID `0x1280`: "Contact Edited"
    ContactEdited,
    /// Usage ID `0x1281`: "Contact Added"
    ContactAdded,
    /// Usage ID `0x1282`: "Contact Record Active"
    ContactRecordActive,
    /// Usage ID `0x1283`: "Contact Index"
    ContactIndex,
    /// Usage ID `0x1284`: "Contact Nickname"
    ContactNickname,
    /// Usage ID `0x1285`: "Contact First Name"
    ContactFirstName,
    /// Usage ID `0x1286`: "Contact Last Name"
    ContactLastName,
    /// Usage ID `0x1287`: "Contact Full Name"
    ContactFullName,
    /// Usage ID `0x1288`: "Contact Phone Number Personal"
    ContactPhoneNumberPersonal,
    /// Usage ID `0x1289`: "Contact Phone Number Business"
    ContactPhoneNumberBusiness,
    /// Usage ID `0x1290`: "Contact Phone Number Mobile"
    ContactPhoneNumberMobile,
    /// Usage ID `0x1291`: "Contact Phone Number Pager"
    ContactPhoneNumberPager,
    /// Usage ID `0x1292`: "Contact Phone Number Fax"
    ContactPhoneNumberFax,
    /// Usage ID `0x1293`: "Contact Phone Number Other"
    ContactPhoneNumberOther,
    /// Usage ID `0x1294`: "Contact Email Personal"
    ContactEmailPersonal,
    /// Usage ID `0x1295`: "Contact Email Business"
    ContactEmailBusiness,
    /// Usage ID `0x1296`: "Contact Email Other"
    ContactEmailOther,
    /// Usage ID `0x1297`: "Contact Email Main"
    ContactEmailMain,
    /// Usage ID `0x1298`: "Contact Speed Dial Number"
    ContactSpeedDialNumber,
    /// Usage ID `0x1299`: "Contact Status Flag"
    ContactStatusFlag,
    /// Usage ID `0x1300`: "Contact Misc."
    ContactMisc,
}

impl fmt::Display for ConsumerDevices {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            ConsumerDevices::ConsumerControl => "Consumer Control",
            ConsumerDevices::NumericKeyPad => "Numeric Key Pad",
            ConsumerDevices::ProgrammableButtons => "Programmable Buttons",
            ConsumerDevices::Microphone => "Microphone",
            ConsumerDevices::Headphone => "Headphone",
            ConsumerDevices::GraphicEqualizer => "Graphic Equalizer",
            ConsumerDevices::Plus10 => "+10",
            ConsumerDevices::Plus100 => "+100",
            ConsumerDevices::AMPM => "AM/PM",
            ConsumerDevices::Power => "Power",
            ConsumerDevices::Reset => "Reset",
            ConsumerDevices::Sleep => "Sleep",
            ConsumerDevices::SleepAfter => "Sleep After",
            ConsumerDevices::SleepMode => "Sleep Mode",
            ConsumerDevices::Illumination => "Illumination",
            ConsumerDevices::FunctionButtons => "Function Buttons",
            ConsumerDevices::Menu => "Menu",
            ConsumerDevices::MenuPick => "Menu Pick",
            ConsumerDevices::MenuUp => "Menu Up",
            ConsumerDevices::MenuDown => "Menu Down",
            ConsumerDevices::MenuLeft => "Menu Left",
            ConsumerDevices::MenuRight => "Menu Right",
            ConsumerDevices::MenuEscape => "Menu Escape",
            ConsumerDevices::MenuValueIncrease => "Menu Value Increase",
            ConsumerDevices::MenuValueDecrease => "Menu Value Decrease",
            ConsumerDevices::DataOnScreen => "Data On Screen",
            ConsumerDevices::ClosedCaption => "Closed Caption",
            ConsumerDevices::ClosedCaptionSelect => "Closed Caption Select",
            ConsumerDevices::VCRTV => "VCR/TV",
            ConsumerDevices::BroadcastMode => "Broadcast Mode",
            ConsumerDevices::Snapshot => "Snapshot",
            ConsumerDevices::Still => "Still",
            ConsumerDevices::PictureinPictureToggle => "Picture-in-Picture Toggle",
            ConsumerDevices::PictureinPictureSwap => "Picture-in-Picture Swap",
            ConsumerDevices::RedMenuButton => "Red Menu Button",
            ConsumerDevices::GreenMenuButton => "Green Menu Button",
            ConsumerDevices::BlueMenuButton => "Blue Menu Button",
            ConsumerDevices::YellowMenuButton => "Yellow Menu Button",
            ConsumerDevices::Aspect => "Aspect",
            ConsumerDevices::ThreeDModeSelect => "3D Mode Select",
            ConsumerDevices::DisplayBrightnessIncrement => "Display Brightness Increment",
            ConsumerDevices::DisplayBrightnessDecrement => "Display Brightness Decrement",
            ConsumerDevices::DisplayBrightness => "Display Brightness",
            ConsumerDevices::DisplayBacklightToggle => "Display Backlight Toggle",
            ConsumerDevices::DisplaySetBrightnesstoMinimum => "Display Set Brightness to Minimum",
            ConsumerDevices::DisplaySetBrightnesstoMaximum => "Display Set Brightness to Maximum",
            ConsumerDevices::DisplaySetAutoBrightness => "Display Set Auto Brightness",
            ConsumerDevices::CameraAccessEnabled => "Camera Access Enabled",
            ConsumerDevices::CameraAccessDisabled => "Camera Access Disabled",
            ConsumerDevices::CameraAccessToggle => "Camera Access Toggle",
            ConsumerDevices::KeyboardBrightnessIncrement => "Keyboard Brightness Increment",
            ConsumerDevices::KeyboardBrightnessDecrement => "Keyboard Brightness Decrement",
            ConsumerDevices::KeyboardBacklightSetLevel => "Keyboard Backlight Set Level",
            ConsumerDevices::KeyboardBacklightOOC => "Keyboard Backlight OOC",
            ConsumerDevices::KeyboardBacklightSetMinimum => "Keyboard Backlight Set Minimum",
            ConsumerDevices::KeyboardBacklightSetMaximum => "Keyboard Backlight Set Maximum",
            ConsumerDevices::KeyboardBacklightAuto => "Keyboard Backlight Auto",
            ConsumerDevices::Selection => "Selection",
            ConsumerDevices::AssignSelection => "Assign Selection",
            ConsumerDevices::ModeStep => "Mode Step",
            ConsumerDevices::RecallLast => "Recall Last",
            ConsumerDevices::EnterChannel => "Enter Channel",
            ConsumerDevices::OrderMovie => "Order Movie",
            ConsumerDevices::Channel => "Channel",
            ConsumerDevices::MediaSelection => "Media Selection",
            ConsumerDevices::MediaSelectComputer => "Media Select Computer",
            ConsumerDevices::MediaSelectTV => "Media Select TV",
            ConsumerDevices::MediaSelectWWW => "Media Select WWW",
            ConsumerDevices::MediaSelectDVD => "Media Select DVD",
            ConsumerDevices::MediaSelectTelephone => "Media Select Telephone",
            ConsumerDevices::MediaSelectProgramGuide => "Media Select Program Guide",
            ConsumerDevices::MediaSelectVideoPhone => "Media Select Video Phone",
            ConsumerDevices::MediaSelectGames => "Media Select Games",
            ConsumerDevices::MediaSelectMessages => "Media Select Messages",
            ConsumerDevices::MediaSelectCD => "Media Select CD",
            ConsumerDevices::MediaSelectVCR => "Media Select VCR",
            ConsumerDevices::MediaSelectTuner => "Media Select Tuner",
            ConsumerDevices::Quit => "Quit",
            ConsumerDevices::Help => "Help",
            ConsumerDevices::MediaSelectTape => "Media Select Tape",
            ConsumerDevices::MediaSelectCable => "Media Select Cable",
            ConsumerDevices::MediaSelectSatellite => "Media Select Satellite",
            ConsumerDevices::MediaSelectSecurity => "Media Select Security",
            ConsumerDevices::MediaSelectHome => "Media Select Home",
            ConsumerDevices::MediaSelectCall => "Media Select Call",
            ConsumerDevices::ChannelIncrement => "Channel Increment",
            ConsumerDevices::ChannelDecrement => "Channel Decrement",
            ConsumerDevices::MediaSelectSAP => "Media Select SAP",
            ConsumerDevices::VCRPlus => "VCR Plus",
            ConsumerDevices::Once => "Once",
            ConsumerDevices::Daily => "Daily",
            ConsumerDevices::Weekly => "Weekly",
            ConsumerDevices::Monthly => "Monthly",
            ConsumerDevices::Play => "Play",
            ConsumerDevices::Pause => "Pause",
            ConsumerDevices::Record => "Record",
            ConsumerDevices::FastForward => "Fast Forward",
            ConsumerDevices::Rewind => "Rewind",
            ConsumerDevices::ScanNextTrack => "Scan Next Track",
            ConsumerDevices::ScanPreviousTrack => "Scan Previous Track",
            ConsumerDevices::Stop => "Stop",
            ConsumerDevices::Eject => "Eject",
            ConsumerDevices::RandomPlay => "Random Play",
            ConsumerDevices::SelectDisc => "Select Disc",
            ConsumerDevices::EnterDisc => "Enter Disc",
            ConsumerDevices::Repeat => "Repeat",
            ConsumerDevices::Tracking => "Tracking",
            ConsumerDevices::TrackNormal => "Track Normal",
            ConsumerDevices::SlowTracking => "Slow Tracking",
            ConsumerDevices::FrameForward => "Frame Forward",
            ConsumerDevices::FrameBack => "Frame Back",
            ConsumerDevices::Mark => "Mark",
            ConsumerDevices::ClearMark => "Clear Mark",
            ConsumerDevices::RepeatFromMark => "Repeat From Mark",
            ConsumerDevices::ReturnToMark => "Return To Mark",
            ConsumerDevices::SearchMarkForward => "Search Mark Forward",
            ConsumerDevices::SearchMarkBackwards => "Search Mark Backwards",
            ConsumerDevices::CounterReset => "Counter Reset",
            ConsumerDevices::ShowCounter => "Show Counter",
            ConsumerDevices::TrackingIncrement => "Tracking Increment",
            ConsumerDevices::TrackingDecrement => "Tracking Decrement",
            ConsumerDevices::StopEject => "Stop/Eject",
            ConsumerDevices::PlayPause => "Play/Pause",
            ConsumerDevices::PlaySkip => "Play/Skip",
            ConsumerDevices::VoiceCommand => "Voice Command",
            ConsumerDevices::InvokeCaptureInterface => "Invoke Capture Interface",
            ConsumerDevices::StartorStopGameRecording => "Start or Stop Game Recording",
            ConsumerDevices::HistoricalGameCapture => "Historical Game Capture",
            ConsumerDevices::CaptureGameScreenshot => "Capture Game Screenshot",
            ConsumerDevices::ShoworHideRecordingIndicator => "Show or Hide Recording Indicator",
            ConsumerDevices::StartorStopMicrophoneCapture => "Start or Stop Microphone Capture",
            ConsumerDevices::StartorStopCameraCapture => "Start or Stop Camera Capture",
            ConsumerDevices::StartorStopGameBroadcast => "Start or Stop Game Broadcast",
            ConsumerDevices::Volume => "Volume",
            ConsumerDevices::Balance => "Balance",
            ConsumerDevices::Mute => "Mute",
            ConsumerDevices::Bass => "Bass",
            ConsumerDevices::Treble => "Treble",
            ConsumerDevices::BassBoost => "Bass Boost",
            ConsumerDevices::SurroundMode => "Surround Mode",
            ConsumerDevices::Loudness => "Loudness",
            ConsumerDevices::MPX => "MPX",
            ConsumerDevices::VolumeUp => "Volume Up",
            ConsumerDevices::VolumeDown => "Volume Down",
            ConsumerDevices::SpeedSelect => "Speed Select",
            ConsumerDevices::PlaybackSpeed => "Playback Speed",
            ConsumerDevices::StandardPlay => "Standard Play",
            ConsumerDevices::LongPlay => "Long Play",
            ConsumerDevices::ExtendedPlay => "Extended Play",
            ConsumerDevices::Slow => "Slow",
            ConsumerDevices::FanEnable => "Fan Enable",
            ConsumerDevices::FanSpeed => "Fan Speed",
            ConsumerDevices::LightEnable => "Light Enable",
            ConsumerDevices::LightIlluminationLevel => "Light Illumination Level",
            ConsumerDevices::ClimateControlEnable => "Climate Control Enable",
            ConsumerDevices::RoomTemperature => "Room Temperature",
            ConsumerDevices::SecurityEnable => "Security Enable",
            ConsumerDevices::FireAlarm => "Fire Alarm",
            ConsumerDevices::PoliceAlarm => "Police Alarm",
            ConsumerDevices::Proximity => "Proximity",
            ConsumerDevices::Motion => "Motion",
            ConsumerDevices::DuressAlarm => "Duress Alarm",
            ConsumerDevices::HoldupAlarm => "Holdup Alarm",
            ConsumerDevices::MedicalAlarm => "Medical Alarm",
            ConsumerDevices::BalanceRight => "Balance Right",
            ConsumerDevices::BalanceLeft => "Balance Left",
            ConsumerDevices::BassIncrement => "Bass Increment",
            ConsumerDevices::BassDecrement => "Bass Decrement",
            ConsumerDevices::TrebleIncrement => "Treble Increment",
            ConsumerDevices::TrebleDecrement => "Treble Decrement",
            ConsumerDevices::SpeakerSystem => "Speaker System",
            ConsumerDevices::ChannelLeft => "Channel Left",
            ConsumerDevices::ChannelRight => "Channel Right",
            ConsumerDevices::ChannelCenter => "Channel Center",
            ConsumerDevices::ChannelFront => "Channel Front",
            ConsumerDevices::ChannelCenterFront => "Channel Center Front",
            ConsumerDevices::ChannelSide => "Channel Side",
            ConsumerDevices::ChannelSurround => "Channel Surround",
            ConsumerDevices::ChannelLowFreqEnhancement => "Channel Low Freq Enhancement",
            ConsumerDevices::ChannelTop => "Channel Top",
            ConsumerDevices::ChannelUnknown => "Channel Unknown",
            ConsumerDevices::Subchannel => "Sub-channel",
            ConsumerDevices::SubchannelIncrement => "Sub-channel Increment",
            ConsumerDevices::SubchannelDecrement => "Sub-channel Decrement",
            ConsumerDevices::AlternateAudioIncrement => "Alternate Audio Increment",
            ConsumerDevices::AlternateAudioDecrement => "Alternate Audio Decrement",
            ConsumerDevices::ApplicationLaunchButtons => "Application Launch Buttons",
            ConsumerDevices::ALLaunchButtonConfigTool => "AL Launch Button Config Tool",
            ConsumerDevices::ALProgrammableButtonConfig => "AL Programmable Button Config",
            ConsumerDevices::ALConsumerControlConfig => "AL Consumer Control Config",
            ConsumerDevices::ALWordProcessor => "AL Word Processor",
            ConsumerDevices::ALTextEditor => "AL Text Editor",
            ConsumerDevices::ALSpreadsheet => "AL Spreadsheet",
            ConsumerDevices::ALGraphicsEditor => "AL Graphics Editor",
            ConsumerDevices::ALPresentationApp => "AL Presentation App",
            ConsumerDevices::ALDatabaseApp => "AL Database App",
            ConsumerDevices::ALEmailReader => "AL Email Reader",
            ConsumerDevices::ALNewsreader => "AL Newsreader",
            ConsumerDevices::ALVoicemail => "AL Voicemail",
            ConsumerDevices::ALContactsAddressBook => "AL Contacts/Address Book",
            ConsumerDevices::ALCalendarSchedule => "AL Calendar/Schedule",
            ConsumerDevices::ALTaskProjectManager => "AL Task/Project Manager",
            ConsumerDevices::ALLogJournalTimecard => "AL Log/Journal/Timecard",
            ConsumerDevices::ALCheckbookFinance => "AL Checkbook/Finance",
            ConsumerDevices::ALCalculator => "AL Calculator",
            ConsumerDevices::ALAVCapturePlayback => "AL A/VCapture/Playback",
            ConsumerDevices::ALLocalMachineBrowser => "AL Local Machine Browser",
            ConsumerDevices::ALLANWANBrowser => "AL LAN/WANBrowser",
            ConsumerDevices::ALInternetBrowser => "AL Internet Browser",
            ConsumerDevices::ALRemoteNetworkingISPConnect => "AL Remote Networking/ISPConnect",
            ConsumerDevices::ALNetworkConference => "AL Network Conference",
            ConsumerDevices::ALNetworkChat => "AL Network Chat",
            ConsumerDevices::ALTelephonyDialer => "AL Telephony/Dialer",
            ConsumerDevices::ALLogon => "AL Logon",
            ConsumerDevices::ALLogoff => "AL Logoff",
            ConsumerDevices::ALLogonLogoff => "AL Logon/Logoff",
            ConsumerDevices::ALTerminalLockScreensaver => "AL Terminal Lock/Screensaver",
            ConsumerDevices::ALControlPanel => "AL Control Panel",
            ConsumerDevices::ALCommandLineProcessorRun => "AL Command Line Processor/Run",
            ConsumerDevices::ALProcessTaskManager => "AL Process/Task Manager",
            ConsumerDevices::ALSelectTaskApplication => "AL Select Task/Application",
            ConsumerDevices::ALNextTaskApplication => "AL Next Task/Application",
            ConsumerDevices::ALPreviousTaskApplication => "AL Previous Task/Application",
            ConsumerDevices::ALPreemptHaltTaskApplication => "AL Preempt Halt Task/Application",
            ConsumerDevices::ALIntegratedHelpCenter => "AL Integrated Help Center",
            ConsumerDevices::ALDocuments => "AL Documents",
            ConsumerDevices::ALThesaurus => "AL Thesaurus",
            ConsumerDevices::ALDictionary => "AL Dictionary",
            ConsumerDevices::ALDesktop => "AL Desktop",
            ConsumerDevices::ALSpellCheck => "AL Spell Check",
            ConsumerDevices::ALGrammarCheck => "AL Grammar Check",
            ConsumerDevices::ALWirelessStatus => "AL Wireless Status",
            ConsumerDevices::ALKeyboardLayout => "AL Keyboard Layout",
            ConsumerDevices::ALVirusProtection => "AL Virus Protection",
            ConsumerDevices::ALEncryption => "AL Encryption",
            ConsumerDevices::ALScreenSaver => "AL Screen Saver",
            ConsumerDevices::ALAlarms => "AL Alarms",
            ConsumerDevices::ALClock => "AL Clock",
            ConsumerDevices::ALFileBrowser => "AL File Browser",
            ConsumerDevices::ALPowerStatus => "AL Power Status",
            ConsumerDevices::ALImageBrowser => "AL Image Browser",
            ConsumerDevices::ALAudioBrowser => "AL Audio Browser",
            ConsumerDevices::ALMovieBrowser => "AL Movie Browser",
            ConsumerDevices::ALDigitalRightsManager => "AL Digital Rights Manager",
            ConsumerDevices::ALDigitalWallet => "AL Digital Wallet",
            ConsumerDevices::ALInstantMessaging => "AL Instant Messaging",
            ConsumerDevices::ALOEMFeaturesTipsTutoBrowser => "AL OEMFeatures Tips Tuto Browser",
            ConsumerDevices::ALOEMHelp => "AL OEMHelp",
            ConsumerDevices::ALOnlineCommunity => "AL Online Community",
            ConsumerDevices::ALEntertainmentContentBrowser => "AL Entertainment Content Browser",
            ConsumerDevices::ALOnlineShoppingBrowser => "AL Online Shopping Browser",
            ConsumerDevices::ALSmartCardInformationHelp => "AL Smart Card Information/Help",
            ConsumerDevices::ALMarketMonitorFinanceBrowser => "AL Market Monitor Finance Browser",
            ConsumerDevices::ALCustomizedCorpNewsBrowser => "AL Customized Corp News Browser",
            ConsumerDevices::ALOnlineActivityBrowser => "AL Online Activity Browser",
            ConsumerDevices::ALResearchSearchBrowser => "AL Research/Search Browser",
            ConsumerDevices::ALAudioPlayer => "AL Audio Player",
            ConsumerDevices::ALMessageStatus => "AL Message Status",
            ConsumerDevices::ALContactSync => "AL Contact Sync",
            ConsumerDevices::GenericGUIApplicationControls => "Generic GUIApplication Controls",
            ConsumerDevices::ACNew => "AC New",
            ConsumerDevices::ACOpen => "AC Open",
            ConsumerDevices::ACClose => "AC Close",
            ConsumerDevices::ACExit => "AC Exit",
            ConsumerDevices::ACMaximize => "AC Maximize",
            ConsumerDevices::ACMinimize => "AC Minimize",
            ConsumerDevices::ACSave => "AC Save",
            ConsumerDevices::ACPrint => "AC Print",
            ConsumerDevices::ACProperties => "AC Properties",
            ConsumerDevices::ACUndo => "AC Undo",
            ConsumerDevices::ACCopy => "AC Copy",
            ConsumerDevices::ACCut => "AC Cut",
            ConsumerDevices::ACPaste => "AC Paste",
            ConsumerDevices::ACSelectAll => "AC Select All",
            ConsumerDevices::ACFind => "AC Find",
            ConsumerDevices::ACFindandReplace => "AC Findand Replace",
            ConsumerDevices::ACSearch => "AC Search",
            ConsumerDevices::ACGoTo => "AC Go To",
            ConsumerDevices::ACHome => "AC Home",
            ConsumerDevices::ACBack => "AC Back",
            ConsumerDevices::ACForward => "AC Forward",
            ConsumerDevices::ACStop => "AC Stop",
            ConsumerDevices::ACRefresh => "AC Refresh",
            ConsumerDevices::ACPreviousLink => "AC Previous Link",
            ConsumerDevices::ACNextLink => "AC Next Link",
            ConsumerDevices::ACBookmarks => "AC Bookmarks",
            ConsumerDevices::ACHistory => "AC History",
            ConsumerDevices::ACSubscriptions => "AC Subscriptions",
            ConsumerDevices::ACZoomIn => "AC Zoom In",
            ConsumerDevices::ACZoomOut => "AC Zoom Out",
            ConsumerDevices::ACZoom => "AC Zoom",
            ConsumerDevices::ACFullScreenView => "AC Full Screen View",
            ConsumerDevices::ACNormalView => "AC Normal View",
            ConsumerDevices::ACViewToggle => "AC View Toggle",
            ConsumerDevices::ACScrollUp => "AC Scroll Up",
            ConsumerDevices::ACScrollDown => "AC Scroll Down",
            ConsumerDevices::ACScroll => "AC Scroll",
            ConsumerDevices::ACPanLeft => "AC Pan Left",
            ConsumerDevices::ACPanRight => "AC Pan Right",
            ConsumerDevices::ACPan => "AC Pan",
            ConsumerDevices::ACNewWindow => "AC New Window",
            ConsumerDevices::ACTileHorizontally => "AC Tile Horizontally",
            ConsumerDevices::ACTileVertically => "AC Tile Vertically",
            ConsumerDevices::ACFormat => "AC Format",
            ConsumerDevices::ACEdit => "AC Edit",
            ConsumerDevices::ACBold => "AC Bold",
            ConsumerDevices::ACItalics => "AC Italics",
            ConsumerDevices::ACUnderline => "AC Underline",
            ConsumerDevices::ACStrikethrough => "AC Strikethrough",
            ConsumerDevices::ACSubscript => "AC Subscript",
            ConsumerDevices::ACSuperscript => "AC Superscript",
            ConsumerDevices::ACAllCaps => "AC All Caps",
            ConsumerDevices::ACRotate => "AC Rotate",
            ConsumerDevices::ACResize => "AC Resize",
            ConsumerDevices::ACFliphorizontal => "AC Fliphorizontal",
            ConsumerDevices::ACFlipVertical => "AC Flip Vertical",
            ConsumerDevices::ACMirrorHorizontal => "AC Mirror Horizontal",
            ConsumerDevices::ACMirrorVertical => "AC Mirror Vertical",
            ConsumerDevices::ACFontSelect => "AC Font Select",
            ConsumerDevices::ACFontColor => "AC Font Color",
            ConsumerDevices::ACFontSize => "AC Font Size",
            ConsumerDevices::ACJustifyLeft => "AC Justify Left",
            ConsumerDevices::ACJustifyCenterH => "AC Justify Center H",
            ConsumerDevices::ACJustifyRight => "AC Justify Right",
            ConsumerDevices::ACJustifyBlockH => "AC Justify Block H",
            ConsumerDevices::ACJustifyTop => "AC Justify Top",
            ConsumerDevices::ACJustifyCenterV => "AC Justify Center V",
            ConsumerDevices::ACJustifyBottom => "AC Justify Bottom",
            ConsumerDevices::ACJustifyBlockV => "AC Justify Block V",
            ConsumerDevices::ACIndentDecrease => "AC Indent Decrease",
            ConsumerDevices::ACIndentIncrease => "AC Indent Increase",
            ConsumerDevices::ACNumberedList => "AC Numbered List",
            ConsumerDevices::ACRestartNumbering => "AC Restart Numbering",
            ConsumerDevices::ACBulletedList => "AC Bulleted List",
            ConsumerDevices::ACPromote => "AC Promote",
            ConsumerDevices::ACDemote => "AC Demote",
            ConsumerDevices::ACYes => "AC Yes",
            ConsumerDevices::ACNo => "AC No",
            ConsumerDevices::ACCancel => "AC Cancel",
            ConsumerDevices::ACCatalog => "AC Catalog",
            ConsumerDevices::ACBuyCheckout => "AC Buy/Checkout",
            ConsumerDevices::ACAddtoCart => "AC Addto Cart",
            ConsumerDevices::ACExpand => "AC Expand",
            ConsumerDevices::ACExpandAll => "AC Expand All",
            ConsumerDevices::ACCollapse => "AC Collapse",
            ConsumerDevices::ACCollapseAll => "AC Collapse All",
            ConsumerDevices::ACPrintPreview => "AC Print Preview",
            ConsumerDevices::ACPasteSpecial => "AC Paste Special",
            ConsumerDevices::ACInsertMode => "AC Insert Mode",
            ConsumerDevices::ACDelete => "AC Delete",
            ConsumerDevices::ACLock => "AC Lock",
            ConsumerDevices::ACUnlock => "AC Unlock",
            ConsumerDevices::ACProtect => "AC Protect",
            ConsumerDevices::ACUnprotect => "AC Unprotect",
            ConsumerDevices::ACAttachComment => "AC Attach Comment",
            ConsumerDevices::ACDeleteComment => "AC Delete Comment",
            ConsumerDevices::ACViewComment => "AC View Comment",
            ConsumerDevices::ACSelectWord => "AC Select Word",
            ConsumerDevices::ACSelectSentence => "AC Select Sentence",
            ConsumerDevices::ACSelectParagraph => "AC Select Paragraph",
            ConsumerDevices::ACSelectColumn => "AC Select Column",
            ConsumerDevices::ACSelectRow => "AC Select Row",
            ConsumerDevices::ACSelectTable => "AC Select Table",
            ConsumerDevices::ACSelectObject => "AC Select Object",
            ConsumerDevices::ACRedoRepeat => "AC Redo/Repeat",
            ConsumerDevices::ACSort => "AC Sort",
            ConsumerDevices::ACSortAscending => "AC Sort Ascending",
            ConsumerDevices::ACSortDescending => "AC Sort Descending",
            ConsumerDevices::ACFilter => "AC Filter",
            ConsumerDevices::ACSetClock => "AC Set Clock",
            ConsumerDevices::ACViewClock => "AC View Clock",
            ConsumerDevices::ACSelectTimeZone => "AC Select Time Zone",
            ConsumerDevices::ACEditTimeZones => "AC Edit Time Zones",
            ConsumerDevices::ACSetAlarm => "AC Set Alarm",
            ConsumerDevices::ACClearAlarm => "AC Clear Alarm",
            ConsumerDevices::ACSnoozeAlarm => "AC Snooze Alarm",
            ConsumerDevices::ACResetAlarm => "AC Reset Alarm",
            ConsumerDevices::ACSynchronize => "AC Synchronize",
            ConsumerDevices::ACSendReceive => "AC Send/Receive",
            ConsumerDevices::ACSendTo => "AC Send To",
            ConsumerDevices::ACReply => "AC Reply",
            ConsumerDevices::ACReplyAll => "AC Reply All",
            ConsumerDevices::ACForwardMsg => "AC Forward Msg",
            ConsumerDevices::ACSend => "AC Send",
            ConsumerDevices::ACAttachFile => "AC Attach File",
            ConsumerDevices::ACUpload => "AC Upload",
            ConsumerDevices::ACDownloadSaveTargetAs => "AC Download(Save Target As)",
            ConsumerDevices::ACSetBorders => "AC Set Borders",
            ConsumerDevices::ACInsertRow => "AC Insert Row",
            ConsumerDevices::ACInsertColumn => "AC Insert Column",
            ConsumerDevices::ACInsertFile => "AC Insert File",
            ConsumerDevices::ACInsertPicture => "AC Insert Picture",
            ConsumerDevices::ACInsertObject => "AC Insert Object",
            ConsumerDevices::ACInsertSymbol => "AC Insert Symbol",
            ConsumerDevices::ACSaveandClose => "AC Saveand Close",
            ConsumerDevices::ACRename => "AC Rename",
            ConsumerDevices::ACMerge => "AC Merge",
            ConsumerDevices::ACSplit => "AC Split",
            ConsumerDevices::ACDisributeHorizontally => "AC Disribute Horizontally",
            ConsumerDevices::ACDistributeVertically => "AC Distribute Vertically",
            ConsumerDevices::ACNextKeyboardLayoutSelect => "AC Next Keyboard Layout Select",
            ConsumerDevices::ACNavigationGuidance => "AC Navigation Guidance",
            ConsumerDevices::ACDesktopShowAllWindows => "AC Desktop Show All Windows",
            ConsumerDevices::ACSoftKeyLeft => "ACSoft Key Left",
            ConsumerDevices::ACSoftKeyRight => "ACSoft Key Right",
            ConsumerDevices::ACIdleKeepAlive => "AC Idle Keep Alive",
            ConsumerDevices::ExtendedKeyboardAttributesCollection => {
                "Extended Keyboard Attributes Collection"
            }
            ConsumerDevices::KeyboardFormFactor => "Keyboard Form Factor",
            ConsumerDevices::KeyboardKeyType => "Keyboard Key Type",
            ConsumerDevices::KeyboardPhysicalLayout => "Keyboard Physical Layout",
            ConsumerDevices::VendorSpecificKeyboardPhysicalLayout => {
                "Vendor-Specific Keyboard Physical Layout"
            }
            ConsumerDevices::KeyboardIETFLanguageTagIndex => "Keyboard IETF Language Tag Index",
            ConsumerDevices::ImplementedKeyboardInputAssistControls => {
                "Implemented Keyboard Input AssistControls"
            }
            ConsumerDevices::KeyboardInputAssistPrevious => "Keyboard Input Assist Previous",
            ConsumerDevices::KeyboardInputAssistNextS => "Keyboard Input Assist NextS",
            ConsumerDevices::KeyboardInputAssistPreviousGroup => {
                "Keyboard Input Assist Previous Group"
            }
            ConsumerDevices::KeyboardInputAssistNextGroup => "Keyboard Input Assist NextGroup",
            ConsumerDevices::KeyboardInputAssistAccept => "Keyboard Input Assist Accept",
            ConsumerDevices::KeyboardInputAssistCancel => "Keyboard Input Assist Cancel",
            ConsumerDevices::ContactEdited => "Contact Edited",
            ConsumerDevices::ContactAdded => "Contact Added",
            ConsumerDevices::ContactRecordActive => "Contact Record Active",
            ConsumerDevices::ContactIndex => "Contact Index",
            ConsumerDevices::ContactNickname => "Contact Nickname",
            ConsumerDevices::ContactFirstName => "Contact First Name",
            ConsumerDevices::ContactLastName => "Contact Last Name",
            ConsumerDevices::ContactFullName => "Contact Full Name",
            ConsumerDevices::ContactPhoneNumberPersonal => "Contact Phone Number Personal",
            ConsumerDevices::ContactPhoneNumberBusiness => "Contact Phone Number Business",
            ConsumerDevices::ContactPhoneNumberMobile => "Contact Phone Number Mobile",
            ConsumerDevices::ContactPhoneNumberPager => "Contact Phone Number Pager",
            ConsumerDevices::ContactPhoneNumberFax => "Contact Phone Number Fax",
            ConsumerDevices::ContactPhoneNumberOther => "Contact Phone Number Other",
            ConsumerDevices::ContactEmailPersonal => "Contact Email Personal",
            ConsumerDevices::ContactEmailBusiness => "Contact Email Business",
            ConsumerDevices::ContactEmailOther => "Contact Email Other",
            ConsumerDevices::ContactEmailMain => "Contact Email Main",
            ConsumerDevices::ContactSpeedDialNumber => "Contact Speed Dial Number",
            ConsumerDevices::ContactStatusFlag => "Contact Status Flag",
            ConsumerDevices::ContactMisc => "Contact Misc.",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x13`: "Digitizers"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Digitizers {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Digitizer"
    Digitizer,
    /// Usage ID `0x2`: "Pen"
    Pen,
    /// Usage ID `0x3`: "Light Pen"
    LightPen,
    /// Usage ID `0x4`: "Touch Screen"
    TouchScreen,
    /// Usage ID `0x5`: "Touch Pad"
    TouchPad,
    /// Usage ID `0x6`: "White Board"
    WhiteBoard,
    /// Usage ID `0x7`: "Coordinate Measuring Machine"
    CoordinateMeasuringMachine,
    /// Usage ID `0x8`: "3-D Digitizer"
    ThreeDDigitizer,
    /// Usage ID `0x9`: "Stereo Plotter"
    StereoPlotter,
    /// Usage ID `0x10`: "Articulated Arm"
    ArticulatedArm,
    /// Usage ID `0x11`: "Armature"
    Armature,
    /// Usage ID `0x12`: "Multiple Point Digitizer"
    MultiplePointDigitizer,
    /// Usage ID `0x13`: "Free Space Wand"
    FreeSpaceWand,
    /// Usage ID `0x14`: "Device Configuration"
    DeviceConfiguration,
    /// Usage ID `0x15`: "Capacitive Heat Map Digitizer"
    CapacitiveHeatMapDigitizer,
    /// Usage ID `0x32`: "Stylus"
    Stylus,
    /// Usage ID `0x33`: "Puck"
    Puck,
    /// Usage ID `0x34`: "Finger"
    Finger,
    /// Usage ID `0x35`: "Device Settings"
    DeviceSettings,
    /// Usage ID `0x36`: "Character Gesture"
    CharacterGesture,
    /// Usage ID `0x48`: "Tip Pressure"
    TipPressure,
    /// Usage ID `0x49`: "Barrel Pressure"
    BarrelPressure,
    /// Usage ID `0x50`: "In Range"
    InRange,
    /// Usage ID `0x51`: "Touch"
    Touch,
    /// Usage ID `0x52`: "Untouch"
    Untouch,
    /// Usage ID `0x53`: "Tap"
    Tap,
    /// Usage ID `0x54`: "Quality"
    Quality,
    /// Usage ID `0x55`: "Data Valid"
    DataValid,
    /// Usage ID `0x56`: "Transducer Index"
    TransducerIndex,
    /// Usage ID `0x57`: "Tablet Function Keys"
    TabletFunctionKeys,
    /// Usage ID `0x58`: "Program Change Keys"
    ProgramChangeKeys,
    /// Usage ID `0x59`: "Battery Strength"
    BatteryStrength,
    /// Usage ID `0x60`: "Invert"
    Invert,
    /// Usage ID `0x61`: "X Tilt"
    XTilt,
    /// Usage ID `0x62`: "Y Tilt"
    YTilt,
    /// Usage ID `0x63`: "Azimuth"
    Azimuth,
    /// Usage ID `0x64`: "Altitude"
    Altitude,
    /// Usage ID `0x65`: "Twist"
    Twist,
    /// Usage ID `0x66`: "Tip Switch"
    TipSwitch,
    /// Usage ID `0x67`: "Secondary Tip Switch"
    SecondaryTipSwitch,
    /// Usage ID `0x68`: "Barrel Switch"
    BarrelSwitch,
    /// Usage ID `0x69`: "Eraser"
    Eraser,
    /// Usage ID `0x70`: "Tablet Pick"
    TabletPick,
    /// Usage ID `0x71`: "Confidence"
    Confidence,
    /// Usage ID `0x72`: "Width"
    Width,
    /// Usage ID `0x73`: "Height"
    Height,
    /// Usage ID `0x81`: "Contact Id"
    ContactId,
    /// Usage ID `0x82`: "Inputmode"
    Inputmode,
    /// Usage ID `0x83`: "Device Index"
    DeviceIndex,
    /// Usage ID `0x84`: "Contact Count"
    ContactCount,
    /// Usage ID `0x85`: "Contact Max"
    ContactMax,
    /// Usage ID `0x86`: "Scan Time"
    ScanTime,
    /// Usage ID `0x87`: "Surface Switch"
    SurfaceSwitch,
    /// Usage ID `0x88`: "Button Switch"
    ButtonSwitch,
    /// Usage ID `0x89`: "Button Type"
    ButtonType,
    /// Usage ID `0x90`: "Secondary Barrel Switch"
    SecondaryBarrelSwitch,
    /// Usage ID `0x91`: "Transducer Serial Number"
    TransducerSerialNumber,
    /// Usage ID `0x92`: "Preferred Inking Color"
    PreferredInkingColor,
    /// Usage ID `0x93`: "Preferred Color is Locked"
    PreferredColorisLocked,
    /// Usage ID `0x94`: "Preferred Line Width"
    PreferredLineWidth,
    /// Usage ID `0x95`: "Preferred Line Width is Locked"
    PreferredLineWidthisLocked,
    /// Usage ID `0x97`: "Gesture Character Quality"
    GestureCharacterQuality,
    /// Usage ID `0x98`: "Character Gesture Data Length"
    CharacterGestureDataLength,
    /// Usage ID `0x99`: "Character Gesture Data"
    CharacterGestureData,
    /// Usage ID `0x100`: "Gesture Character Encoding"
    GestureCharacterEncoding,
    /// Usage ID `0x101`: "UTF8 Character Gesture Encoding Sel"
    UTF8CharacterGestureEncodingSel,
    /// Usage ID `0x102`: "UTF16 Little Endian Character Gesture Encoding Sel"
    UTF16LittleEndianCharacterGestureEncodingSel,
    /// Usage ID `0x103`: "UTF16 Big Endian Character Gesture Encoding Sel"
    UTF16BigEndianCharacterGestureEncodingSel,
    /// Usage ID `0x104`: "UTF32 Little Endian Character Gesture Encoding"
    UTF32LittleEndianCharacterGestureEncoding,
    /// Usage ID `0x105`: "UTF32 Big Endian Character Gesture Encoding"
    UTF32BigEndianCharacterGestureEncoding,
    /// Usage ID `0x106`: "Gesture Character Enable"
    GestureCharacterEnable,
    /// Usage ID `0x107`: "Capacitive Heat Map Protocol Version"
    CapacitiveHeatMapProtocolVersion,
    /// Usage ID `0x108`: "Capacitive Heat Map Frame Data"
    CapacitiveHeatMapFrameData,
    /// Usage ID `0x112`: "Preferred Line Style"
    PreferredLineStyle,
    /// Usage ID `0x113`: "Preferred Line Style is Locked"
    PreferredLineStyleisLocked,
    /// Usage ID `0x114`: "Ink"
    Ink,
    /// Usage ID `0x115`: "Pencil"
    Pencil,
    /// Usage ID `0x116`: "Highlighter"
    Highlighter,
    /// Usage ID `0x117`: "Chisel Marker"
    ChiselMarker,
    /// Usage ID `0x118`: "Brush"
    Brush,
    /// Usage ID `0x119`: "No preference"
    Nopreference,
    /// Usage ID `0x128`: "Digitizer Diagnostic"
    DigitizerDiagnostic,
    /// Usage ID `0x129`: "Digitizer Error"
    DigitizerError,
    /// Usage ID `0x130`: "Err Normal Status"
    ErrNormalStatus,
    /// Usage ID `0x131`: "Err Transducers Exceeded"
    ErrTransducersExceeded,
    /// Usage ID `0x132`: "Err Full Trans Features Unavail"
    ErrFullTransFeaturesUnavail,
    /// Usage ID `0x133`: "Err Charge Low"
    ErrChargeLow,
    /// Usage ID `0x144`: "Transducer Software Info."
    TransducerSoftwareInfo,
    /// Usage ID `0x145`: "Transducer Vendor ID"
    TransducerVendorID,
    /// Usage ID `0x146`: "Transducer Product ID"
    TransducerProductID,
    /// Usage ID `0x147`: "Device Supported Protocols"
    DeviceSupportedProtocols,
    /// Usage ID `0x148`: "Transducer Supported Protocols"
    TransducerSupportedProtocols,
    /// Usage ID `0x149`: "No Protocol"
    NoProtocol,
    /// Usage ID `0x150`: "Wacom AES Protocol"
    WacomAESProtocol,
    /// Usage ID `0x151`: "USI Protocol"
    USIProtocol,
    /// Usage ID `0x152`: "Microsoft Pen Protocol"
    MicrosoftPenProtocol,
    /// Usage ID `0x160`: "Supported Report Rates"
    SupportedReportRates,
    /// Usage ID `0x161`: "Report Rate"
    ReportRate,
    /// Usage ID `0x162`: "Transducer Connected"
    TransducerConnected,
    /// Usage ID `0x163`: "Switch Disabled"
    SwitchDisabled,
    /// Usage ID `0x164`: "Switch Unimplemented"
    SwitchUnimplemented,
    /// Usage ID `0x165`: "Transducer Switches"
    TransducerSwitches,
}

impl fmt::Display for Digitizers {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Digitizers::Undefined => "Undefined",
            Digitizers::Digitizer => "Digitizer",
            Digitizers::Pen => "Pen",
            Digitizers::LightPen => "Light Pen",
            Digitizers::TouchScreen => "Touch Screen",
            Digitizers::TouchPad => "Touch Pad",
            Digitizers::WhiteBoard => "White Board",
            Digitizers::CoordinateMeasuringMachine => "Coordinate Measuring Machine",
            Digitizers::ThreeDDigitizer => "3-D Digitizer",
            Digitizers::StereoPlotter => "Stereo Plotter",
            Digitizers::ArticulatedArm => "Articulated Arm",
            Digitizers::Armature => "Armature",
            Digitizers::MultiplePointDigitizer => "Multiple Point Digitizer",
            Digitizers::FreeSpaceWand => "Free Space Wand",
            Digitizers::DeviceConfiguration => "Device Configuration",
            Digitizers::CapacitiveHeatMapDigitizer => "Capacitive Heat Map Digitizer",
            Digitizers::Stylus => "Stylus",
            Digitizers::Puck => "Puck",
            Digitizers::Finger => "Finger",
            Digitizers::DeviceSettings => "Device Settings",
            Digitizers::CharacterGesture => "Character Gesture",
            Digitizers::TipPressure => "Tip Pressure",
            Digitizers::BarrelPressure => "Barrel Pressure",
            Digitizers::InRange => "In Range",
            Digitizers::Touch => "Touch",
            Digitizers::Untouch => "Untouch",
            Digitizers::Tap => "Tap",
            Digitizers::Quality => "Quality",
            Digitizers::DataValid => "Data Valid",
            Digitizers::TransducerIndex => "Transducer Index",
            Digitizers::TabletFunctionKeys => "Tablet Function Keys",
            Digitizers::ProgramChangeKeys => "Program Change Keys",
            Digitizers::BatteryStrength => "Battery Strength",
            Digitizers::Invert => "Invert",
            Digitizers::XTilt => "X Tilt",
            Digitizers::YTilt => "Y Tilt",
            Digitizers::Azimuth => "Azimuth",
            Digitizers::Altitude => "Altitude",
            Digitizers::Twist => "Twist",
            Digitizers::TipSwitch => "Tip Switch",
            Digitizers::SecondaryTipSwitch => "Secondary Tip Switch",
            Digitizers::BarrelSwitch => "Barrel Switch",
            Digitizers::Eraser => "Eraser",
            Digitizers::TabletPick => "Tablet Pick",
            Digitizers::Confidence => "Confidence",
            Digitizers::Width => "Width",
            Digitizers::Height => "Height",
            Digitizers::ContactId => "Contact Id",
            Digitizers::Inputmode => "Inputmode",
            Digitizers::DeviceIndex => "Device Index",
            Digitizers::ContactCount => "Contact Count",
            Digitizers::ContactMax => "Contact Max",
            Digitizers::ScanTime => "Scan Time",
            Digitizers::SurfaceSwitch => "Surface Switch",
            Digitizers::ButtonSwitch => "Button Switch",
            Digitizers::ButtonType => "Button Type",
            Digitizers::SecondaryBarrelSwitch => "Secondary Barrel Switch",
            Digitizers::TransducerSerialNumber => "Transducer Serial Number",
            Digitizers::PreferredInkingColor => "Preferred Inking Color",
            Digitizers::PreferredColorisLocked => "Preferred Color is Locked",
            Digitizers::PreferredLineWidth => "Preferred Line Width",
            Digitizers::PreferredLineWidthisLocked => "Preferred Line Width is Locked",
            Digitizers::GestureCharacterQuality => "Gesture Character Quality",
            Digitizers::CharacterGestureDataLength => "Character Gesture Data Length",
            Digitizers::CharacterGestureData => "Character Gesture Data",
            Digitizers::GestureCharacterEncoding => "Gesture Character Encoding",
            Digitizers::UTF8CharacterGestureEncodingSel => "UTF8 Character Gesture Encoding Sel",
            Digitizers::UTF16LittleEndianCharacterGestureEncodingSel => {
                "UTF16 Little Endian Character Gesture Encoding Sel"
            }
            Digitizers::UTF16BigEndianCharacterGestureEncodingSel => {
                "UTF16 Big Endian Character Gesture Encoding Sel"
            }
            Digitizers::UTF32LittleEndianCharacterGestureEncoding => {
                "UTF32 Little Endian Character Gesture Encoding"
            }
            Digitizers::UTF32BigEndianCharacterGestureEncoding => {
                "UTF32 Big Endian Character Gesture Encoding"
            }
            Digitizers::GestureCharacterEnable => "Gesture Character Enable",
            Digitizers::CapacitiveHeatMapProtocolVersion => "Capacitive Heat Map Protocol Version",
            Digitizers::CapacitiveHeatMapFrameData => "Capacitive Heat Map Frame Data",
            Digitizers::PreferredLineStyle => "Preferred Line Style",
            Digitizers::PreferredLineStyleisLocked => "Preferred Line Style is Locked",
            Digitizers::Ink => "Ink",
            Digitizers::Pencil => "Pencil",
            Digitizers::Highlighter => "Highlighter",
            Digitizers::ChiselMarker => "Chisel Marker",
            Digitizers::Brush => "Brush",
            Digitizers::Nopreference => "No preference",
            Digitizers::DigitizerDiagnostic => "Digitizer Diagnostic",
            Digitizers::DigitizerError => "Digitizer Error",
            Digitizers::ErrNormalStatus => "Err Normal Status",
            Digitizers::ErrTransducersExceeded => "Err Transducers Exceeded",
            Digitizers::ErrFullTransFeaturesUnavail => "Err Full Trans Features Unavail",
            Digitizers::ErrChargeLow => "Err Charge Low",
            Digitizers::TransducerSoftwareInfo => "Transducer Software Info.",
            Digitizers::TransducerVendorID => "Transducer Vendor ID",
            Digitizers::TransducerProductID => "Transducer Product ID",
            Digitizers::DeviceSupportedProtocols => "Device Supported Protocols",
            Digitizers::TransducerSupportedProtocols => "Transducer Supported Protocols",
            Digitizers::NoProtocol => "No Protocol",
            Digitizers::WacomAESProtocol => "Wacom AES Protocol",
            Digitizers::USIProtocol => "USI Protocol",
            Digitizers::MicrosoftPenProtocol => "Microsoft Pen Protocol",
            Digitizers::SupportedReportRates => "Supported Report Rates",
            Digitizers::ReportRate => "Report Rate",
            Digitizers::TransducerConnected => "Transducer Connected",
            Digitizers::SwitchDisabled => "Switch Disabled",
            Digitizers::SwitchUnimplemented => "Switch Unimplemented",
            Digitizers::TransducerSwitches => "Transducer Switches",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x14`: "Haptic"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Haptic {
    /// Usage ID `0x1`: "Simple Haptic Controller"
    SimpleHapticController,
    /// Usage ID `0x16`: "Waveform"
    Waveform,
    /// Usage ID `0x17`: "Duration"
    Duration,
    /// Usage ID `0x32`: "Auto Trigger"
    AutoTrigger,
    /// Usage ID `0x33`: "Manual Trigger"
    ManualTrigger,
    /// Usage ID `0x34`: "Auto Trigger Associated Control"
    AutoTriggerAssociatedControl,
    /// Usage ID `0x35`: "Intensity"
    Intensity,
    /// Usage ID `0x36`: "Repeat Count"
    RepeatCount,
    /// Usage ID `0x37`: "Retrigger Period"
    RetriggerPeriod,
    /// Usage ID `0x38`: "Waveform Vendor Page"
    WaveformVendorPage,
    /// Usage ID `0x39`: "Waveform Vendor ID"
    WaveformVendorID,
    /// Usage ID `0x40`: "Waveform Cutoff Time"
    WaveformCutoffTime,
    /// Usage ID `0x4097`: "WAVEFORM_NONE"
    WAVEFORM_NONE,
    /// Usage ID `0x4098`: "WAVEFORM_STOP"
    WAVEFORM_STOP,
    /// Usage ID `0x4099`: "WAVEFORM_CLICK"
    WAVEFORM_CLICK,
    /// Usage ID `0x4100`: "WAVEFORM_BUZZ_CONTINUOUS"
    WAVEFORM_BUZZ_CONTINUOUS,
    /// Usage ID `0x4101`: "WAVEFORM_RUMBLE_CONTINUOUS"
    WAVEFORM_RUMBLE_CONTINUOUS,
    /// Usage ID `0x4102`: "WAVEFORM_PRESS"
    WAVEFORM_PRESS,
    /// Usage ID `0x4103`: "WAVEFORM_RELEASE"
    WAVEFORM_RELEASE,
}

impl fmt::Display for Haptic {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Haptic::SimpleHapticController => "Simple Haptic Controller",
            Haptic::Waveform => "Waveform",
            Haptic::Duration => "Duration",
            Haptic::AutoTrigger => "Auto Trigger",
            Haptic::ManualTrigger => "Manual Trigger",
            Haptic::AutoTriggerAssociatedControl => "Auto Trigger Associated Control",
            Haptic::Intensity => "Intensity",
            Haptic::RepeatCount => "Repeat Count",
            Haptic::RetriggerPeriod => "Retrigger Period",
            Haptic::WaveformVendorPage => "Waveform Vendor Page",
            Haptic::WaveformVendorID => "Waveform Vendor ID",
            Haptic::WaveformCutoffTime => "Waveform Cutoff Time",
            Haptic::WAVEFORM_NONE => "WAVEFORM_NONE",
            Haptic::WAVEFORM_STOP => "WAVEFORM_STOP",
            Haptic::WAVEFORM_CLICK => "WAVEFORM_CLICK",
            Haptic::WAVEFORM_BUZZ_CONTINUOUS => "WAVEFORM_BUZZ_CONTINUOUS",
            Haptic::WAVEFORM_RUMBLE_CONTINUOUS => "WAVEFORM_RUMBLE_CONTINUOUS",
            Haptic::WAVEFORM_PRESS => "WAVEFORM_PRESS",
            Haptic::WAVEFORM_RELEASE => "WAVEFORM_RELEASE",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x16`: "Unicode"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Unicode {}

impl fmt::Display for Unicode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            _ => "",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x18`: "Eye and Head Trackers"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum EyeandHeadTrackers {
    /// Usage ID `0x1`: "Eye Tracker"
    EyeTracker,
    /// Usage ID `0x2`: "Head Tracker"
    HeadTracker,
    /// Usage ID `0x16`: "Tracking Data"
    TrackingData,
    /// Usage ID `0x17`: "Capabilities"
    Capabilities,
    /// Usage ID `0x18`: "Configuration"
    Configuration,
    /// Usage ID `0x19`: "Status"
    Status,
    /// Usage ID `0x20`: "Control"
    Control,
    /// Usage ID `0x32`: "Sensor Timestamp"
    SensorTimestamp,
    /// Usage ID `0x33`: "Position X"
    PositionX,
    /// Usage ID `0x34`: "Position Y"
    PositionY,
    /// Usage ID `0x35`: "Position Z"
    PositionZ,
    /// Usage ID `0x36`: "Gaze Point"
    GazePoint,
    /// Usage ID `0x37`: "Left Eye Position"
    LeftEyePosition,
    /// Usage ID `0x38`: "Right Eye Position"
    RightEyePosition,
    /// Usage ID `0x39`: "Head Position"
    HeadPosition,
    /// Usage ID `0x40`: "Head Direction Point"
    HeadDirectionPoint,
    /// Usage ID `0x41`: "Rotation about X axis"
    RotationaboutXaxis,
    /// Usage ID `0x42`: "Rotation about Y axis"
    RotationaboutYaxis,
    /// Usage ID `0x43`: "Rotation about Z axis"
    RotationaboutZaxis,
    /// Usage ID `0x256`: "Tracker Quality"
    TrackerQuality,
    /// Usage ID `0x257`: "Minimum Tracking Distance"
    MinimumTrackingDistance,
    /// Usage ID `0x258`: "Optimum Tracking Distance"
    OptimumTrackingDistance,
    /// Usage ID `0x259`: "Maximum Tracking Distance"
    MaximumTrackingDistance,
    /// Usage ID `0x260`: "Maximum Screen Plane Width"
    MaximumScreenPlaneWidth,
    /// Usage ID `0x261`: "Maximum Screen Plane Height"
    MaximumScreenPlaneHeight,
    /// Usage ID `0x512`: "Display Manufacturer ID"
    DisplayManufacturerID,
    /// Usage ID `0x513`: "Display Product ID"
    DisplayProductID,
    /// Usage ID `0x514`: "Display Serial Number"
    DisplaySerialNumber,
    /// Usage ID `0x515`: "Display Manufacturer Date"
    DisplayManufacturerDate,
    /// Usage ID `0x516`: "Calibrated Screen Width"
    CalibratedScreenWidth,
    /// Usage ID `0x517`: "Calibrated Screen Height"
    CalibratedScreenHeight,
    /// Usage ID `0x768`: "Sampling Frequency"
    SamplingFrequency,
    /// Usage ID `0x769`: "Configuration Status"
    ConfigurationStatus,
    /// Usage ID `0x1024`: "Device Mode Request"
    DeviceModeRequest,
}

impl fmt::Display for EyeandHeadTrackers {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            EyeandHeadTrackers::EyeTracker => "Eye Tracker",
            EyeandHeadTrackers::HeadTracker => "Head Tracker",
            EyeandHeadTrackers::TrackingData => "Tracking Data",
            EyeandHeadTrackers::Capabilities => "Capabilities",
            EyeandHeadTrackers::Configuration => "Configuration",
            EyeandHeadTrackers::Status => "Status",
            EyeandHeadTrackers::Control => "Control",
            EyeandHeadTrackers::SensorTimestamp => "Sensor Timestamp",
            EyeandHeadTrackers::PositionX => "Position X",
            EyeandHeadTrackers::PositionY => "Position Y",
            EyeandHeadTrackers::PositionZ => "Position Z",
            EyeandHeadTrackers::GazePoint => "Gaze Point",
            EyeandHeadTrackers::LeftEyePosition => "Left Eye Position",
            EyeandHeadTrackers::RightEyePosition => "Right Eye Position",
            EyeandHeadTrackers::HeadPosition => "Head Position",
            EyeandHeadTrackers::HeadDirectionPoint => "Head Direction Point",
            EyeandHeadTrackers::RotationaboutXaxis => "Rotation about X axis",
            EyeandHeadTrackers::RotationaboutYaxis => "Rotation about Y axis",
            EyeandHeadTrackers::RotationaboutZaxis => "Rotation about Z axis",
            EyeandHeadTrackers::TrackerQuality => "Tracker Quality",
            EyeandHeadTrackers::MinimumTrackingDistance => "Minimum Tracking Distance",
            EyeandHeadTrackers::OptimumTrackingDistance => "Optimum Tracking Distance",
            EyeandHeadTrackers::MaximumTrackingDistance => "Maximum Tracking Distance",
            EyeandHeadTrackers::MaximumScreenPlaneWidth => "Maximum Screen Plane Width",
            EyeandHeadTrackers::MaximumScreenPlaneHeight => "Maximum Screen Plane Height",
            EyeandHeadTrackers::DisplayManufacturerID => "Display Manufacturer ID",
            EyeandHeadTrackers::DisplayProductID => "Display Product ID",
            EyeandHeadTrackers::DisplaySerialNumber => "Display Serial Number",
            EyeandHeadTrackers::DisplayManufacturerDate => "Display Manufacturer Date",
            EyeandHeadTrackers::CalibratedScreenWidth => "Calibrated Screen Width",
            EyeandHeadTrackers::CalibratedScreenHeight => "Calibrated Screen Height",
            EyeandHeadTrackers::SamplingFrequency => "Sampling Frequency",
            EyeandHeadTrackers::ConfigurationStatus => "Configuration Status",
            EyeandHeadTrackers::DeviceModeRequest => "Device Mode Request",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x20`: "Auxiliary Display"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum AuxiliaryDisplay {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Alphanumeric Display"
    AlphanumericDisplay,
    /// Usage ID `0x2`: "Auxiliary Display"
    AuxiliaryDisplay,
    /// Usage ID `0x32`: "Display Attributes Report"
    DisplayAttributesReport,
    /// Usage ID `0x33`: "ASCII Character Set"
    ASCIICharacterSet,
    /// Usage ID `0x34`: "Data Read Back"
    DataReadBack,
    /// Usage ID `0x35`: "Font Read Back"
    FontReadBack,
    /// Usage ID `0x36`: "Display Control Report"
    DisplayControlReport,
    /// Usage ID `0x37`: "Clear Display"
    ClearDisplay,
    /// Usage ID `0x38`: "Display Enable"
    DisplayEnable,
    /// Usage ID `0x39`: "Screen Saver Delay"
    ScreenSaverDelay,
    /// Usage ID `0x40`: "Screen Saver Enable"
    ScreenSaverEnable,
    /// Usage ID `0x41`: "Vertical Scroll"
    VerticalScroll,
    /// Usage ID `0x42`: "Horizontal Scroll"
    HorizontalScroll,
    /// Usage ID `0x43`: "Character Report"
    CharacterReport,
    /// Usage ID `0x44`: "Display Data"
    DisplayData,
    /// Usage ID `0x45`: "Display Status"
    DisplayStatus,
    /// Usage ID `0x46`: "Stat Not Ready"
    StatNotReady,
    /// Usage ID `0x47`: "Stat Ready"
    StatReady,
    /// Usage ID `0x48`: "Err Not a loadable character"
    ErrNotaloadablecharacter,
    /// Usage ID `0x49`: "Err Font data cannot be read"
    ErrFontdatacannotberead,
    /// Usage ID `0x50`: "Cursor Position Report"
    CursorPositionReport,
    /// Usage ID `0x51`: "Row"
    Row,
    /// Usage ID `0x52`: "Column"
    Column,
    /// Usage ID `0x53`: "Rows"
    Rows,
    /// Usage ID `0x54`: "Columns"
    Columns,
    /// Usage ID `0x55`: "Cursor Pixel Positioning"
    CursorPixelPositioning,
    /// Usage ID `0x56`: "Cursor Mode"
    CursorMode,
    /// Usage ID `0x57`: "Cursor Enable"
    CursorEnable,
    /// Usage ID `0x58`: "Cursor Blink"
    CursorBlink,
    /// Usage ID `0x59`: "Font Report"
    FontReport,
    /// Usage ID `0x60`: "Font Data"
    FontData,
    /// Usage ID `0x61`: "Character Width"
    CharacterWidth,
    /// Usage ID `0x62`: "Character Height"
    CharacterHeight,
    /// Usage ID `0x63`: "Character Spacing Horizontal"
    CharacterSpacingHorizontal,
    /// Usage ID `0x64`: "Character Spacing Vertical"
    CharacterSpacingVertical,
    /// Usage ID `0x65`: "Unicode Character Set"
    UnicodeCharacterSet,
    /// Usage ID `0x66`: "Font 7-Segment"
    Font7Segment,
    /// Usage ID `0x67`: "7-Segment Direct Map"
    SevenSegmentDirectMap,
    /// Usage ID `0x68`: "Font 14-Segment"
    Font14Segment,
    /// Usage ID `0x69`: "14-Segment Direct Map"
    One4SegmentDirectMap,
    /// Usage ID `0x70`: "Display Brightness"
    DisplayBrightness,
    /// Usage ID `0x71`: "Display Contrast"
    DisplayContrast,
    /// Usage ID `0x72`: "Character Attribute"
    CharacterAttribute,
    /// Usage ID `0x73`: "Attribute Readback"
    AttributeReadback,
    /// Usage ID `0x74`: "Attribute Data"
    AttributeData,
    /// Usage ID `0x75`: "Char Attr Enhance"
    CharAttrEnhance,
    /// Usage ID `0x76`: "Char Attr Underline"
    CharAttrUnderline,
    /// Usage ID `0x77`: "Char Attr Blink"
    CharAttrBlink,
    /// Usage ID `0x128`: "Bitmap Size X"
    BitmapSizeX,
    /// Usage ID `0x129`: "Bitmap Size Y"
    BitmapSizeY,
    /// Usage ID `0x130`: "Max Blit Size"
    MaxBlitSize,
    /// Usage ID `0x131`: "Bit Depth Format"
    BitDepthFormat,
    /// Usage ID `0x132`: "Display Orientation"
    DisplayOrientation,
    /// Usage ID `0x133`: "Palette Report"
    PaletteReport,
    /// Usage ID `0x134`: "Palette Data Size"
    PaletteDataSize,
    /// Usage ID `0x135`: "Palette Data Offset"
    PaletteDataOffset,
    /// Usage ID `0x136`: "Palette Data"
    PaletteData,
    /// Usage ID `0x138`: "Blit Report"
    BlitReport,
    /// Usage ID `0x139`: "Blit Rectangle X1"
    BlitRectangleX1,
    /// Usage ID `0x140`: "Blit Rectangle Y1"
    BlitRectangleY1,
    /// Usage ID `0x141`: "Blit Rectangle X2"
    BlitRectangleX2,
    /// Usage ID `0x142`: "Blit Rectangle Y2"
    BlitRectangleY2,
    /// Usage ID `0x143`: "Blit Data"
    BlitData,
    /// Usage ID `0x144`: "Soft Button"
    SoftButton,
    /// Usage ID `0x145`: "Soft Button ID"
    SoftButtonID,
    /// Usage ID `0x146`: "Soft Button Side"
    SoftButtonSide,
    /// Usage ID `0x147`: "Soft Button Offset1"
    SoftButtonOffset1,
    /// Usage ID `0x148`: "Soft Button Offset2"
    SoftButtonOffset2,
    /// Usage ID `0x149`: "Soft Button Report"
    SoftButtonReport,
    /// Usage ID `0x194`: "Soft Keys"
    SoftKeys,
    /// Usage ID `0x204`: "Display Data Extensions"
    DisplayDataExtensions,
    /// Usage ID `0x207`: "Character Mapping"
    CharacterMapping,
    /// Usage ID `0x221`: "Unicode Equivalent"
    UnicodeEquivalent,
    /// Usage ID `0x223`: "Character Page Mapping"
    CharacterPageMapping,
    /// Usage ID `0x255`: "Request Report"
    RequestReport,
}

impl fmt::Display for AuxiliaryDisplay {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            AuxiliaryDisplay::Undefined => "Undefined",
            AuxiliaryDisplay::AlphanumericDisplay => "Alphanumeric Display",
            AuxiliaryDisplay::AuxiliaryDisplay => "Auxiliary Display",
            AuxiliaryDisplay::DisplayAttributesReport => "Display Attributes Report",
            AuxiliaryDisplay::ASCIICharacterSet => "ASCII Character Set",
            AuxiliaryDisplay::DataReadBack => "Data Read Back",
            AuxiliaryDisplay::FontReadBack => "Font Read Back",
            AuxiliaryDisplay::DisplayControlReport => "Display Control Report",
            AuxiliaryDisplay::ClearDisplay => "Clear Display",
            AuxiliaryDisplay::DisplayEnable => "Display Enable",
            AuxiliaryDisplay::ScreenSaverDelay => "Screen Saver Delay",
            AuxiliaryDisplay::ScreenSaverEnable => "Screen Saver Enable",
            AuxiliaryDisplay::VerticalScroll => "Vertical Scroll",
            AuxiliaryDisplay::HorizontalScroll => "Horizontal Scroll",
            AuxiliaryDisplay::CharacterReport => "Character Report",
            AuxiliaryDisplay::DisplayData => "Display Data",
            AuxiliaryDisplay::DisplayStatus => "Display Status",
            AuxiliaryDisplay::StatNotReady => "Stat Not Ready",
            AuxiliaryDisplay::StatReady => "Stat Ready",
            AuxiliaryDisplay::ErrNotaloadablecharacter => "Err Not a loadable character",
            AuxiliaryDisplay::ErrFontdatacannotberead => "Err Font data cannot be read",
            AuxiliaryDisplay::CursorPositionReport => "Cursor Position Report",
            AuxiliaryDisplay::Row => "Row",
            AuxiliaryDisplay::Column => "Column",
            AuxiliaryDisplay::Rows => "Rows",
            AuxiliaryDisplay::Columns => "Columns",
            AuxiliaryDisplay::CursorPixelPositioning => "Cursor Pixel Positioning",
            AuxiliaryDisplay::CursorMode => "Cursor Mode",
            AuxiliaryDisplay::CursorEnable => "Cursor Enable",
            AuxiliaryDisplay::CursorBlink => "Cursor Blink",
            AuxiliaryDisplay::FontReport => "Font Report",
            AuxiliaryDisplay::FontData => "Font Data",
            AuxiliaryDisplay::CharacterWidth => "Character Width",
            AuxiliaryDisplay::CharacterHeight => "Character Height",
            AuxiliaryDisplay::CharacterSpacingHorizontal => "Character Spacing Horizontal",
            AuxiliaryDisplay::CharacterSpacingVertical => "Character Spacing Vertical",
            AuxiliaryDisplay::UnicodeCharacterSet => "Unicode Character Set",
            AuxiliaryDisplay::Font7Segment => "Font 7-Segment",
            AuxiliaryDisplay::SevenSegmentDirectMap => "7-Segment Direct Map",
            AuxiliaryDisplay::Font14Segment => "Font 14-Segment",
            AuxiliaryDisplay::One4SegmentDirectMap => "14-Segment Direct Map",
            AuxiliaryDisplay::DisplayBrightness => "Display Brightness",
            AuxiliaryDisplay::DisplayContrast => "Display Contrast",
            AuxiliaryDisplay::CharacterAttribute => "Character Attribute",
            AuxiliaryDisplay::AttributeReadback => "Attribute Readback",
            AuxiliaryDisplay::AttributeData => "Attribute Data",
            AuxiliaryDisplay::CharAttrEnhance => "Char Attr Enhance",
            AuxiliaryDisplay::CharAttrUnderline => "Char Attr Underline",
            AuxiliaryDisplay::CharAttrBlink => "Char Attr Blink",
            AuxiliaryDisplay::BitmapSizeX => "Bitmap Size X",
            AuxiliaryDisplay::BitmapSizeY => "Bitmap Size Y",
            AuxiliaryDisplay::MaxBlitSize => "Max Blit Size",
            AuxiliaryDisplay::BitDepthFormat => "Bit Depth Format",
            AuxiliaryDisplay::DisplayOrientation => "Display Orientation",
            AuxiliaryDisplay::PaletteReport => "Palette Report",
            AuxiliaryDisplay::PaletteDataSize => "Palette Data Size",
            AuxiliaryDisplay::PaletteDataOffset => "Palette Data Offset",
            AuxiliaryDisplay::PaletteData => "Palette Data",
            AuxiliaryDisplay::BlitReport => "Blit Report",
            AuxiliaryDisplay::BlitRectangleX1 => "Blit Rectangle X1",
            AuxiliaryDisplay::BlitRectangleY1 => "Blit Rectangle Y1",
            AuxiliaryDisplay::BlitRectangleX2 => "Blit Rectangle X2",
            AuxiliaryDisplay::BlitRectangleY2 => "Blit Rectangle Y2",
            AuxiliaryDisplay::BlitData => "Blit Data",
            AuxiliaryDisplay::SoftButton => "Soft Button",
            AuxiliaryDisplay::SoftButtonID => "Soft Button ID",
            AuxiliaryDisplay::SoftButtonSide => "Soft Button Side",
            AuxiliaryDisplay::SoftButtonOffset1 => "Soft Button Offset1",
            AuxiliaryDisplay::SoftButtonOffset2 => "Soft Button Offset2",
            AuxiliaryDisplay::SoftButtonReport => "Soft Button Report",
            AuxiliaryDisplay::SoftKeys => "Soft Keys",
            AuxiliaryDisplay::DisplayDataExtensions => "Display Data Extensions",
            AuxiliaryDisplay::CharacterMapping => "Character Mapping",
            AuxiliaryDisplay::UnicodeEquivalent => "Unicode Equivalent",
            AuxiliaryDisplay::CharacterPageMapping => "Character Page Mapping",
            AuxiliaryDisplay::RequestReport => "Request Report",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x32`: "Sensor"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Sensor {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Sensor"
    Sensor,
    /// Usage ID `0x16`: "Biometric"
    Biometric,
    /// Usage ID `0x17`: "Biometric Human Presence"
    BiometricHumanPresence,
    /// Usage ID `0x18`: "Biometric Human Proximity"
    BiometricHumanProximity,
    /// Usage ID `0x19`: "Biometric Human Touch"
    BiometricHumanTouch,
    /// Usage ID `0x20`: "Biometric: Blood Pressure"
    BiometricBloodPressure,
    /// Usage ID `0x21`: "Biometric: Body Temperature"
    BiometricBodyTemperature,
    /// Usage ID `0x22`: "Biometric: Heart Rate"
    BiometricHeartRate,
    /// Usage ID `0x23`: "Biometric: Heart Rate Variability"
    BiometricHeartRateVariability,
    /// Usage ID `0x24`: "Biometric: Peripheral Oxygen Saturation"
    BiometricPeripheralOxygenSaturation,
    /// Usage ID `0x25`: "Biometric: Respiratory Rate"
    BiometricRespiratoryRate,
    /// Usage ID `0x32`: "Electrical"
    Electrical,
    /// Usage ID `0x33`: "Electrical: Capacitance"
    ElectricalCapacitance,
    /// Usage ID `0x34`: "Electrical: Current"
    ElectricalCurrent,
    /// Usage ID `0x35`: "Electrical: Power"
    ElectricalPower,
    /// Usage ID `0x36`: "Electrical: Inductance"
    ElectricalInductance,
    /// Usage ID `0x37`: "Electrical: Resistance"
    ElectricalResistance,
    /// Usage ID `0x38`: "Electrical: Voltage"
    ElectricalVoltage,
    /// Usage ID `0x39`: "Electrical: Potentiometer"
    ElectricalPotentiometer,
    /// Usage ID `0x40`: "Electrical: Frequency"
    ElectricalFrequency,
    /// Usage ID `0x41`: "Electrical: Period"
    ElectricalPeriod,
    /// Usage ID `0x48`: "Environmental"
    Environmental,
    /// Usage ID `0x49`: "Environmental: Atmospheric Pressure"
    EnvironmentalAtmosphericPressure,
    /// Usage ID `0x50`: "Environmental: Humidity"
    EnvironmentalHumidity,
    /// Usage ID `0x51`: "Environmental: Temperature"
    EnvironmentalTemperature,
    /// Usage ID `0x52`: "Environmental: Wind Direction"
    EnvironmentalWindDirection,
    /// Usage ID `0x53`: "Environmental: Wind Speed"
    EnvironmentalWindSpeed,
    /// Usage ID `0x54`: "Environmental: Air Quality"
    EnvironmentalAirQuality,
    /// Usage ID `0x55`: "Environmental: Heat Index"
    EnvironmentalHeatIndex,
    /// Usage ID `0x56`: "Environmental: Surface Temperature"
    EnvironmentalSurfaceTemperature,
    /// Usage ID `0x57`: "Environmental: Volatile Organic Compounds"
    EnvironmentalVolatileOrganicCompounds,
    /// Usage ID `0x58`: "Environmental: Object Presence"
    EnvironmentalObjectPresence,
    /// Usage ID `0x59`: "Environmental: Object Proximity"
    EnvironmentalObjectProximity,
    /// Usage ID `0x64`: "Light"
    Light,
    /// Usage ID `0x65`: "Light: Ambient Light"
    LightAmbientLight,
    /// Usage ID `0x66`: "Light: Consumer Infrared"
    LightConsumerInfrared,
    /// Usage ID `0x67`: "Light: Infrared Light"
    LightInfraredLight,
    /// Usage ID `0x68`: "Light: Visible Light"
    LightVisibleLight,
    /// Usage ID `0x69`: "Light: Ultraviolet Light"
    LightUltravioletLight,
    /// Usage ID `0x80`: "Location"
    Location,
    /// Usage ID `0x81`: "Location: Broadcast"
    LocationBroadcast,
    /// Usage ID `0x82`: "Location: Dead Reckoning"
    LocationDeadReckoning,
    /// Usage ID `0x83`: "Location: GPS"
    LocationGPS,
    /// Usage ID `0x84`: "Location: Lookup"
    LocationLookup,
    /// Usage ID `0x85`: "Location: Other"
    LocationOther,
    /// Usage ID `0x86`: "Location: Static"
    LocationStatic,
    /// Usage ID `0x87`: "Location: Triangulation"
    LocationTriangulation,
    /// Usage ID `0x96`: "Mechanical"
    Mechanical,
    /// Usage ID `0x97`: "Mechanical: Boolean Switch"
    MechanicalBooleanSwitch,
    /// Usage ID `0x98`: "Mechanical: Boolean Switch Array"
    MechanicalBooleanSwitchArray,
    /// Usage ID `0x99`: "Mechanical: Multivalue Switch"
    MechanicalMultivalueSwitch,
    /// Usage ID `0x100`: "Mechanical: Force"
    MechanicalForce,
    /// Usage ID `0x101`: "Mechanical: Pressure"
    MechanicalPressure,
    /// Usage ID `0x102`: "Mechanical: Strain"
    MechanicalStrain,
    /// Usage ID `0x103`: "Mechanical: Weight"
    MechanicalWeight,
    /// Usage ID `0x104`: "Mechanical: Haptic Vibrator"
    MechanicalHapticVibrator,
    /// Usage ID `0x105`: "Mechanical: Hall Effect Switch"
    MechanicalHallEffectSwitch,
    /// Usage ID `0x112`: "Motion"
    Motion,
    /// Usage ID `0x113`: "Motion: Accelerometer 1D"
    MotionAccelerometer1D,
    /// Usage ID `0x114`: "Motion: Accelerometer 2D"
    MotionAccelerometer2D,
    /// Usage ID `0x115`: "Motion: Accelerometer 3D"
    MotionAccelerometer3D,
    /// Usage ID `0x116`: "Motion: Gyrometer 1D"
    MotionGyrometer1D,
    /// Usage ID `0x117`: "Motion: Gyrometer 2D"
    MotionGyrometer2D,
    /// Usage ID `0x118`: "Motion: Gyrometer 3D"
    MotionGyrometer3D,
    /// Usage ID `0x119`: "Motion: Motion Detector"
    MotionMotionDetector,
    /// Usage ID `0x120`: "Motion: Speedometer"
    MotionSpeedometer,
    /// Usage ID `0x121`: "Motion: Accelerometer"
    MotionAccelerometer,
    /// Usage ID `0x122`: "Motion: Gyrometer"
    MotionGyrometer,
    /// Usage ID `0x123`: "Motion: Gravity Vector"
    MotionGravityVector,
    /// Usage ID `0x124`: "Motion: Linear Accelerometer"
    MotionLinearAccelerometer,
    /// Usage ID `0x128`: "Orientation"
    Orientation,
    /// Usage ID `0x129`: "Orientation: Compass 1D"
    OrientationCompass1D,
    /// Usage ID `0x130`: "Orientation: Compass 2D"
    OrientationCompass2D,
    /// Usage ID `0x131`: "Orientation: Compass 3D"
    OrientationCompass3D,
    /// Usage ID `0x132`: "Orientation: Inclinometer 1D"
    OrientationInclinometer1D,
    /// Usage ID `0x133`: "Orientation: Inclinometer 2D"
    OrientationInclinometer2D,
    /// Usage ID `0x134`: "Orientation: Inclinometer 3D"
    OrientationInclinometer3D,
    /// Usage ID `0x135`: "Orientation: Distance 1D"
    OrientationDistance1D,
    /// Usage ID `0x136`: "Orientation: Distance 2D"
    OrientationDistance2D,
    /// Usage ID `0x137`: "Orientation: Distance 3D"
    OrientationDistance3D,
    /// Usage ID `0x138`: "Orientation: Device Orientation"
    OrientationDeviceOrientation,
    /// Usage ID `0x139`: "Orientation: Compass"
    OrientationCompass,
    /// Usage ID `0x140`: "Orientation: Inclinometer"
    OrientationInclinometer,
    /// Usage ID `0x141`: "Orientation: Distance"
    OrientationDistance,
    /// Usage ID `0x142`: "Orientation: Relative Orientation"
    OrientationRelativeOrientation,
    /// Usage ID `0x143`: "Orientation: Simple Orientation"
    OrientationSimpleOrientation,
    /// Usage ID `0x144`: "Scanner"
    Scanner,
    /// Usage ID `0x145`: "Scanner: Barcode"
    ScannerBarcode,
    /// Usage ID `0x146`: "Scanner: RFID"
    ScannerRFID,
    /// Usage ID `0x147`: "Scanner: NFC"
    ScannerNFC,
    /// Usage ID `0x160`: "Time"
    Time,
    /// Usage ID `0x161`: "Time: Alarm Timer"
    TimeAlarmTimer,
    /// Usage ID `0x162`: "Time: Real Time Clock"
    TimeRealTimeClock,
    /// Usage ID `0x176`: "Personal Activity"
    PersonalActivity,
    /// Usage ID `0x177`: "Personal Activity: Activity Detection"
    PersonalActivityActivityDetection,
    /// Usage ID `0x178`: "Personal Activity: Device Position"
    PersonalActivityDevicePosition,
    /// Usage ID `0x179`: "Personal Activity: Pedometer"
    PersonalActivityPedometer,
    /// Usage ID `0x180`: "Personal Activity: Step Detection"
    PersonalActivityStepDetection,
    /// Usage ID `0x192`: "Orientation Extended"
    OrientationExtended,
    /// Usage ID `0x193`: "Orientation Extended: Geomagnetic Orientation"
    OrientationExtendedGeomagneticOrientation,
    /// Usage ID `0x194`: "Orientation Extended: Magnetometer"
    OrientationExtendedMagnetometer,
    /// Usage ID `0x224`: "Other"
    Other,
    /// Usage ID `0x225`: "Other: Custom"
    OtherCustom,
    /// Usage ID `0x226`: "Other: Generic"
    OtherGeneric,
    /// Usage ID `0x227`: "Other: Generic Enumerator"
    OtherGenericEnumerator,
    /// Usage ID `0x512`: "Event"
    Event,
    /// Usage ID `0x513`: "Event: Sensor State"
    EventSensorState,
    /// Usage ID `0x514`: "Event: Sensor Event"
    EventSensorEvent,
    /// Usage ID `0x768`: "Property"
    Property,
    /// Usage ID `0x769`: "Property: Friendly Name"
    PropertyFriendlyName,
    /// Usage ID `0x770`: "Property: Persistent Unique ID"
    PropertyPersistentUniqueID,
    /// Usage ID `0x771`: "Property: Sensor Status"
    PropertySensorStatus,
    /// Usage ID `0x772`: "Property: Minimum Report Interval"
    PropertyMinimumReportInterval,
    /// Usage ID `0x773`: "Property: Sensor Manufacturer"
    PropertySensorManufacturer,
    /// Usage ID `0x774`: "Property: Sensor Model"
    PropertySensorModel,
    /// Usage ID `0x775`: "Property: Sensor Serial Number"
    PropertySensorSerialNumber,
    /// Usage ID `0x776`: "Property: Sensor Description"
    PropertySensorDescription,
    /// Usage ID `0x777`: "Property: Sensor Connection Type"
    PropertySensorConnectionType,
    /// Usage ID `0x778`: "Property: Sensor Device Path"
    PropertySensorDevicePath,
    /// Usage ID `0x779`: "Property: Hardware Revision"
    PropertyHardwareRevision,
    /// Usage ID `0x780`: "Property: Firmware Version"
    PropertyFirmwareVersion,
    /// Usage ID `0x781`: "Property: Release Date"
    PropertyReleaseDate,
    /// Usage ID `0x782`: "Property: Report Interval"
    PropertyReportInterval,
    /// Usage ID `0x783`: "Property: Change Sensitivity Absolute"
    PropertyChangeSensitivityAbsolute,
    /// Usage ID `0x784`: "Property: Change Sensitivity Percent of Range"
    PropertyChangeSensitivityPercentofRange,
    /// Usage ID `0x785`: "Property: Change Sensitivity Percent Relative"
    PropertyChangeSensitivityPercentRelative,
    /// Usage ID `0x786`: "Property: Accuracy"
    PropertyAccuracy,
    /// Usage ID `0x787`: "Property: Resolution"
    PropertyResolution,
    /// Usage ID `0x788`: "Property: Maximum"
    PropertyMaximum,
    /// Usage ID `0x789`: "Property: Minimum"
    PropertyMinimum,
    /// Usage ID `0x790`: "Property: Reporting State"
    PropertyReportingState,
    /// Usage ID `0x794`: "Property: Maximum FIFO Events"
    PropertyMaximumFIFOEvents,
    /// Usage ID `0x795`: "Property: Report Latency"
    PropertyReportLatency,
    /// Usage ID `0x796`: "Property: Flush FIFO Events"
    PropertyFlushFIFOEvents,
    /// Usage ID `0x797`: "Property: Maximum Power Consumption"
    PropertyMaximumPowerConsumption,
    /// Usage ID `0x1024`: "Data Field: Location"
    DataFieldLocation,
    /// Usage ID `0x1026`: "Data Field: Altitude Antenna Sea Level"
    DataFieldAltitudeAntennaSeaLevel,
    /// Usage ID `0x1027`: "Data Field: Differential Reference Station ID"
    DataFieldDifferentialReferenceStationID,
    /// Usage ID `0x1028`: "Data Field: Altitude Ellipsoid Error"
    DataFieldAltitudeEllipsoidError,
    /// Usage ID `0x1029`: "Data Field: Altitude Ellipsoid"
    DataFieldAltitudeEllipsoid,
    /// Usage ID `0x1030`: "Data Field: Altitude Sea Level Error"
    DataFieldAltitudeSeaLevelError,
    /// Usage ID `0x1031`: "Data Field: Altitude Sea Level"
    DataFieldAltitudeSeaLevel,
    /// Usage ID `0x1032`: "Data Field: Differential GPS Data Age"
    DataFieldDifferentialGPSDataAge,
    /// Usage ID `0x1033`: "Data Field: Error Radius"
    DataFieldErrorRadius,
    /// Usage ID `0x1034`: "Data Field: Fix Quality"
    DataFieldFixQuality,
    /// Usage ID `0x1035`: "Data Field: Fix Type"
    DataFieldFixType,
    /// Usage ID `0x1036`: "Data Field: Geoidal Separation"
    DataFieldGeoidalSeparation,
    /// Usage ID `0x1037`: "Data Field: GPS Operation Mode"
    DataFieldGPSOperationMode,
    /// Usage ID `0x1038`: "Data Field: GPS Selection Mode"
    DataFieldGPSSelectionMode,
    /// Usage ID `0x1039`: "Data Field: GPS Status"
    DataFieldGPSStatus,
    /// Usage ID `0x1040`: "Data Field: Position Dilution of Precision"
    DataFieldPositionDilutionofPrecision,
    /// Usage ID `0x1041`: "Data Field: Horizontal Dilution of Precision"
    DataFieldHorizontalDilutionofPrecision,
    /// Usage ID `0x1042`: "Data Field: Vertical Dilution of Precision"
    DataFieldVerticalDilutionofPrecision,
    /// Usage ID `0x1043`: "Data Field: Latitude"
    DataFieldLatitude,
    /// Usage ID `0x1044`: "Data Field: Longitude"
    DataFieldLongitude,
    /// Usage ID `0x1045`: "Data Field: True Heading"
    DataFieldTrueHeading,
    /// Usage ID `0x1046`: "Data Field: Magnetic Heading"
    DataFieldMagneticHeading,
    /// Usage ID `0x1047`: "Data Field: Magnetic Variation"
    DataFieldMagneticVariation,
    /// Usage ID `0x1048`: "Data Field: Speed"
    DataFieldSpeed,
    /// Usage ID `0x1049`: "Data Field: Satellites in View"
    DataFieldSatellitesinView,
    /// Usage ID `0x1050`: "Data Field: Satellites in View Azimuth"
    DataFieldSatellitesinViewAzimuth,
    /// Usage ID `0x1051`: "Data Field: Satellites in View Elevation"
    DataFieldSatellitesinViewElevation,
    /// Usage ID `0x1052`: "Data Field: Satellites in View IDs"
    DataFieldSatellitesinViewIDs,
    /// Usage ID `0x1053`: "Data Field: Satellites in View PRNs"
    DataFieldSatellitesinViewPRNs,
    /// Usage ID `0x1054`: "Data Field: Satellites in View S/N Ratios"
    DataFieldSatellitesinViewSNRatios,
    /// Usage ID `0x1055`: "Data Field: Satellites Used Count"
    DataFieldSatellitesUsedCount,
    /// Usage ID `0x1056`: "Data Field: Satellites Used PRNs"
    DataFieldSatellitesUsedPRNs,
    /// Usage ID `0x1057`: "Data Field: NMEA Sentence"
    DataFieldNMEASentence,
    /// Usage ID `0x1058`: "Data Field: Address Line 1"
    DataFieldAddressLine1,
    /// Usage ID `0x1059`: "Data Field: Address Line 2"
    DataFieldAddressLine2,
    /// Usage ID `0x1060`: "Data Field: City"
    DataFieldCity,
    /// Usage ID `0x1061`: "Data Field: State or Province"
    DataFieldStateorProvince,
    /// Usage ID `0x1062`: "Data Field: Country or Region"
    DataFieldCountryorRegion,
    /// Usage ID `0x1063`: "Data Field: Postal Code"
    DataFieldPostalCode,
    /// Usage ID `0x1066`: "Property: Location"
    PropertyLocation,
    /// Usage ID `0x1067`: "Property: Location Desired Accuracy"
    PropertyLocationDesiredAccuracy,
    /// Usage ID `0x1072`: "Data Field: Environmental"
    DataFieldEnvironmental,
    /// Usage ID `0x1073`: "Data Field: Atmospheric Pressure"
    DataFieldAtmosphericPressure,
    /// Usage ID `0x1075`: "Data Field: Relative Humidity"
    DataFieldRelativeHumidity,
    /// Usage ID `0x1076`: "Data Field: Temperature"
    DataFieldTemperature,
    /// Usage ID `0x1077`: "Data Field: Wind Direction"
    DataFieldWindDirection,
    /// Usage ID `0x1078`: "Data Field: Wind Speed"
    DataFieldWindSpeed,
    /// Usage ID `0x1079`: "Data Field: Air Quality Index"
    DataFieldAirQualityIndex,
    /// Usage ID `0x1080`: "Data Field: Equivalent CO2"
    DataFieldEquivalentCO2,
    /// Usage ID `0x1081`: "Data Field: Volatile Organic Compound Concentration"
    DataFieldVolatileOrganicCompoundConcentration,
    /// Usage ID `0x1082`: "Data Field: Object Presence"
    DataFieldObjectPresence,
    /// Usage ID `0x1083`: "Data Field: Object Proximity Range"
    DataFieldObjectProximityRange,
    /// Usage ID `0x1084`: "Data Field: Object Proximity Out of Range"
    DataFieldObjectProximityOutofRange,
    /// Usage ID `0x1088`: "Property: Environmental"
    PropertyEnvironmental,
    /// Usage ID `0x1089`: "Property: Reference Pressure"
    PropertyReferencePressure,
    /// Usage ID `0x1104`: "Data Field: Motion"
    DataFieldMotion,
    /// Usage ID `0x1105`: "Data Field: Motion State"
    DataFieldMotionState,
    /// Usage ID `0x1106`: "Data Field: Acceleration"
    DataFieldAcceleration,
    /// Usage ID `0x1107`: "Data Field: Acceleration Axis X"
    DataFieldAccelerationAxisX,
    /// Usage ID `0x1108`: "Data Field: Acceleration Axis Y"
    DataFieldAccelerationAxisY,
    /// Usage ID `0x1109`: "Data Field: Acceleration Axis Z"
    DataFieldAccelerationAxisZ,
    /// Usage ID `0x1110`: "Data Field: Angular Velocity"
    DataFieldAngularVelocity,
    /// Usage ID `0x1111`: "Data Field: Angular Velocity about X Axis"
    DataFieldAngularVelocityaboutXAxis,
    /// Usage ID `0x1112`: "Data Field: Angular Velocity about Y Axis"
    DataFieldAngularVelocityaboutYAxis,
    /// Usage ID `0x1113`: "Data Field: Angular Velocity about Z Axis"
    DataFieldAngularVelocityaboutZAxis,
    /// Usage ID `0x1114`: "Data Field: Angular Position"
    DataFieldAngularPosition,
    /// Usage ID `0x1115`: "Data Field: Angular Position about X Axis"
    DataFieldAngularPositionaboutXAxis,
    /// Usage ID `0x1116`: "Data Field: Angular Position about Y Axis"
    DataFieldAngularPositionaboutYAxis,
    /// Usage ID `0x1117`: "Data Field: Angular Position about Z Axis"
    DataFieldAngularPositionaboutZAxis,
    /// Usage ID `0x1118`: "Data Field: Motion Speed"
    DataFieldMotionSpeed,
    /// Usage ID `0x1119`: "Data Field: Motion Intensity"
    DataFieldMotionIntensity,
    /// Usage ID `0x1136`: "Data Field: Orientation"
    DataFieldOrientation,
    /// Usage ID `0x1137`: "Data Field: Heading"
    DataFieldHeading,
    /// Usage ID `0x1138`: "Data Field: Heading X Axis"
    DataFieldHeadingXAxis,
    /// Usage ID `0x16499`: "Data Field: Heading Y Axis"
    DataFieldHeadingYAxis,
    /// Usage ID `0x1140`: "Data Field: Heading Z Axis"
    DataFieldHeadingZAxis,
    /// Usage ID `0x1141`: "Data Field: Heading Compensated Magnetic North"
    DataFieldHeadingCompensatedMagneticNorth,
    /// Usage ID `0x1142`: "Data Field: Heading Compensated True North"
    DataFieldHeadingCompensatedTrueNorth,
    /// Usage ID `0x1143`: "Data Field: Heading Magnetic North"
    DataFieldHeadingMagneticNorth,
    /// Usage ID `0x1144`: "Data Field: Heading True North"
    DataFieldHeadingTrueNorth,
    /// Usage ID `0x1145`: "Data Field: Distance"
    DataFieldDistance,
    /// Usage ID `0x1146`: "Data Field: Distance X Axis"
    DataFieldDistanceXAxis,
    /// Usage ID `0x1147`: "Data Field: Distance Y Axis"
    DataFieldDistanceYAxis,
    /// Usage ID `0x1148`: "Data Field: Distance Z Axis"
    DataFieldDistanceZAxis,
    /// Usage ID `0x1149`: "Data Field: Distance Out-of-Range"
    DataFieldDistanceOutofRange,
    /// Usage ID `0x1150`: "Data Field: Tilt"
    DataFieldTilt,
    /// Usage ID `0x1151`: "Data Field: Tilt X Axis"
    DataFieldTiltXAxis,
    /// Usage ID `0x1152`: "Data Field: Tilt Y Axis"
    DataFieldTiltYAxis,
    /// Usage ID `0x1153`: "Data Field: Tilt Z Axis"
    DataFieldTiltZAxis,
    /// Usage ID `0x1154`: "Data Field: Rotation Matrix"
    DataFieldRotationMatrix,
    /// Usage ID `0x1155`: "Data Field: Quaternion"
    DataFieldQuaternion,
    /// Usage ID `0x1156`: "Data Field: Magnetic Flux"
    DataFieldMagneticFlux,
    /// Usage ID `0x1157`: "Data Field: Magnetic Flux X Axis"
    DataFieldMagneticFluxXAxis,
    /// Usage ID `0x1158`: "Data Field: Magnetic Flux Y Axis"
    DataFieldMagneticFluxYAxis,
    /// Usage ID `0x1159`: "Data Field: Magnetic Flux Z Axis"
    DataFieldMagneticFluxZAxis,
    /// Usage ID `0x1160`: "Data Field: Magnetometer Accuracy"
    DataFieldMagnetometerAccuracy,
    /// Usage ID `0x1161`: "Data Field: Simple Orientation Direction"
    DataFieldSimpleOrientationDirection,
    /// Usage ID `0x1168`: "Data Field: Mechanical"
    DataFieldMechanical,
    /// Usage ID `0x1169`: "Data Field: Boolean Switch State"
    DataFieldBooleanSwitchState,
    /// Usage ID `0x1170`: "Data Field: Boolean Switch Array States"
    DataFieldBooleanSwitchArrayStates,
    /// Usage ID `0x1171`: "Data Field: Multivalue Switch Value"
    DataFieldMultivalueSwitchValue,
    /// Usage ID `0x1172`: "Data Field: Force"
    DataFieldForce,
    /// Usage ID `0x1173`: "Data Field: Absolute Pressure"
    DataFieldAbsolutePressure,
    /// Usage ID `0x1174`: "Data Field: Gauge Pressure"
    DataFieldGaugePressure,
    /// Usage ID `0x1175`: "Data Field: Strain"
    DataFieldStrain,
    /// Usage ID `0x1176`: "Data Field: Weight"
    DataFieldWeight,
    /// Usage ID `0x1184`: "Property: Mechanical"
    PropertyMechanical,
    /// Usage ID `0x1185`: "Property: Vibration State"
    PropertyVibrationState,
    /// Usage ID `0x1186`: "Property: Forward Vibration Speed"
    PropertyForwardVibrationSpeed,
    /// Usage ID `0x1187`: "Property: Backward Vibration Speed"
    PropertyBackwardVibrationSpeed,
    /// Usage ID `0x1200`: "Data Field: Biometric"
    DataFieldBiometric,
    /// Usage ID `0x1201`: "Data Field: Human Presence"
    DataFieldHumanPresence,
    /// Usage ID `0x1202`: "Data Field: Human Proximity Range"
    DataFieldHumanProximityRange,
    /// Usage ID `0x1203`: "Data Field: Human Proximity Out of Range"
    DataFieldHumanProximityOutofRange,
    /// Usage ID `0x1204`: "Data Field: Human Touch State"
    DataFieldHumanTouchState,
    /// Usage ID `0x1205`: "Data Field: Blood Pressure"
    DataFieldBloodPressure,
    /// Usage ID `0x1206`: "Data Field: Blood Pressure Diastolic"
    DataFieldBloodPressureDiastolic,
    /// Usage ID `0x1207`: "Data Field: Blood Pressure Systolic"
    DataFieldBloodPressureSystolic,
    /// Usage ID `0x1208`: "Data Field: Heart Rate"
    DataFieldHeartRate,
    /// Usage ID `0x1209`: "Data Field: Resting Heart Rate"
    DataFieldRestingHeartRate,
    /// Usage ID `0x1210`: "Data Field: Heartbeat Interval"
    DataFieldHeartbeatInterval,
    /// Usage ID `0x1211`: "Data Field: Respiratory Rate"
    DataFieldRespiratoryRate,
    /// Usage ID `0x1212`: "Data Field: SpO2"
    DataFieldSpO2,
    /// Usage ID `0x1232`: "Data Field: Light"
    DataFieldLight,
    /// Usage ID `0x1233`: "Data Field: Illuminance"
    DataFieldIlluminance,
    /// Usage ID `0x1234`: "Data Field: Color Temperature"
    DataFieldColorTemperature,
    /// Usage ID `0x1235`: "Data Field: Chromaticity"
    DataFieldChromaticity,
    /// Usage ID `0x1236`: "Data Field: Chromaticity X"
    DataFieldChromaticityX,
    /// Usage ID `0x1237`: "Data Field: Chromaticity Y"
    DataFieldChromaticityY,
    /// Usage ID `0x1238`: "Data Field: Consumer IR Sentence Receive"
    DataFieldConsumerIRSentenceReceive,
    /// Usage ID `0x1239`: "Data Field: Infrared Light"
    DataFieldInfraredLight,
    /// Usage ID `0x1240`: "Data Field: Red Light"
    DataFieldRedLight,
    /// Usage ID `0x1241`: "Data Field: Green Light"
    DataFieldGreenLight,
    /// Usage ID `0x1242`: "Data Field: Blue Light"
    DataFieldBlueLight,
    /// Usage ID `0x1243`: "Data Field: Ultraviolet A Light"
    DataFieldUltravioletALight,
    /// Usage ID `0x1244`: "Data Field: Ultraviolet B Light"
    DataFieldUltravioletBLight,
    /// Usage ID `0x1245`: "Data Field: Ultraviolet Index"
    DataFieldUltravioletIndex,
    /// Usage ID `0x1248`: "Property: Light"
    PropertyLight,
    /// Usage ID `0x1249`: "Property: Consumer IR Sentence Send"
    PropertyConsumerIRSentenceSend,
    /// Usage ID `0x1264`: "Data Field: Scanner"
    DataFieldScanner,
    /// Usage ID `0x1265`: "Data Field: RFID Tag 40 Bit"
    DataFieldRFIDTag40Bit,
    /// Usage ID `0x1266`: "Data Field: NFC Sentence Receive"
    DataFieldNFCSentenceReceive,
    /// Usage ID `0x1272`: "Property: Scanner"
    PropertyScanner,
    /// Usage ID `0x1273`: "Property: NFC Sentence Send"
    PropertyNFCSentenceSend,
    /// Usage ID `0x1280`: "Data Field: Electrical"
    DataFieldElectrical,
    /// Usage ID `0x1281`: "Data Field: Capacitance"
    DataFieldCapacitance,
    /// Usage ID `0x1282`: "Data Field: Current"
    DataFieldCurrent,
    /// Usage ID `0x1283`: "Data Field: Electrical Power"
    DataFieldElectricalPower,
    /// Usage ID `0x1284`: "Data Field: Inductance"
    DataFieldInductance,
    /// Usage ID `0x1285`: "Data Field: Resistance"
    DataFieldResistance,
    /// Usage ID `0x1286`: "Data Field: Voltage"
    DataFieldVoltage,
    /// Usage ID `0x1287`: "Data Field: Frequency"
    DataFieldFrequency,
    /// Usage ID `0x1288`: "Data Field: Period"
    DataFieldPeriod,
    /// Usage ID `0x1289`: "Data Field: Percent of Range"
    DataFieldPercentofRange,
    /// Usage ID `0x1312`: "Data Field: Time"
    DataFieldTime,
    /// Usage ID `0x1313`: "Data Field: Year"
    DataFieldYear,
    /// Usage ID `0x1314`: "Data Field: Month"
    DataFieldMonth,
    /// Usage ID `0x1315`: "Data Field: Day"
    DataFieldDay,
    /// Usage ID `0x1316`: "Data Field: Day of Week"
    DataFieldDayofWeek,
    /// Usage ID `0x1317`: "Data Field: Hour"
    DataFieldHour,
    /// Usage ID `0x1318`: "Data Field: Minute"
    DataFieldMinute,
    /// Usage ID `0x1319`: "Data Field: Second"
    DataFieldSecond,
    /// Usage ID `0x1320`: "Data Field: Millisecond"
    DataFieldMillisecond,
    /// Usage ID `0x1321`: "Data Field: Timestamp"
    DataFieldTimestamp,
    /// Usage ID `0x1322`: "Data Field: Julian Day of Year"
    DataFieldJulianDayofYear,
    /// Usage ID `0x1323`: "Data Field: Time Since System Boot"
    DataFieldTimeSinceSystemBoot,
    /// Usage ID `0x1328`: "Property: Time"
    PropertyTime,
    /// Usage ID `0x1329`: "Property: Time Zone Offset from UTC"
    PropertyTimeZoneOffsetfromUTC,
    /// Usage ID `0x1330`: "Property: Time Zone Name"
    PropertyTimeZoneName,
    /// Usage ID `0x1331`: "Property: Daylight Savings Time Observed"
    PropertyDaylightSavingsTimeObserved,
    /// Usage ID `0x1332`: "Property: Time Trim Adjustment"
    PropertyTimeTrimAdjustment,
    /// Usage ID `0x1333`: "Property: Arm Alarm"
    PropertyArmAlarm,
    /// Usage ID `0x1344`: "Data Field: Custom"
    DataFieldCustom,
    /// Usage ID `0x1345`: "Data Field: Custom Usage"
    DataFieldCustomUsage,
    /// Usage ID `0x1346`: "Data Field: Custom Boolean Array"
    DataFieldCustomBooleanArray,
    /// Usage ID `0x1347`: "Data Field: Custom Value"
    DataFieldCustomValue,
    /// Usage ID `0x1348`: "Data Field: Custom Value 1"
    DataFieldCustomValue1,
    /// Usage ID `0x1349`: "Data Field: Custom Value 2"
    DataFieldCustomValue2,
    /// Usage ID `0x1350`: "Data Field: Custom Value 3"
    DataFieldCustomValue3,
    /// Usage ID `0x1351`: "Data Field: Custom Value 4"
    DataFieldCustomValue4,
    /// Usage ID `0x1352`: "Data Field: Custom Value 5"
    DataFieldCustomValue5,
    /// Usage ID `0x1353`: "Data Field: Custom Value 6"
    DataFieldCustomValue6,
    /// Usage ID `0x1354`: "Data Field: Custom Value 7"
    DataFieldCustomValue7,
    /// Usage ID `0x1355`: "Data Field: Custom Value 8"
    DataFieldCustomValue8,
    /// Usage ID `0x1356`: "Data Field: Custom Value 9"
    DataFieldCustomValue9,
    /// Usage ID `0x1357`: "Data Field: Custom Value 10"
    DataFieldCustomValue10,
    /// Usage ID `0x1358`: "Data Field: Custom Value 11"
    DataFieldCustomValue11,
    /// Usage ID `0x1359`: "Data Field: Custom Value 12"
    DataFieldCustomValue12,
    /// Usage ID `0x1360`: "Data Field: Custom Value 13"
    DataFieldCustomValue13,
    /// Usage ID `0x1361`: "Data Field: Custom Value 14"
    DataFieldCustomValue14,
    /// Usage ID `0x1362`: "Data Field: Custom Value 15"
    DataFieldCustomValue15,
    /// Usage ID `0x1363`: "Data Field: Custom Value 16"
    DataFieldCustomValue16,
    /// Usage ID `0x1364`: "Data Field: Custom Value 17"
    DataFieldCustomValue17,
    /// Usage ID `0x1365`: "Data Field: Custom Value 18"
    DataFieldCustomValue18,
    /// Usage ID `0x1366`: "Data Field: Custom Value 19"
    DataFieldCustomValue19,
    /// Usage ID `0x1367`: "Data Field: Custom Value 20"
    DataFieldCustomValue20,
    /// Usage ID `0x1368`: "Data Field: Custom Value 21"
    DataFieldCustomValue21,
    /// Usage ID `0x1369`: "Data Field: Custom Value 22"
    DataFieldCustomValue22,
    /// Usage ID `0x1370`: "Data Field: Custom Value 23"
    DataFieldCustomValue23,
    /// Usage ID `0x1371`: "Data Field: Custom Value 24"
    DataFieldCustomValue24,
    /// Usage ID `0x1372`: "Data Field: Custom Value 25"
    DataFieldCustomValue25,
    /// Usage ID `0x1373`: "Data Field: Custom Value 26"
    DataFieldCustomValue26,
    /// Usage ID `0x1374`: "Data Field: Custom Value 27"
    DataFieldCustomValue27,
    /// Usage ID `0x1375`: "Data Field: Custom Value 28"
    DataFieldCustomValue28,
    /// Usage ID `0x1376`: "Data Field: Generic"
    DataFieldGeneric,
    /// Usage ID `0x1377`: "Data Field: Generic GUID or PROPERTYKEY"
    DataFieldGenericGUIDorPROPERTYKEY,
    /// Usage ID `0x1378`: "Data Field: Generic Category GUID"
    DataFieldGenericCategoryGUID,
    /// Usage ID `0x1379`: "Data Field: Generic Type GUID"
    DataFieldGenericTypeGUID,
    /// Usage ID `0x1380`: "Data Field: Generic Event PROPERTYKEY"
    DataFieldGenericEventPROPERTYKEY,
    /// Usage ID `0x1381`: "Data Field: Generic Property PROPERTYKEY"
    DataFieldGenericPropertyPROPERTYKEY,
    /// Usage ID `0x1382`: "Data Field: Generic Data Field PROPERTYKEY"
    DataFieldGenericDataFieldPROPERTYKEY,
    /// Usage ID `0x1383`: "Data Field: Generic Event"
    DataFieldGenericEvent,
    /// Usage ID `0x1384`: "Data Field: Generic Property"
    DataFieldGenericProperty,
    /// Usage ID `0x1385`: "Data Field: Generic Data Field"
    DataFieldGenericDataField,
    /// Usage ID `0x1386`: "Data Field: Enumerator Table Row Index"
    DataFieldEnumeratorTableRowIndex,
    /// Usage ID `0x1387`: "Data Field: Enumerator Table Row Count"
    DataFieldEnumeratorTableRowCount,
    /// Usage ID `0x1388`: "Data Field: Generic GUID or PROPERTYKEY kind"
    DataFieldGenericGUIDorPROPERTYKEYkind,
    /// Usage ID `0x1389`: "Data Field: Generic GUID"
    DataFieldGenericGUID,
    /// Usage ID `0x1390`: "Data Field: Generic PROPERTYKEY"
    DataFieldGenericPROPERTYKEY,
    /// Usage ID `0x1391`: "Data Field: Generic Top Level Collection ID"
    DataFieldGenericTopLevelCollectionID,
    /// Usage ID `0x1392`: "Data Field: Generic Report ID"
    DataFieldGenericReportID,
    /// Usage ID `0x1393`: "Data Field: Generic Report Item Position Index"
    DataFieldGenericReportItemPositionIndex,
    /// Usage ID `0x1394`: "Data Field: Generic Firmware VARTYPE"
    DataFieldGenericFirmwareVARTYPE,
    /// Usage ID `0x1395`: "Data Field: Generic Unit of Measure"
    DataFieldGenericUnitofMeasure,
    /// Usage ID `0x1396`: "Data Field: Generic Unit Exponent"
    DataFieldGenericUnitExponent,
    /// Usage ID `0x1397`: "Data Field: Generic Report Size"
    DataFieldGenericReportSize,
    /// Usage ID `0x1398`: "Data Field: Generic Report Count"
    DataFieldGenericReportCount,
    /// Usage ID `0x1408`: "Property: Generic"
    PropertyGeneric,
    /// Usage ID `0x1409`: "Property: Enumerator Table Row Index"
    PropertyEnumeratorTableRowIndex,
    /// Usage ID `0x1410`: "Property: Enumerator Table Row Count"
    PropertyEnumeratorTableRowCount,
    /// Usage ID `0x1424`: "Data Field: Personal Activity"
    DataFieldPersonalActivity,
    /// Usage ID `0x1425`: "Data Field: Activity Type"
    DataFieldActivityType,
    /// Usage ID `0x1426`: "Data Field: Activity State"
    DataFieldActivityState,
    /// Usage ID `0x1427`: "Data Field: Device Position"
    DataFieldDevicePosition,
    /// Usage ID `0x1428`: "Data Field: Step Count"
    DataFieldStepCount,
    /// Usage ID `0x1429`: "Data Field: Step Count Reset"
    DataFieldStepCountReset,
    /// Usage ID `0x1430`: "Data Field: Step Duration"
    DataFieldStepDuration,
    /// Usage ID `0x1431`: "Data Field: Step Type"
    DataFieldStepType,
    /// Usage ID `0x1440`: "Property: Minimum Activity Detection Interval"
    PropertyMinimumActivityDetectionInterval,
    /// Usage ID `0x1441`: "Property: Supported Activity Types"
    PropertySupportedActivityTypes,
    /// Usage ID `0x1442`: "Property: Subscribed Activity Types"
    PropertySubscribedActivityTypes,
    /// Usage ID `0x1443`: "Property: Supported Step Types"
    PropertySupportedStepTypes,
    /// Usage ID `0x1444`: "Property: Subscribed Step Types"
    PropertySubscribedStepTypes,
    /// Usage ID `0x1445`: "Property: Floor Height"
    PropertyFloorHeight,
    /// Usage ID `0x1456`: "Data Field: Custom Type ID"
    DataFieldCustomTypeID,
    /// Usage ID `0x2048`: "Sensor State: Undefined"
    SensorStateUndefined,
    /// Usage ID `0x2049`: "Sensor State: Ready"
    SensorStateReady,
    /// Usage ID `0x2050`: "Sensor State: Not Available"
    SensorStateNotAvailable,
    /// Usage ID `0x2051`: "Sensor State: No Data Sel"
    SensorStateNoDataSel,
    /// Usage ID `0x2052`: "Sensor State: Initializing"
    SensorStateInitializing,
    /// Usage ID `0x2053`: "Sensor State: Access Denied"
    SensorStateAccessDenied,
    /// Usage ID `0x2054`: "Sensor State: Error"
    SensorStateError,
    /// Usage ID `0x2064`: "Sensor Event: Unknown"
    SensorEventUnknown,
    /// Usage ID `0x2065`: "Sensor Event: State Changed"
    SensorEventStateChanged,
    /// Usage ID `0x2066`: "Sensor Event: Property Changed"
    SensorEventPropertyChanged,
    /// Usage ID `0x2067`: "Sensor Event: Data Updated"
    SensorEventDataUpdated,
    /// Usage ID `0x2068`: "Sensor Event: Poll Response"
    SensorEventPollResponse,
    /// Usage ID `0x2069`: "Sensor Event: Change Sensitivity"
    SensorEventChangeSensitivity,
    /// Usage ID `0x2070`: "Sensor Event: Range Maximum Reached"
    SensorEventRangeMaximumReached,
    /// Usage ID `0x2071`: "Sensor Event: Range Minimum Reached"
    SensorEventRangeMinimumReached,
    /// Usage ID `0x2072`: "Sensor Event: High Threshold Cross Upward"
    SensorEventHighThresholdCrossUpward,
    /// Usage ID `0x2073`: "Sensor Event: High Threshold Cross Downward"
    SensorEventHighThresholdCrossDownward,
    /// Usage ID `0x2074`: "Sensor Event: Low Threshold Cross Upward"
    SensorEventLowThresholdCrossUpward,
    /// Usage ID `0x2075`: "Sensor Event: Low Threshold Cross Downward"
    SensorEventLowThresholdCrossDownward,
    /// Usage ID `0x2076`: "Sensor Event: Zero Threshold Cross Upward"
    SensorEventZeroThresholdCrossUpward,
    /// Usage ID `0x2077`: "Sensor Event: Zero Threshold Cross Downward"
    SensorEventZeroThresholdCrossDownward,
    /// Usage ID `0x2078`: "Sensor Event: Period Exceeded"
    SensorEventPeriodExceeded,
    /// Usage ID `0x2079`: "Sensor Event: Frequency Exceeded"
    SensorEventFrequencyExceeded,
    /// Usage ID `0x2080`: "Sensor Event: Complex Trigger"
    SensorEventComplexTrigger,
    /// Usage ID `0x2096`: "Connection Type: PC Integrated"
    ConnectionTypePCIntegrated,
    /// Usage ID `0x2097`: "Connection Type: PC Attached"
    ConnectionTypePCAttached,
    /// Usage ID `0x2098`: "Connection Type: PC External"
    ConnectionTypePCExternal,
    /// Usage ID `0x2112`: "Reporting State: Report No Events"
    ReportingStateReportNoEvents,
    /// Usage ID `0x2113`: "Reporting State: Report All Events"
    ReportingStateReportAllEvents,
    /// Usage ID `0x2114`: "Reporting State: Report Threshold Events"
    ReportingStateReportThresholdEvents,
    /// Usage ID `0x2115`: "Reporting State: Wake On No Events"
    ReportingStateWakeOnNoEvents,
    /// Usage ID `0x2116`: "Reporting State: Wake On All Events"
    ReportingStateWakeOnAllEvents,
    /// Usage ID `0x2117`: "Reporting State: Wake On Threshold Events"
    ReportingStateWakeOnThresholdEvents,
    /// Usage ID `0x791`: "Property: Sampling Rate"
    PropertySamplingRate,
    /// Usage ID `0x792`: "Property: Response Curve"
    PropertyResponseCurve,
    /// Usage ID `0x793`: "Property: Power State"
    PropertyPowerState,
    /// Usage ID `0x2128`: "Power State: Undefined"
    PowerStateUndefined,
    /// Usage ID `0x2129`: "Power State: D0 Full Power"
    PowerStateD0FullPower,
    /// Usage ID `0x2130`: "Power State: D1 Low Power"
    PowerStateD1LowPower,
    /// Usage ID `0x2131`: "Power State: D2 Standby Power with Wakeup"
    PowerStateD2StandbyPowerwithWakeup,
    /// Usage ID `0x2132`: "Power State: D3 Sleep with Wakeup"
    PowerStateD3SleepwithWakeup,
    /// Usage ID `0x2133`: "Power State: D4 Power Off"
    PowerStateD4PowerOff,
    /// Usage ID `0x2144`: "Accuracy: Default"
    AccuracyDefault,
    /// Usage ID `0x2145`: "Accuracy: High"
    AccuracyHigh,
    /// Usage ID `0x2146`: "Accuracy: Medium"
    AccuracyMedium,
    /// Usage ID `0x2147`: "Accuracy: Low"
    AccuracyLow,
    /// Usage ID `0x2160`: "Fix Quality: No Fix"
    FixQualityNoFix,
    /// Usage ID `0x2161`: "Fix Quality: GPS"
    FixQualityGPS,
    /// Usage ID `0x2162`: "Fix Quality: DGPS"
    FixQualityDGPS,
    /// Usage ID `0x1035`: "Data Field: Fix Type NAry 1.10"
    DataFieldFixTypeNAry110,
    /// Usage ID `0x2176`: "Fix Type: No Fix"
    FixTypeNoFix,
    /// Usage ID `0x2177`: "Fix Type: GPS SPS Mode, Fix Valid"
    FixTypeGPSSPSModeFixValid,
    /// Usage ID `0x2178`: "Fix Type: DGPS SPS Mode, Fix Valid"
    FixTypeDGPSSPSModeFixValid,
    /// Usage ID `0x2179`: "Fix Type: GPS PPS Mode, Fix Valid"
    FixTypeGPSPPSModeFixValid,
    /// Usage ID `0x2180`: "Fix Type: Real Time Kinematic"
    FixTypeRealTimeKinematic,
    /// Usage ID `0x2181`: "Fix Type: Float RTK"
    FixTypeFloatRTK,
    /// Usage ID `0x2182`: "Fix Type: Estimated (dead reckoned)"
    FixTypeEstimateddeadreckoned,
    /// Usage ID `0x2183`: "Fix Type: Manual Input Mode"
    FixTypeManualInputMode,
    /// Usage ID `0x2184`: "Fix Type: Simulator Mode"
    FixTypeSimulatorMode,
    /// Usage ID `0x2192`: "GPS Operation Mode: Manual"
    GPSOperationModeManual,
    /// Usage ID `0x2193`: "GPS Operation Mode: Automatic"
    GPSOperationModeAutomatic,
    /// Usage ID `0x2208`: "GPS Selection Mode: Autonomous"
    GPSSelectionModeAutonomous,
    /// Usage ID `0x2209`: "GPS Selection Mode: DGPS"
    GPSSelectionModeDGPS,
    /// Usage ID `0x2210`: "GPS Selection Mode: Estimated (dead reckoned)"
    GPSSelectionModeEstimateddeadreckoned,
    /// Usage ID `0x2211`: "GPS Selection Mode: Manual Input"
    GPSSelectionModeManualInput,
    /// Usage ID `0x2212`: "GPS Selection Mode: Simulator"
    GPSSelectionModeSimulator,
    /// Usage ID `0x2213`: "GPS Selection Mode: Data Not Valid"
    GPSSelectionModeDataNotValid,
    /// Usage ID `0x2224`: "GPS Status: Data Valid"
    GPSStatusDataValid,
    /// Usage ID `0x2225`: "GPS Status: Data Not Valid"
    GPSStatusDataNotValid,
    /// Usage ID `0x2240`: "Day of Week: Sunday"
    DayofWeekSunday,
    /// Usage ID `0x2241`: "Day of Week: Monday"
    DayofWeekMonday,
    /// Usage ID `0x2242`: "Day of Week: Tuesday"
    DayofWeekTuesday,
    /// Usage ID `0x2243`: "Day of Week: Wednesday"
    DayofWeekWednesday,
    /// Usage ID `0x2244`: "Day of Week: Thursday"
    DayofWeekThursday,
    /// Usage ID `0x2245`: "Day of Week: Friday"
    DayofWeekFriday,
    /// Usage ID `0x2246`: "Day of Week: Saturday"
    DayofWeekSaturday,
    /// Usage ID `0x2256`: "Kind: Category"
    KindCategory,
    /// Usage ID `0x2257`: "Kind: Type"
    KindType,
    /// Usage ID `0x2258`: "Kind: Event"
    KindEvent,
    /// Usage ID `0x2259`: "Kind: Property"
    KindProperty,
    /// Usage ID `0x2260`: "Kind: Data Field"
    KindDataField,
    /// Usage ID `0x2272`: "Magnetometer Accuracy: Low"
    MagnetometerAccuracyLow,
    /// Usage ID `0x2273`: "Magnetometer Accuracy: Medium"
    MagnetometerAccuracyMedium,
    /// Usage ID `0x2274`: "Magnetometer Accuracy: High"
    MagnetometerAccuracyHigh,
    /// Usage ID `0x2288`: "Simple Orientation Direction: Not Rotated"
    SimpleOrientationDirectionNotRotated,
    /// Usage ID `0x2289`: "Simple Orientation Direction: Rotated 90 Degrees"
    SimpleOrientationDirectionRotated90Degrees,
    /// Usage ID `0x2290`: "Simple Orientation Direction:  Rotated 180 Degrees"
    SimpleOrientationDirectionRotated180Degrees,
    /// Usage ID `0x2291`: "Simple Orientation Direction:  Rotated 270 Degrees"
    SimpleOrientationDirectionRotated270Degrees,
    /// Usage ID `0x2292`: "Simple Orientation Direction: Face Up"
    SimpleOrientationDirectionFaceUp,
    /// Usage ID `0x2293`: "Simple Orientation Direction: Face Down"
    SimpleOrientationDirectionFaceDown,
    /// Usage ID `0x2304`: "VT_NULL: Empty"
    VT_NULLEmpty,
    /// Usage ID `0x2305`: "VT_BOOL: Boolean"
    VT_BOOLBoolean,
    /// Usage ID `0x2306`: "VT_UI1: Byte"
    VT_UI1Byte,
    /// Usage ID `0x2307`: "VT_I1: Character"
    VT_I1Character,
    /// Usage ID `0x2308`: "VT_UI2: Unsigned Short"
    VT_UI2UnsignedShort,
    /// Usage ID `0x2309`: "VT_I2: Short"
    VT_I2Short,
    /// Usage ID `0x2310`: "VT_UI4: Unsigned Long"
    VT_UI4UnsignedLong,
    /// Usage ID `0x2311`: "VT_I4: Long"
    VT_I4Long,
    /// Usage ID `0x2312`: "VT_UI8: Unsigned Long Long"
    VT_UI8UnsignedLongLong,
    /// Usage ID `0x2313`: "VT_I8: Long Long"
    VT_I8LongLong,
    /// Usage ID `0x2314`: "VT_R4: Float"
    VT_R4Float,
    /// Usage ID `0x2315`: "VT_R8: Double"
    VT_R8Double,
    /// Usage ID `0x2316`: "VT_WSTR: Wide String"
    VT_WSTRWideString,
    /// Usage ID `0x2317`: "VT_STR: Narrow String"
    VT_STRNarrowString,
    /// Usage ID `0x2318`: "VT_CLSID: Guid"
    VT_CLSIDGuid,
    /// Usage ID `0x2319`: "VT_VECTOR|VT_UI1: Opaque Structure"
    VT_VECTORVT_UI1OpaqueStructure,
    /// Usage ID `0x2320`: "VT_F16E0: HID 16-bit Float with Unit Exponent 0"
    VT_F16E0HID16bitFloatwithUnitExponent0,
    /// Usage ID `0x2321`: "VT_F16E1: HID 16-bit Float with Unit Exponent 1"
    VT_F16E1HID16bitFloatwithUnitExponent1,
    /// Usage ID `0x2322`: "VT_F16E2: HID 16-bit Float with Unit Exponent 2"
    VT_F16E2HID16bitFloatwithUnitExponent2,
    /// Usage ID `0x2323`: "VT_F16E3: HID 16-bit Float with Unit Exponent 3"
    VT_F16E3HID16bitFloatwithUnitExponent3,
    /// Usage ID `0x2324`: "VT_F16E4: HID 16-bit Float with Unit Exponent 4"
    VT_F16E4HID16bitFloatwithUnitExponent4,
    /// Usage ID `0x2325`: "VT_F16E5: HID 16-bit Float with Unit Exponent 5"
    VT_F16E5HID16bitFloatwithUnitExponent5,
    /// Usage ID `0x2326`: "VT_F16E6: HID 16-bit Float with Unit Exponent 6"
    VT_F16E6HID16bitFloatwithUnitExponent6,
    /// Usage ID `0x2327`: "VT_F16E7: HID 16-bit Float with Unit Exponent 7"
    VT_F16E7HID16bitFloatwithUnitExponent7,
    /// Usage ID `0x2328`: "VT_F16E8: HID 16-bit Float with Unit Exponent 8"
    VT_F16E8HID16bitFloatwithUnitExponent8,
    /// Usage ID `0x2329`: "VT_F16E9: HID 16-bit Float with Unit Exponent 9"
    VT_F16E9HID16bitFloatwithUnitExponent9,
    /// Usage ID `0x2330`: "VT_F16EA: HID 16-bit Float with Unit Exponent A"
    VT_F16EAHID16bitFloatwithUnitExponentA,
    /// Usage ID `0x2331`: "VT_F16EB: HID 16-bit Float with Unit Exponent B"
    VT_F16EBHID16bitFloatwithUnitExponentB,
    /// Usage ID `0x2332`: "VT_F16EC: HID 16-bit Float with Unit Exponent C"
    VT_F16ECHID16bitFloatwithUnitExponentC,
    /// Usage ID `0x2333`: "VT_F16ED: HID 16-bit Float with Unit Exponent D"
    VT_F16EDHID16bitFloatwithUnitExponentD,
    /// Usage ID `0x2334`: "VT_F16EE: HID 16-bit Float with Unit Exponent E"
    VT_F16EEHID16bitFloatwithUnitExponentE,
    /// Usage ID `0x2335`: "VT_F16EF: HID 16-bit Float with Unit Exponent F"
    VT_F16EFHID16bitFloatwithUnitExponentF,
    /// Usage ID `0x2336`: "VT_F32E0: HID 32-bit Float with Unit Exponent 0"
    VT_F32E0HID32bitFloatwithUnitExponent0,
    /// Usage ID `0x2337`: "VT_F32E1: HID 32-bit Float with Unit Exponent 1"
    VT_F32E1HID32bitFloatwithUnitExponent1,
    /// Usage ID `0x2338`: "VT_F32E2: HID 32-bit Float with Unit Exponent 2"
    VT_F32E2HID32bitFloatwithUnitExponent2,
    /// Usage ID `0x2339`: "VT_F32E3: HID 32-bit Float with Unit Exponent 3"
    VT_F32E3HID32bitFloatwithUnitExponent3,
    /// Usage ID `0x2340`: "VT_F32E4: HID 32-bit Float with Unit Exponent 4"
    VT_F32E4HID32bitFloatwithUnitExponent4,
    /// Usage ID `0x2341`: "VT_F32E5: HID 32-bit Float with Unit Exponent 5"
    VT_F32E5HID32bitFloatwithUnitExponent5,
    /// Usage ID `0x2342`: "VT_F32E6: HID 32-bit Float with Unit Exponent 6"
    VT_F32E6HID32bitFloatwithUnitExponent6,
    /// Usage ID `0x2343`: "VT_F32E7: HID 32-bit Float with Unit Exponent 7"
    VT_F32E7HID32bitFloatwithUnitExponent7,
    /// Usage ID `0x2344`: "VT_F32E8: HID 32-bit Float with Unit Exponent 8"
    VT_F32E8HID32bitFloatwithUnitExponent8,
    /// Usage ID `0x2345`: "VT_F32E9: HID 32-bit Float with Unit Exponent 9"
    VT_F32E9HID32bitFloatwithUnitExponent9,
    /// Usage ID `0x2346`: "VT_F32EA: HID 32-bit Float with Unit Exponent A"
    VT_F32EAHID32bitFloatwithUnitExponentA,
    /// Usage ID `0x2347`: "VT_F32EB: HID 32-bit Float with Unit Exponent B"
    VT_F32EBHID32bitFloatwithUnitExponentB,
    /// Usage ID `0x2348`: "VT_F32EC: HID 32-bit Float with Unit Exponent C"
    VT_F32ECHID32bitFloatwithUnitExponentC,
    /// Usage ID `0x2349`: "VT_F32ED: HID 32-bit Float with Unit Exponent D"
    VT_F32EDHID32bitFloatwithUnitExponentD,
    /// Usage ID `0x2350`: "VT_F32EE: HID 32-bit Float with Unit Exponent E"
    VT_F32EEHID32bitFloatwithUnitExponentE,
    /// Usage ID `0x2351`: "VT_F32EF: HID 32-bit Float with Unit Exponent F"
    VT_F32EFHID32bitFloatwithUnitExponentF,
    /// Usage ID `0x2352`: "Activity Type: Unknown"
    ActivityTypeUnknown,
    /// Usage ID `0x2353`: "Activity Type: Stationary"
    ActivityTypeStationary,
    /// Usage ID `0x2354`: "Activity Type: Fidgeting"
    ActivityTypeFidgeting,
    /// Usage ID `0x2355`: "Activity Type: Walking"
    ActivityTypeWalking,
    /// Usage ID `0x2356`: "Activity Type: Running"
    ActivityTypeRunning,
    /// Usage ID `0x2357`: "Activity Type: In Vehicle"
    ActivityTypeInVehicle,
    /// Usage ID `0x2358`: "Activity Type: Biking"
    ActivityTypeBiking,
    /// Usage ID `0x2359`: "Activity Type: Idle"
    ActivityTypeIdle,
    /// Usage ID `0x2368`: "Unit: Not Specified"
    UnitNotSpecified,
    /// Usage ID `0x2369`: "Unit: Lux"
    UnitLux,
    /// Usage ID `0x2370`: "Unit: Degrees Kelvin"
    UnitDegreesKelvin,
    /// Usage ID `0x2371`: "Unit: Degrees Celsius"
    UnitDegreesCelsius,
    /// Usage ID `0x2372`: "Unit: Pascal"
    UnitPascal,
    /// Usage ID `0x2373`: "Unit: Newton"
    UnitNewton,
    /// Usage ID `0x2374`: "Unit: Meters/Second"
    UnitMetersSecond,
    /// Usage ID `0x2375`: "Unit: Kilogram"
    UnitKilogram,
    /// Usage ID `0x2376`: "Unit: Meter"
    UnitMeter,
    /// Usage ID `0x2377`: "Unit: Meters/Second/Second"
    UnitMetersSecondSecond,
    /// Usage ID `0x2378`: "Unit: Farad"
    UnitFarad,
    /// Usage ID `0x2379`: "Unit: Ampere"
    UnitAmpere,
    /// Usage ID `0x2380`: "Unit: Watt"
    UnitWatt,
    /// Usage ID `0x2381`: "Unit: Henry"
    UnitHenry,
    /// Usage ID `0x2382`: "Unit: Ohm"
    UnitOhm,
    /// Usage ID `0x2383`: "Unit: Volt"
    UnitVolt,
    /// Usage ID `0x2384`: "Unit: Hertz"
    UnitHertz,
    /// Usage ID `0x2385`: "Unit: Bar"
    UnitBar,
    /// Usage ID `0x2386`: "Unit: Degrees Anti-clockwise"
    UnitDegreesAnticlockwise,
    /// Usage ID `0x2387`: "Unit: Degrees Clockwise"
    UnitDegreesClockwise,
    /// Usage ID `0x2388`: "Unit: Degrees"
    UnitDegrees,
    /// Usage ID `0x2389`: "Unit: Degrees/Second"
    UnitDegreesSecond,
    /// Usage ID `0x2390`: "Unit: Degrees/Second/Second"
    UnitDegreesSecondSecond,
    /// Usage ID `0x2391`: "Unit: Knot"
    UnitKnot,
    /// Usage ID `0x2392`: "Unit: Percent"
    UnitPercent,
    /// Usage ID `0x2393`: "Unit: Second"
    UnitSecond,
    /// Usage ID `0x2394`: "Unit: Millisecond"
    UnitMillisecond,
    /// Usage ID `0x2395`: "Unit: G"
    UnitG,
    /// Usage ID `0x2396`: "Unit: Bytes"
    UnitBytes,
    /// Usage ID `0x2397`: "Unit: Milligauss"
    UnitMilligauss,
    /// Usage ID `0x2398`: "Unit: Bits"
    UnitBits,
    /// Usage ID `0x2400`: "Activity State: No State Change"
    ActivityStateNoStateChange,
    /// Usage ID `0x2401`: "Activity State: Start Activity"
    ActivityStateStartActivity,
    /// Usage ID `0x2402`: "Activity State: End Activity"
    ActivityStateEndActivity,
    /// Usage ID `0x2416`: "Exponent 0: 1"
    Exponent01,
    /// Usage ID `0x2417`: "Exponent 1: 10"
    Exponent110,
    /// Usage ID `0x2418`: "Exponent 2: 100"
    Exponent2100,
    /// Usage ID `0x2419`: "Exponent 3: 1 000"
    Exponent31000,
    /// Usage ID `0x2420`: "Exponent 4: 10 000"
    Exponent410000,
    /// Usage ID `0x2421`: "Exponent 5: 100 000"
    Exponent5100000,
    /// Usage ID `0x2422`: "Exponent 6: 1 000 000"
    Exponent61000000,
    /// Usage ID `0x2423`: "Exponent 7: 10 000 000"
    Exponent710000000,
    /// Usage ID `0x2424`: "Exponent 8: 0.00 000 001"
    Exponent8000000001,
    /// Usage ID `0x2425`: "Exponent 9: 0.0 000 001"
    Exponent900000001,
    /// Usage ID `0x2426`: "Exponent A: 0.000 001"
    ExponentA0000001,
    /// Usage ID `0x2427`: "Exponent B: 0.00 001"
    ExponentB000001,
    /// Usage ID `0x2428`: "Exponent C: 0.0 001"
    ExponentC00001,
    /// Usage ID `0x2429`: "Exponent D: 0.001"
    ExponentD0001,
    /// Usage ID `0x2430`: "Exponent E: 0.01"
    ExponentE001,
    /// Usage ID `0x2431`: "Exponent F: 0.1"
    ExponentF01,
    /// Usage ID `0x2432`: "Device Position: Unknown"
    DevicePositionUnknown,
    /// Usage ID `0x2433`: "Device Position: Unchanged"
    DevicePositionUnchanged,
    /// Usage ID `0x2434`: "Device Position: On Desk"
    DevicePositionOnDesk,
    /// Usage ID `0x2435`: "Device Position: In Hand"
    DevicePositionInHand,
    /// Usage ID `0x2436`: "Device Position: Moving in Bag"
    DevicePositionMovinginBag,
    /// Usage ID `0x2437`: "Device Position: Stationary in Bag"
    DevicePositionStationaryinBag,
}

impl fmt::Display for Sensor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Sensor::Undefined => "Undefined",
            Sensor::Sensor => "Sensor",
            Sensor::Biometric => "Biometric",
            Sensor::BiometricHumanPresence => "Biometric Human Presence",
            Sensor::BiometricHumanProximity => "Biometric Human Proximity",
            Sensor::BiometricHumanTouch => "Biometric Human Touch",
            Sensor::BiometricBloodPressure => "Biometric: Blood Pressure",
            Sensor::BiometricBodyTemperature => "Biometric: Body Temperature",
            Sensor::BiometricHeartRate => "Biometric: Heart Rate",
            Sensor::BiometricHeartRateVariability => "Biometric: Heart Rate Variability",
            Sensor::BiometricPeripheralOxygenSaturation => {
                "Biometric: Peripheral Oxygen Saturation"
            }
            Sensor::BiometricRespiratoryRate => "Biometric: Respiratory Rate",
            Sensor::Electrical => "Electrical",
            Sensor::ElectricalCapacitance => "Electrical: Capacitance",
            Sensor::ElectricalCurrent => "Electrical: Current",
            Sensor::ElectricalPower => "Electrical: Power",
            Sensor::ElectricalInductance => "Electrical: Inductance",
            Sensor::ElectricalResistance => "Electrical: Resistance",
            Sensor::ElectricalVoltage => "Electrical: Voltage",
            Sensor::ElectricalPotentiometer => "Electrical: Potentiometer",
            Sensor::ElectricalFrequency => "Electrical: Frequency",
            Sensor::ElectricalPeriod => "Electrical: Period",
            Sensor::Environmental => "Environmental",
            Sensor::EnvironmentalAtmosphericPressure => "Environmental: Atmospheric Pressure",
            Sensor::EnvironmentalHumidity => "Environmental: Humidity",
            Sensor::EnvironmentalTemperature => "Environmental: Temperature",
            Sensor::EnvironmentalWindDirection => "Environmental: Wind Direction",
            Sensor::EnvironmentalWindSpeed => "Environmental: Wind Speed",
            Sensor::EnvironmentalAirQuality => "Environmental: Air Quality",
            Sensor::EnvironmentalHeatIndex => "Environmental: Heat Index",
            Sensor::EnvironmentalSurfaceTemperature => "Environmental: Surface Temperature",
            Sensor::EnvironmentalVolatileOrganicCompounds => {
                "Environmental: Volatile Organic Compounds"
            }
            Sensor::EnvironmentalObjectPresence => "Environmental: Object Presence",
            Sensor::EnvironmentalObjectProximity => "Environmental: Object Proximity",
            Sensor::Light => "Light",
            Sensor::LightAmbientLight => "Light: Ambient Light",
            Sensor::LightConsumerInfrared => "Light: Consumer Infrared",
            Sensor::LightInfraredLight => "Light: Infrared Light",
            Sensor::LightVisibleLight => "Light: Visible Light",
            Sensor::LightUltravioletLight => "Light: Ultraviolet Light",
            Sensor::Location => "Location",
            Sensor::LocationBroadcast => "Location: Broadcast",
            Sensor::LocationDeadReckoning => "Location: Dead Reckoning",
            Sensor::LocationGPS => "Location: GPS",
            Sensor::LocationLookup => "Location: Lookup",
            Sensor::LocationOther => "Location: Other",
            Sensor::LocationStatic => "Location: Static",
            Sensor::LocationTriangulation => "Location: Triangulation",
            Sensor::Mechanical => "Mechanical",
            Sensor::MechanicalBooleanSwitch => "Mechanical: Boolean Switch",
            Sensor::MechanicalBooleanSwitchArray => "Mechanical: Boolean Switch Array",
            Sensor::MechanicalMultivalueSwitch => "Mechanical: Multivalue Switch",
            Sensor::MechanicalForce => "Mechanical: Force",
            Sensor::MechanicalPressure => "Mechanical: Pressure",
            Sensor::MechanicalStrain => "Mechanical: Strain",
            Sensor::MechanicalWeight => "Mechanical: Weight",
            Sensor::MechanicalHapticVibrator => "Mechanical: Haptic Vibrator",
            Sensor::MechanicalHallEffectSwitch => "Mechanical: Hall Effect Switch",
            Sensor::Motion => "Motion",
            Sensor::MotionAccelerometer1D => "Motion: Accelerometer 1D",
            Sensor::MotionAccelerometer2D => "Motion: Accelerometer 2D",
            Sensor::MotionAccelerometer3D => "Motion: Accelerometer 3D",
            Sensor::MotionGyrometer1D => "Motion: Gyrometer 1D",
            Sensor::MotionGyrometer2D => "Motion: Gyrometer 2D",
            Sensor::MotionGyrometer3D => "Motion: Gyrometer 3D",
            Sensor::MotionMotionDetector => "Motion: Motion Detector",
            Sensor::MotionSpeedometer => "Motion: Speedometer",
            Sensor::MotionAccelerometer => "Motion: Accelerometer",
            Sensor::MotionGyrometer => "Motion: Gyrometer",
            Sensor::MotionGravityVector => "Motion: Gravity Vector",
            Sensor::MotionLinearAccelerometer => "Motion: Linear Accelerometer",
            Sensor::Orientation => "Orientation",
            Sensor::OrientationCompass1D => "Orientation: Compass 1D",
            Sensor::OrientationCompass2D => "Orientation: Compass 2D",
            Sensor::OrientationCompass3D => "Orientation: Compass 3D",
            Sensor::OrientationInclinometer1D => "Orientation: Inclinometer 1D",
            Sensor::OrientationInclinometer2D => "Orientation: Inclinometer 2D",
            Sensor::OrientationInclinometer3D => "Orientation: Inclinometer 3D",
            Sensor::OrientationDistance1D => "Orientation: Distance 1D",
            Sensor::OrientationDistance2D => "Orientation: Distance 2D",
            Sensor::OrientationDistance3D => "Orientation: Distance 3D",
            Sensor::OrientationDeviceOrientation => "Orientation: Device Orientation",
            Sensor::OrientationCompass => "Orientation: Compass",
            Sensor::OrientationInclinometer => "Orientation: Inclinometer",
            Sensor::OrientationDistance => "Orientation: Distance",
            Sensor::OrientationRelativeOrientation => "Orientation: Relative Orientation",
            Sensor::OrientationSimpleOrientation => "Orientation: Simple Orientation",
            Sensor::Scanner => "Scanner",
            Sensor::ScannerBarcode => "Scanner: Barcode",
            Sensor::ScannerRFID => "Scanner: RFID",
            Sensor::ScannerNFC => "Scanner: NFC",
            Sensor::Time => "Time",
            Sensor::TimeAlarmTimer => "Time: Alarm Timer",
            Sensor::TimeRealTimeClock => "Time: Real Time Clock",
            Sensor::PersonalActivity => "Personal Activity",
            Sensor::PersonalActivityActivityDetection => "Personal Activity: Activity Detection",
            Sensor::PersonalActivityDevicePosition => "Personal Activity: Device Position",
            Sensor::PersonalActivityPedometer => "Personal Activity: Pedometer",
            Sensor::PersonalActivityStepDetection => "Personal Activity: Step Detection",
            Sensor::OrientationExtended => "Orientation Extended",
            Sensor::OrientationExtendedGeomagneticOrientation => {
                "Orientation Extended: Geomagnetic Orientation"
            }
            Sensor::OrientationExtendedMagnetometer => "Orientation Extended: Magnetometer",
            Sensor::Other => "Other",
            Sensor::OtherCustom => "Other: Custom",
            Sensor::OtherGeneric => "Other: Generic",
            Sensor::OtherGenericEnumerator => "Other: Generic Enumerator",
            Sensor::Event => "Event",
            Sensor::EventSensorState => "Event: Sensor State",
            Sensor::EventSensorEvent => "Event: Sensor Event",
            Sensor::Property => "Property",
            Sensor::PropertyFriendlyName => "Property: Friendly Name",
            Sensor::PropertyPersistentUniqueID => "Property: Persistent Unique ID",
            Sensor::PropertySensorStatus => "Property: Sensor Status",
            Sensor::PropertyMinimumReportInterval => "Property: Minimum Report Interval",
            Sensor::PropertySensorManufacturer => "Property: Sensor Manufacturer",
            Sensor::PropertySensorModel => "Property: Sensor Model",
            Sensor::PropertySensorSerialNumber => "Property: Sensor Serial Number",
            Sensor::PropertySensorDescription => "Property: Sensor Description",
            Sensor::PropertySensorConnectionType => "Property: Sensor Connection Type",
            Sensor::PropertySensorDevicePath => "Property: Sensor Device Path",
            Sensor::PropertyHardwareRevision => "Property: Hardware Revision",
            Sensor::PropertyFirmwareVersion => "Property: Firmware Version",
            Sensor::PropertyReleaseDate => "Property: Release Date",
            Sensor::PropertyReportInterval => "Property: Report Interval",
            Sensor::PropertyChangeSensitivityAbsolute => "Property: Change Sensitivity Absolute",
            Sensor::PropertyChangeSensitivityPercentofRange => {
                "Property: Change Sensitivity Percent of Range"
            }
            Sensor::PropertyChangeSensitivityPercentRelative => {
                "Property: Change Sensitivity Percent Relative"
            }
            Sensor::PropertyAccuracy => "Property: Accuracy",
            Sensor::PropertyResolution => "Property: Resolution",
            Sensor::PropertyMaximum => "Property: Maximum",
            Sensor::PropertyMinimum => "Property: Minimum",
            Sensor::PropertyReportingState => "Property: Reporting State",
            Sensor::PropertyMaximumFIFOEvents => "Property: Maximum FIFO Events",
            Sensor::PropertyReportLatency => "Property: Report Latency",
            Sensor::PropertyFlushFIFOEvents => "Property: Flush FIFO Events",
            Sensor::PropertyMaximumPowerConsumption => "Property: Maximum Power Consumption",
            Sensor::DataFieldLocation => "Data Field: Location",
            Sensor::DataFieldAltitudeAntennaSeaLevel => "Data Field: Altitude Antenna Sea Level",
            Sensor::DataFieldDifferentialReferenceStationID => {
                "Data Field: Differential Reference Station ID"
            }
            Sensor::DataFieldAltitudeEllipsoidError => "Data Field: Altitude Ellipsoid Error",
            Sensor::DataFieldAltitudeEllipsoid => "Data Field: Altitude Ellipsoid",
            Sensor::DataFieldAltitudeSeaLevelError => "Data Field: Altitude Sea Level Error",
            Sensor::DataFieldAltitudeSeaLevel => "Data Field: Altitude Sea Level",
            Sensor::DataFieldDifferentialGPSDataAge => "Data Field: Differential GPS Data Age",
            Sensor::DataFieldErrorRadius => "Data Field: Error Radius",
            Sensor::DataFieldFixQuality => "Data Field: Fix Quality",
            Sensor::DataFieldFixType => "Data Field: Fix Type",
            Sensor::DataFieldGeoidalSeparation => "Data Field: Geoidal Separation",
            Sensor::DataFieldGPSOperationMode => "Data Field: GPS Operation Mode",
            Sensor::DataFieldGPSSelectionMode => "Data Field: GPS Selection Mode",
            Sensor::DataFieldGPSStatus => "Data Field: GPS Status",
            Sensor::DataFieldPositionDilutionofPrecision => {
                "Data Field: Position Dilution of Precision"
            }
            Sensor::DataFieldHorizontalDilutionofPrecision => {
                "Data Field: Horizontal Dilution of Precision"
            }
            Sensor::DataFieldVerticalDilutionofPrecision => {
                "Data Field: Vertical Dilution of Precision"
            }
            Sensor::DataFieldLatitude => "Data Field: Latitude",
            Sensor::DataFieldLongitude => "Data Field: Longitude",
            Sensor::DataFieldTrueHeading => "Data Field: True Heading",
            Sensor::DataFieldMagneticHeading => "Data Field: Magnetic Heading",
            Sensor::DataFieldMagneticVariation => "Data Field: Magnetic Variation",
            Sensor::DataFieldSpeed => "Data Field: Speed",
            Sensor::DataFieldSatellitesinView => "Data Field: Satellites in View",
            Sensor::DataFieldSatellitesinViewAzimuth => "Data Field: Satellites in View Azimuth",
            Sensor::DataFieldSatellitesinViewElevation => {
                "Data Field: Satellites in View Elevation"
            }
            Sensor::DataFieldSatellitesinViewIDs => "Data Field: Satellites in View IDs",
            Sensor::DataFieldSatellitesinViewPRNs => "Data Field: Satellites in View PRNs",
            Sensor::DataFieldSatellitesinViewSNRatios => {
                "Data Field: Satellites in View S/N Ratios"
            }
            Sensor::DataFieldSatellitesUsedCount => "Data Field: Satellites Used Count",
            Sensor::DataFieldSatellitesUsedPRNs => "Data Field: Satellites Used PRNs",
            Sensor::DataFieldNMEASentence => "Data Field: NMEA Sentence",
            Sensor::DataFieldAddressLine1 => "Data Field: Address Line 1",
            Sensor::DataFieldAddressLine2 => "Data Field: Address Line 2",
            Sensor::DataFieldCity => "Data Field: City",
            Sensor::DataFieldStateorProvince => "Data Field: State or Province",
            Sensor::DataFieldCountryorRegion => "Data Field: Country or Region",
            Sensor::DataFieldPostalCode => "Data Field: Postal Code",
            Sensor::PropertyLocation => "Property: Location",
            Sensor::PropertyLocationDesiredAccuracy => "Property: Location Desired Accuracy",
            Sensor::DataFieldEnvironmental => "Data Field: Environmental",
            Sensor::DataFieldAtmosphericPressure => "Data Field: Atmospheric Pressure",
            Sensor::DataFieldRelativeHumidity => "Data Field: Relative Humidity",
            Sensor::DataFieldTemperature => "Data Field: Temperature",
            Sensor::DataFieldWindDirection => "Data Field: Wind Direction",
            Sensor::DataFieldWindSpeed => "Data Field: Wind Speed",
            Sensor::DataFieldAirQualityIndex => "Data Field: Air Quality Index",
            Sensor::DataFieldEquivalentCO2 => "Data Field: Equivalent CO2",
            Sensor::DataFieldVolatileOrganicCompoundConcentration => {
                "Data Field: Volatile Organic Compound Concentration"
            }
            Sensor::DataFieldObjectPresence => "Data Field: Object Presence",
            Sensor::DataFieldObjectProximityRange => "Data Field: Object Proximity Range",
            Sensor::DataFieldObjectProximityOutofRange => {
                "Data Field: Object Proximity Out of Range"
            }
            Sensor::PropertyEnvironmental => "Property: Environmental",
            Sensor::PropertyReferencePressure => "Property: Reference Pressure",
            Sensor::DataFieldMotion => "Data Field: Motion",
            Sensor::DataFieldMotionState => "Data Field: Motion State",
            Sensor::DataFieldAcceleration => "Data Field: Acceleration",
            Sensor::DataFieldAccelerationAxisX => "Data Field: Acceleration Axis X",
            Sensor::DataFieldAccelerationAxisY => "Data Field: Acceleration Axis Y",
            Sensor::DataFieldAccelerationAxisZ => "Data Field: Acceleration Axis Z",
            Sensor::DataFieldAngularVelocity => "Data Field: Angular Velocity",
            Sensor::DataFieldAngularVelocityaboutXAxis => {
                "Data Field: Angular Velocity about X Axis"
            }
            Sensor::DataFieldAngularVelocityaboutYAxis => {
                "Data Field: Angular Velocity about Y Axis"
            }
            Sensor::DataFieldAngularVelocityaboutZAxis => {
                "Data Field: Angular Velocity about Z Axis"
            }
            Sensor::DataFieldAngularPosition => "Data Field: Angular Position",
            Sensor::DataFieldAngularPositionaboutXAxis => {
                "Data Field: Angular Position about X Axis"
            }
            Sensor::DataFieldAngularPositionaboutYAxis => {
                "Data Field: Angular Position about Y Axis"
            }
            Sensor::DataFieldAngularPositionaboutZAxis => {
                "Data Field: Angular Position about Z Axis"
            }
            Sensor::DataFieldMotionSpeed => "Data Field: Motion Speed",
            Sensor::DataFieldMotionIntensity => "Data Field: Motion Intensity",
            Sensor::DataFieldOrientation => "Data Field: Orientation",
            Sensor::DataFieldHeading => "Data Field: Heading",
            Sensor::DataFieldHeadingXAxis => "Data Field: Heading X Axis",
            Sensor::DataFieldHeadingYAxis => "Data Field: Heading Y Axis",
            Sensor::DataFieldHeadingZAxis => "Data Field: Heading Z Axis",
            Sensor::DataFieldHeadingCompensatedMagneticNorth => {
                "Data Field: Heading Compensated Magnetic North"
            }
            Sensor::DataFieldHeadingCompensatedTrueNorth => {
                "Data Field: Heading Compensated True North"
            }
            Sensor::DataFieldHeadingMagneticNorth => "Data Field: Heading Magnetic North",
            Sensor::DataFieldHeadingTrueNorth => "Data Field: Heading True North",
            Sensor::DataFieldDistance => "Data Field: Distance",
            Sensor::DataFieldDistanceXAxis => "Data Field: Distance X Axis",
            Sensor::DataFieldDistanceYAxis => "Data Field: Distance Y Axis",
            Sensor::DataFieldDistanceZAxis => "Data Field: Distance Z Axis",
            Sensor::DataFieldDistanceOutofRange => "Data Field: Distance Out-of-Range",
            Sensor::DataFieldTilt => "Data Field: Tilt",
            Sensor::DataFieldTiltXAxis => "Data Field: Tilt X Axis",
            Sensor::DataFieldTiltYAxis => "Data Field: Tilt Y Axis",
            Sensor::DataFieldTiltZAxis => "Data Field: Tilt Z Axis",
            Sensor::DataFieldRotationMatrix => "Data Field: Rotation Matrix",
            Sensor::DataFieldQuaternion => "Data Field: Quaternion",
            Sensor::DataFieldMagneticFlux => "Data Field: Magnetic Flux",
            Sensor::DataFieldMagneticFluxXAxis => "Data Field: Magnetic Flux X Axis",
            Sensor::DataFieldMagneticFluxYAxis => "Data Field: Magnetic Flux Y Axis",
            Sensor::DataFieldMagneticFluxZAxis => "Data Field: Magnetic Flux Z Axis",
            Sensor::DataFieldMagnetometerAccuracy => "Data Field: Magnetometer Accuracy",
            Sensor::DataFieldSimpleOrientationDirection => {
                "Data Field: Simple Orientation Direction"
            }
            Sensor::DataFieldMechanical => "Data Field: Mechanical",
            Sensor::DataFieldBooleanSwitchState => "Data Field: Boolean Switch State",
            Sensor::DataFieldBooleanSwitchArrayStates => "Data Field: Boolean Switch Array States",
            Sensor::DataFieldMultivalueSwitchValue => "Data Field: Multivalue Switch Value",
            Sensor::DataFieldForce => "Data Field: Force",
            Sensor::DataFieldAbsolutePressure => "Data Field: Absolute Pressure",
            Sensor::DataFieldGaugePressure => "Data Field: Gauge Pressure",
            Sensor::DataFieldStrain => "Data Field: Strain",
            Sensor::DataFieldWeight => "Data Field: Weight",
            Sensor::PropertyMechanical => "Property: Mechanical",
            Sensor::PropertyVibrationState => "Property: Vibration State",
            Sensor::PropertyForwardVibrationSpeed => "Property: Forward Vibration Speed",
            Sensor::PropertyBackwardVibrationSpeed => "Property: Backward Vibration Speed",
            Sensor::DataFieldBiometric => "Data Field: Biometric",
            Sensor::DataFieldHumanPresence => "Data Field: Human Presence",
            Sensor::DataFieldHumanProximityRange => "Data Field: Human Proximity Range",
            Sensor::DataFieldHumanProximityOutofRange => "Data Field: Human Proximity Out of Range",
            Sensor::DataFieldHumanTouchState => "Data Field: Human Touch State",
            Sensor::DataFieldBloodPressure => "Data Field: Blood Pressure",
            Sensor::DataFieldBloodPressureDiastolic => "Data Field: Blood Pressure Diastolic",
            Sensor::DataFieldBloodPressureSystolic => "Data Field: Blood Pressure Systolic",
            Sensor::DataFieldHeartRate => "Data Field: Heart Rate",
            Sensor::DataFieldRestingHeartRate => "Data Field: Resting Heart Rate",
            Sensor::DataFieldHeartbeatInterval => "Data Field: Heartbeat Interval",
            Sensor::DataFieldRespiratoryRate => "Data Field: Respiratory Rate",
            Sensor::DataFieldSpO2 => "Data Field: SpO2",
            Sensor::DataFieldLight => "Data Field: Light",
            Sensor::DataFieldIlluminance => "Data Field: Illuminance",
            Sensor::DataFieldColorTemperature => "Data Field: Color Temperature",
            Sensor::DataFieldChromaticity => "Data Field: Chromaticity",
            Sensor::DataFieldChromaticityX => "Data Field: Chromaticity X",
            Sensor::DataFieldChromaticityY => "Data Field: Chromaticity Y",
            Sensor::DataFieldConsumerIRSentenceReceive => {
                "Data Field: Consumer IR Sentence Receive"
            }
            Sensor::DataFieldInfraredLight => "Data Field: Infrared Light",
            Sensor::DataFieldRedLight => "Data Field: Red Light",
            Sensor::DataFieldGreenLight => "Data Field: Green Light",
            Sensor::DataFieldBlueLight => "Data Field: Blue Light",
            Sensor::DataFieldUltravioletALight => "Data Field: Ultraviolet A Light",
            Sensor::DataFieldUltravioletBLight => "Data Field: Ultraviolet B Light",
            Sensor::DataFieldUltravioletIndex => "Data Field: Ultraviolet Index",
            Sensor::PropertyLight => "Property: Light",
            Sensor::PropertyConsumerIRSentenceSend => "Property: Consumer IR Sentence Send",
            Sensor::DataFieldScanner => "Data Field: Scanner",
            Sensor::DataFieldRFIDTag40Bit => "Data Field: RFID Tag 40 Bit",
            Sensor::DataFieldNFCSentenceReceive => "Data Field: NFC Sentence Receive",
            Sensor::PropertyScanner => "Property: Scanner",
            Sensor::PropertyNFCSentenceSend => "Property: NFC Sentence Send",
            Sensor::DataFieldElectrical => "Data Field: Electrical",
            Sensor::DataFieldCapacitance => "Data Field: Capacitance",
            Sensor::DataFieldCurrent => "Data Field: Current",
            Sensor::DataFieldElectricalPower => "Data Field: Electrical Power",
            Sensor::DataFieldInductance => "Data Field: Inductance",
            Sensor::DataFieldResistance => "Data Field: Resistance",
            Sensor::DataFieldVoltage => "Data Field: Voltage",
            Sensor::DataFieldFrequency => "Data Field: Frequency",
            Sensor::DataFieldPeriod => "Data Field: Period",
            Sensor::DataFieldPercentofRange => "Data Field: Percent of Range",
            Sensor::DataFieldTime => "Data Field: Time",
            Sensor::DataFieldYear => "Data Field: Year",
            Sensor::DataFieldMonth => "Data Field: Month",
            Sensor::DataFieldDay => "Data Field: Day",
            Sensor::DataFieldDayofWeek => "Data Field: Day of Week",
            Sensor::DataFieldHour => "Data Field: Hour",
            Sensor::DataFieldMinute => "Data Field: Minute",
            Sensor::DataFieldSecond => "Data Field: Second",
            Sensor::DataFieldMillisecond => "Data Field: Millisecond",
            Sensor::DataFieldTimestamp => "Data Field: Timestamp",
            Sensor::DataFieldJulianDayofYear => "Data Field: Julian Day of Year",
            Sensor::DataFieldTimeSinceSystemBoot => "Data Field: Time Since System Boot",
            Sensor::PropertyTime => "Property: Time",
            Sensor::PropertyTimeZoneOffsetfromUTC => "Property: Time Zone Offset from UTC",
            Sensor::PropertyTimeZoneName => "Property: Time Zone Name",
            Sensor::PropertyDaylightSavingsTimeObserved => {
                "Property: Daylight Savings Time Observed"
            }
            Sensor::PropertyTimeTrimAdjustment => "Property: Time Trim Adjustment",
            Sensor::PropertyArmAlarm => "Property: Arm Alarm",
            Sensor::DataFieldCustom => "Data Field: Custom",
            Sensor::DataFieldCustomUsage => "Data Field: Custom Usage",
            Sensor::DataFieldCustomBooleanArray => "Data Field: Custom Boolean Array",
            Sensor::DataFieldCustomValue => "Data Field: Custom Value",
            Sensor::DataFieldCustomValue1 => "Data Field: Custom Value 1",
            Sensor::DataFieldCustomValue2 => "Data Field: Custom Value 2",
            Sensor::DataFieldCustomValue3 => "Data Field: Custom Value 3",
            Sensor::DataFieldCustomValue4 => "Data Field: Custom Value 4",
            Sensor::DataFieldCustomValue5 => "Data Field: Custom Value 5",
            Sensor::DataFieldCustomValue6 => "Data Field: Custom Value 6",
            Sensor::DataFieldCustomValue7 => "Data Field: Custom Value 7",
            Sensor::DataFieldCustomValue8 => "Data Field: Custom Value 8",
            Sensor::DataFieldCustomValue9 => "Data Field: Custom Value 9",
            Sensor::DataFieldCustomValue10 => "Data Field: Custom Value 10",
            Sensor::DataFieldCustomValue11 => "Data Field: Custom Value 11",
            Sensor::DataFieldCustomValue12 => "Data Field: Custom Value 12",
            Sensor::DataFieldCustomValue13 => "Data Field: Custom Value 13",
            Sensor::DataFieldCustomValue14 => "Data Field: Custom Value 14",
            Sensor::DataFieldCustomValue15 => "Data Field: Custom Value 15",
            Sensor::DataFieldCustomValue16 => "Data Field: Custom Value 16",
            Sensor::DataFieldCustomValue17 => "Data Field: Custom Value 17",
            Sensor::DataFieldCustomValue18 => "Data Field: Custom Value 18",
            Sensor::DataFieldCustomValue19 => "Data Field: Custom Value 19",
            Sensor::DataFieldCustomValue20 => "Data Field: Custom Value 20",
            Sensor::DataFieldCustomValue21 => "Data Field: Custom Value 21",
            Sensor::DataFieldCustomValue22 => "Data Field: Custom Value 22",
            Sensor::DataFieldCustomValue23 => "Data Field: Custom Value 23",
            Sensor::DataFieldCustomValue24 => "Data Field: Custom Value 24",
            Sensor::DataFieldCustomValue25 => "Data Field: Custom Value 25",
            Sensor::DataFieldCustomValue26 => "Data Field: Custom Value 26",
            Sensor::DataFieldCustomValue27 => "Data Field: Custom Value 27",
            Sensor::DataFieldCustomValue28 => "Data Field: Custom Value 28",
            Sensor::DataFieldGeneric => "Data Field: Generic",
            Sensor::DataFieldGenericGUIDorPROPERTYKEY => "Data Field: Generic GUID or PROPERTYKEY",
            Sensor::DataFieldGenericCategoryGUID => "Data Field: Generic Category GUID",
            Sensor::DataFieldGenericTypeGUID => "Data Field: Generic Type GUID",
            Sensor::DataFieldGenericEventPROPERTYKEY => "Data Field: Generic Event PROPERTYKEY",
            Sensor::DataFieldGenericPropertyPROPERTYKEY => {
                "Data Field: Generic Property PROPERTYKEY"
            }
            Sensor::DataFieldGenericDataFieldPROPERTYKEY => {
                "Data Field: Generic Data Field PROPERTYKEY"
            }
            Sensor::DataFieldGenericEvent => "Data Field: Generic Event",
            Sensor::DataFieldGenericProperty => "Data Field: Generic Property",
            Sensor::DataFieldGenericDataField => "Data Field: Generic Data Field",
            Sensor::DataFieldEnumeratorTableRowIndex => "Data Field: Enumerator Table Row Index",
            Sensor::DataFieldEnumeratorTableRowCount => "Data Field: Enumerator Table Row Count",
            Sensor::DataFieldGenericGUIDorPROPERTYKEYkind => {
                "Data Field: Generic GUID or PROPERTYKEY kind"
            }
            Sensor::DataFieldGenericGUID => "Data Field: Generic GUID",
            Sensor::DataFieldGenericPROPERTYKEY => "Data Field: Generic PROPERTYKEY",
            Sensor::DataFieldGenericTopLevelCollectionID => {
                "Data Field: Generic Top Level Collection ID"
            }
            Sensor::DataFieldGenericReportID => "Data Field: Generic Report ID",
            Sensor::DataFieldGenericReportItemPositionIndex => {
                "Data Field: Generic Report Item Position Index"
            }
            Sensor::DataFieldGenericFirmwareVARTYPE => "Data Field: Generic Firmware VARTYPE",
            Sensor::DataFieldGenericUnitofMeasure => "Data Field: Generic Unit of Measure",
            Sensor::DataFieldGenericUnitExponent => "Data Field: Generic Unit Exponent",
            Sensor::DataFieldGenericReportSize => "Data Field: Generic Report Size",
            Sensor::DataFieldGenericReportCount => "Data Field: Generic Report Count",
            Sensor::PropertyGeneric => "Property: Generic",
            Sensor::PropertyEnumeratorTableRowIndex => "Property: Enumerator Table Row Index",
            Sensor::PropertyEnumeratorTableRowCount => "Property: Enumerator Table Row Count",
            Sensor::DataFieldPersonalActivity => "Data Field: Personal Activity",
            Sensor::DataFieldActivityType => "Data Field: Activity Type",
            Sensor::DataFieldActivityState => "Data Field: Activity State",
            Sensor::DataFieldDevicePosition => "Data Field: Device Position",
            Sensor::DataFieldStepCount => "Data Field: Step Count",
            Sensor::DataFieldStepCountReset => "Data Field: Step Count Reset",
            Sensor::DataFieldStepDuration => "Data Field: Step Duration",
            Sensor::DataFieldStepType => "Data Field: Step Type",
            Sensor::PropertyMinimumActivityDetectionInterval => {
                "Property: Minimum Activity Detection Interval"
            }
            Sensor::PropertySupportedActivityTypes => "Property: Supported Activity Types",
            Sensor::PropertySubscribedActivityTypes => "Property: Subscribed Activity Types",
            Sensor::PropertySupportedStepTypes => "Property: Supported Step Types",
            Sensor::PropertySubscribedStepTypes => "Property: Subscribed Step Types",
            Sensor::PropertyFloorHeight => "Property: Floor Height",
            Sensor::DataFieldCustomTypeID => "Data Field: Custom Type ID",
            Sensor::SensorStateUndefined => "Sensor State: Undefined",
            Sensor::SensorStateReady => "Sensor State: Ready",
            Sensor::SensorStateNotAvailable => "Sensor State: Not Available",
            Sensor::SensorStateNoDataSel => "Sensor State: No Data Sel",
            Sensor::SensorStateInitializing => "Sensor State: Initializing",
            Sensor::SensorStateAccessDenied => "Sensor State: Access Denied",
            Sensor::SensorStateError => "Sensor State: Error",
            Sensor::SensorEventUnknown => "Sensor Event: Unknown",
            Sensor::SensorEventStateChanged => "Sensor Event: State Changed",
            Sensor::SensorEventPropertyChanged => "Sensor Event: Property Changed",
            Sensor::SensorEventDataUpdated => "Sensor Event: Data Updated",
            Sensor::SensorEventPollResponse => "Sensor Event: Poll Response",
            Sensor::SensorEventChangeSensitivity => "Sensor Event: Change Sensitivity",
            Sensor::SensorEventRangeMaximumReached => "Sensor Event: Range Maximum Reached",
            Sensor::SensorEventRangeMinimumReached => "Sensor Event: Range Minimum Reached",
            Sensor::SensorEventHighThresholdCrossUpward => {
                "Sensor Event: High Threshold Cross Upward"
            }
            Sensor::SensorEventHighThresholdCrossDownward => {
                "Sensor Event: High Threshold Cross Downward"
            }
            Sensor::SensorEventLowThresholdCrossUpward => {
                "Sensor Event: Low Threshold Cross Upward"
            }
            Sensor::SensorEventLowThresholdCrossDownward => {
                "Sensor Event: Low Threshold Cross Downward"
            }
            Sensor::SensorEventZeroThresholdCrossUpward => {
                "Sensor Event: Zero Threshold Cross Upward"
            }
            Sensor::SensorEventZeroThresholdCrossDownward => {
                "Sensor Event: Zero Threshold Cross Downward"
            }
            Sensor::SensorEventPeriodExceeded => "Sensor Event: Period Exceeded",
            Sensor::SensorEventFrequencyExceeded => "Sensor Event: Frequency Exceeded",
            Sensor::SensorEventComplexTrigger => "Sensor Event: Complex Trigger",
            Sensor::ConnectionTypePCIntegrated => "Connection Type: PC Integrated",
            Sensor::ConnectionTypePCAttached => "Connection Type: PC Attached",
            Sensor::ConnectionTypePCExternal => "Connection Type: PC External",
            Sensor::ReportingStateReportNoEvents => "Reporting State: Report No Events",
            Sensor::ReportingStateReportAllEvents => "Reporting State: Report All Events",
            Sensor::ReportingStateReportThresholdEvents => {
                "Reporting State: Report Threshold Events"
            }
            Sensor::ReportingStateWakeOnNoEvents => "Reporting State: Wake On No Events",
            Sensor::ReportingStateWakeOnAllEvents => "Reporting State: Wake On All Events",
            Sensor::ReportingStateWakeOnThresholdEvents => {
                "Reporting State: Wake On Threshold Events"
            }
            Sensor::PropertySamplingRate => "Property: Sampling Rate",
            Sensor::PropertyResponseCurve => "Property: Response Curve",
            Sensor::PropertyPowerState => "Property: Power State",
            Sensor::PowerStateUndefined => "Power State: Undefined",
            Sensor::PowerStateD0FullPower => "Power State: D0 Full Power",
            Sensor::PowerStateD1LowPower => "Power State: D1 Low Power",
            Sensor::PowerStateD2StandbyPowerwithWakeup => {
                "Power State: D2 Standby Power with Wakeup"
            }
            Sensor::PowerStateD3SleepwithWakeup => "Power State: D3 Sleep with Wakeup",
            Sensor::PowerStateD4PowerOff => "Power State: D4 Power Off",
            Sensor::AccuracyDefault => "Accuracy: Default",
            Sensor::AccuracyHigh => "Accuracy: High",
            Sensor::AccuracyMedium => "Accuracy: Medium",
            Sensor::AccuracyLow => "Accuracy: Low",
            Sensor::FixQualityNoFix => "Fix Quality: No Fix",
            Sensor::FixQualityGPS => "Fix Quality: GPS",
            Sensor::FixQualityDGPS => "Fix Quality: DGPS",
            Sensor::DataFieldFixTypeNAry110 => "Data Field: Fix Type NAry 1.10",
            Sensor::FixTypeNoFix => "Fix Type: No Fix",
            Sensor::FixTypeGPSSPSModeFixValid => "Fix Type: GPS SPS Mode, Fix Valid",
            Sensor::FixTypeDGPSSPSModeFixValid => "Fix Type: DGPS SPS Mode, Fix Valid",
            Sensor::FixTypeGPSPPSModeFixValid => "Fix Type: GPS PPS Mode, Fix Valid",
            Sensor::FixTypeRealTimeKinematic => "Fix Type: Real Time Kinematic",
            Sensor::FixTypeFloatRTK => "Fix Type: Float RTK",
            Sensor::FixTypeEstimateddeadreckoned => "Fix Type: Estimated (dead reckoned)",
            Sensor::FixTypeManualInputMode => "Fix Type: Manual Input Mode",
            Sensor::FixTypeSimulatorMode => "Fix Type: Simulator Mode",
            Sensor::GPSOperationModeManual => "GPS Operation Mode: Manual",
            Sensor::GPSOperationModeAutomatic => "GPS Operation Mode: Automatic",
            Sensor::GPSSelectionModeAutonomous => "GPS Selection Mode: Autonomous",
            Sensor::GPSSelectionModeDGPS => "GPS Selection Mode: DGPS",
            Sensor::GPSSelectionModeEstimateddeadreckoned => {
                "GPS Selection Mode: Estimated (dead reckoned)"
            }
            Sensor::GPSSelectionModeManualInput => "GPS Selection Mode: Manual Input",
            Sensor::GPSSelectionModeSimulator => "GPS Selection Mode: Simulator",
            Sensor::GPSSelectionModeDataNotValid => "GPS Selection Mode: Data Not Valid",
            Sensor::GPSStatusDataValid => "GPS Status: Data Valid",
            Sensor::GPSStatusDataNotValid => "GPS Status: Data Not Valid",
            Sensor::DayofWeekSunday => "Day of Week: Sunday",
            Sensor::DayofWeekMonday => "Day of Week: Monday",
            Sensor::DayofWeekTuesday => "Day of Week: Tuesday",
            Sensor::DayofWeekWednesday => "Day of Week: Wednesday",
            Sensor::DayofWeekThursday => "Day of Week: Thursday",
            Sensor::DayofWeekFriday => "Day of Week: Friday",
            Sensor::DayofWeekSaturday => "Day of Week: Saturday",
            Sensor::KindCategory => "Kind: Category",
            Sensor::KindType => "Kind: Type",
            Sensor::KindEvent => "Kind: Event",
            Sensor::KindProperty => "Kind: Property",
            Sensor::KindDataField => "Kind: Data Field",
            Sensor::MagnetometerAccuracyLow => "Magnetometer Accuracy: Low",
            Sensor::MagnetometerAccuracyMedium => "Magnetometer Accuracy: Medium",
            Sensor::MagnetometerAccuracyHigh => "Magnetometer Accuracy: High",
            Sensor::SimpleOrientationDirectionNotRotated => {
                "Simple Orientation Direction: Not Rotated"
            }
            Sensor::SimpleOrientationDirectionRotated90Degrees => {
                "Simple Orientation Direction: Rotated 90 Degrees"
            }
            Sensor::SimpleOrientationDirectionRotated180Degrees => {
                "Simple Orientation Direction:  Rotated 180 Degrees"
            }
            Sensor::SimpleOrientationDirectionRotated270Degrees => {
                "Simple Orientation Direction:  Rotated 270 Degrees"
            }
            Sensor::SimpleOrientationDirectionFaceUp => "Simple Orientation Direction: Face Up",
            Sensor::SimpleOrientationDirectionFaceDown => "Simple Orientation Direction: Face Down",
            Sensor::VT_NULLEmpty => "VT_NULL: Empty",
            Sensor::VT_BOOLBoolean => "VT_BOOL: Boolean",
            Sensor::VT_UI1Byte => "VT_UI1: Byte",
            Sensor::VT_I1Character => "VT_I1: Character",
            Sensor::VT_UI2UnsignedShort => "VT_UI2: Unsigned Short",
            Sensor::VT_I2Short => "VT_I2: Short",
            Sensor::VT_UI4UnsignedLong => "VT_UI4: Unsigned Long",
            Sensor::VT_I4Long => "VT_I4: Long",
            Sensor::VT_UI8UnsignedLongLong => "VT_UI8: Unsigned Long Long",
            Sensor::VT_I8LongLong => "VT_I8: Long Long",
            Sensor::VT_R4Float => "VT_R4: Float",
            Sensor::VT_R8Double => "VT_R8: Double",
            Sensor::VT_WSTRWideString => "VT_WSTR: Wide String",
            Sensor::VT_STRNarrowString => "VT_STR: Narrow String",
            Sensor::VT_CLSIDGuid => "VT_CLSID: Guid",
            Sensor::VT_VECTORVT_UI1OpaqueStructure => "VT_VECTOR|VT_UI1: Opaque Structure",
            Sensor::VT_F16E0HID16bitFloatwithUnitExponent0 => {
                "VT_F16E0: HID 16-bit Float with Unit Exponent 0"
            }
            Sensor::VT_F16E1HID16bitFloatwithUnitExponent1 => {
                "VT_F16E1: HID 16-bit Float with Unit Exponent 1"
            }
            Sensor::VT_F16E2HID16bitFloatwithUnitExponent2 => {
                "VT_F16E2: HID 16-bit Float with Unit Exponent 2"
            }
            Sensor::VT_F16E3HID16bitFloatwithUnitExponent3 => {
                "VT_F16E3: HID 16-bit Float with Unit Exponent 3"
            }
            Sensor::VT_F16E4HID16bitFloatwithUnitExponent4 => {
                "VT_F16E4: HID 16-bit Float with Unit Exponent 4"
            }
            Sensor::VT_F16E5HID16bitFloatwithUnitExponent5 => {
                "VT_F16E5: HID 16-bit Float with Unit Exponent 5"
            }
            Sensor::VT_F16E6HID16bitFloatwithUnitExponent6 => {
                "VT_F16E6: HID 16-bit Float with Unit Exponent 6"
            }
            Sensor::VT_F16E7HID16bitFloatwithUnitExponent7 => {
                "VT_F16E7: HID 16-bit Float with Unit Exponent 7"
            }
            Sensor::VT_F16E8HID16bitFloatwithUnitExponent8 => {
                "VT_F16E8: HID 16-bit Float with Unit Exponent 8"
            }
            Sensor::VT_F16E9HID16bitFloatwithUnitExponent9 => {
                "VT_F16E9: HID 16-bit Float with Unit Exponent 9"
            }
            Sensor::VT_F16EAHID16bitFloatwithUnitExponentA => {
                "VT_F16EA: HID 16-bit Float with Unit Exponent A"
            }
            Sensor::VT_F16EBHID16bitFloatwithUnitExponentB => {
                "VT_F16EB: HID 16-bit Float with Unit Exponent B"
            }
            Sensor::VT_F16ECHID16bitFloatwithUnitExponentC => {
                "VT_F16EC: HID 16-bit Float with Unit Exponent C"
            }
            Sensor::VT_F16EDHID16bitFloatwithUnitExponentD => {
                "VT_F16ED: HID 16-bit Float with Unit Exponent D"
            }
            Sensor::VT_F16EEHID16bitFloatwithUnitExponentE => {
                "VT_F16EE: HID 16-bit Float with Unit Exponent E"
            }
            Sensor::VT_F16EFHID16bitFloatwithUnitExponentF => {
                "VT_F16EF: HID 16-bit Float with Unit Exponent F"
            }
            Sensor::VT_F32E0HID32bitFloatwithUnitExponent0 => {
                "VT_F32E0: HID 32-bit Float with Unit Exponent 0"
            }
            Sensor::VT_F32E1HID32bitFloatwithUnitExponent1 => {
                "VT_F32E1: HID 32-bit Float with Unit Exponent 1"
            }
            Sensor::VT_F32E2HID32bitFloatwithUnitExponent2 => {
                "VT_F32E2: HID 32-bit Float with Unit Exponent 2"
            }
            Sensor::VT_F32E3HID32bitFloatwithUnitExponent3 => {
                "VT_F32E3: HID 32-bit Float with Unit Exponent 3"
            }
            Sensor::VT_F32E4HID32bitFloatwithUnitExponent4 => {
                "VT_F32E4: HID 32-bit Float with Unit Exponent 4"
            }
            Sensor::VT_F32E5HID32bitFloatwithUnitExponent5 => {
                "VT_F32E5: HID 32-bit Float with Unit Exponent 5"
            }
            Sensor::VT_F32E6HID32bitFloatwithUnitExponent6 => {
                "VT_F32E6: HID 32-bit Float with Unit Exponent 6"
            }
            Sensor::VT_F32E7HID32bitFloatwithUnitExponent7 => {
                "VT_F32E7: HID 32-bit Float with Unit Exponent 7"
            }
            Sensor::VT_F32E8HID32bitFloatwithUnitExponent8 => {
                "VT_F32E8: HID 32-bit Float with Unit Exponent 8"
            }
            Sensor::VT_F32E9HID32bitFloatwithUnitExponent9 => {
                "VT_F32E9: HID 32-bit Float with Unit Exponent 9"
            }
            Sensor::VT_F32EAHID32bitFloatwithUnitExponentA => {
                "VT_F32EA: HID 32-bit Float with Unit Exponent A"
            }
            Sensor::VT_F32EBHID32bitFloatwithUnitExponentB => {
                "VT_F32EB: HID 32-bit Float with Unit Exponent B"
            }
            Sensor::VT_F32ECHID32bitFloatwithUnitExponentC => {
                "VT_F32EC: HID 32-bit Float with Unit Exponent C"
            }
            Sensor::VT_F32EDHID32bitFloatwithUnitExponentD => {
                "VT_F32ED: HID 32-bit Float with Unit Exponent D"
            }
            Sensor::VT_F32EEHID32bitFloatwithUnitExponentE => {
                "VT_F32EE: HID 32-bit Float with Unit Exponent E"
            }
            Sensor::VT_F32EFHID32bitFloatwithUnitExponentF => {
                "VT_F32EF: HID 32-bit Float with Unit Exponent F"
            }
            Sensor::ActivityTypeUnknown => "Activity Type: Unknown",
            Sensor::ActivityTypeStationary => "Activity Type: Stationary",
            Sensor::ActivityTypeFidgeting => "Activity Type: Fidgeting",
            Sensor::ActivityTypeWalking => "Activity Type: Walking",
            Sensor::ActivityTypeRunning => "Activity Type: Running",
            Sensor::ActivityTypeInVehicle => "Activity Type: In Vehicle",
            Sensor::ActivityTypeBiking => "Activity Type: Biking",
            Sensor::ActivityTypeIdle => "Activity Type: Idle",
            Sensor::UnitNotSpecified => "Unit: Not Specified",
            Sensor::UnitLux => "Unit: Lux",
            Sensor::UnitDegreesKelvin => "Unit: Degrees Kelvin",
            Sensor::UnitDegreesCelsius => "Unit: Degrees Celsius",
            Sensor::UnitPascal => "Unit: Pascal",
            Sensor::UnitNewton => "Unit: Newton",
            Sensor::UnitMetersSecond => "Unit: Meters/Second",
            Sensor::UnitKilogram => "Unit: Kilogram",
            Sensor::UnitMeter => "Unit: Meter",
            Sensor::UnitMetersSecondSecond => "Unit: Meters/Second/Second",
            Sensor::UnitFarad => "Unit: Farad",
            Sensor::UnitAmpere => "Unit: Ampere",
            Sensor::UnitWatt => "Unit: Watt",
            Sensor::UnitHenry => "Unit: Henry",
            Sensor::UnitOhm => "Unit: Ohm",
            Sensor::UnitVolt => "Unit: Volt",
            Sensor::UnitHertz => "Unit: Hertz",
            Sensor::UnitBar => "Unit: Bar",
            Sensor::UnitDegreesAnticlockwise => "Unit: Degrees Anti-clockwise",
            Sensor::UnitDegreesClockwise => "Unit: Degrees Clockwise",
            Sensor::UnitDegrees => "Unit: Degrees",
            Sensor::UnitDegreesSecond => "Unit: Degrees/Second",
            Sensor::UnitDegreesSecondSecond => "Unit: Degrees/Second/Second",
            Sensor::UnitKnot => "Unit: Knot",
            Sensor::UnitPercent => "Unit: Percent",
            Sensor::UnitSecond => "Unit: Second",
            Sensor::UnitMillisecond => "Unit: Millisecond",
            Sensor::UnitG => "Unit: G",
            Sensor::UnitBytes => "Unit: Bytes",
            Sensor::UnitMilligauss => "Unit: Milligauss",
            Sensor::UnitBits => "Unit: Bits",
            Sensor::ActivityStateNoStateChange => "Activity State: No State Change",
            Sensor::ActivityStateStartActivity => "Activity State: Start Activity",
            Sensor::ActivityStateEndActivity => "Activity State: End Activity",
            Sensor::Exponent01 => "Exponent 0: 1",
            Sensor::Exponent110 => "Exponent 1: 10",
            Sensor::Exponent2100 => "Exponent 2: 100",
            Sensor::Exponent31000 => "Exponent 3: 1 000",
            Sensor::Exponent410000 => "Exponent 4: 10 000",
            Sensor::Exponent5100000 => "Exponent 5: 100 000",
            Sensor::Exponent61000000 => "Exponent 6: 1 000 000",
            Sensor::Exponent710000000 => "Exponent 7: 10 000 000",
            Sensor::Exponent8000000001 => "Exponent 8: 0.00 000 001",
            Sensor::Exponent900000001 => "Exponent 9: 0.0 000 001",
            Sensor::ExponentA0000001 => "Exponent A: 0.000 001",
            Sensor::ExponentB000001 => "Exponent B: 0.00 001",
            Sensor::ExponentC00001 => "Exponent C: 0.0 001",
            Sensor::ExponentD0001 => "Exponent D: 0.001",
            Sensor::ExponentE001 => "Exponent E: 0.01",
            Sensor::ExponentF01 => "Exponent F: 0.1",
            Sensor::DevicePositionUnknown => "Device Position: Unknown",
            Sensor::DevicePositionUnchanged => "Device Position: Unchanged",
            Sensor::DevicePositionOnDesk => "Device Position: On Desk",
            Sensor::DevicePositionInHand => "Device Position: In Hand",
            Sensor::DevicePositionMovinginBag => "Device Position: Moving in Bag",
            Sensor::DevicePositionStationaryinBag => "Device Position: Stationary in Bag",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x64`: "Medical Instruments"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum MedicalInstruments {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Medical Ultrasound"
    MedicalUltrasound,
    /// Usage ID `0x32`: "VCR/Acquisition"
    VCRAcquisition,
    /// Usage ID `0x33`: "Freeze/Thaw"
    FreezeThaw,
    /// Usage ID `0x34`: "Clip Store"
    ClipStore,
    /// Usage ID `0x35`: "Update"
    Update,
    /// Usage ID `0x36`: "Next"
    Next,
    /// Usage ID `0x37`: "Save"
    Save,
    /// Usage ID `0x38`: "Print"
    Print,
    /// Usage ID `0x39`: "Microphone Enable"
    MicrophoneEnable,
    /// Usage ID `0x64`: "Cine"
    Cine,
    /// Usage ID `0x65`: "Transmit Power"
    TransmitPower,
    /// Usage ID `0x66`: "Volume"
    Volume,
    /// Usage ID `0x67`: "Focus"
    Focus,
    /// Usage ID `0x68`: "Depth"
    Depth,
    /// Usage ID `0x96`: "Soft Step-Primary"
    SoftStepPrimary,
    /// Usage ID `0x97`: "Soft Step-Secondary"
    SoftStepSecondary,
    /// Usage ID `0x112`: "Depth Gain Compensation"
    DepthGainCompensation,
    /// Usage ID `0x128`: "Zoom Select"
    ZoomSelect,
    /// Usage ID `0x129`: "Zoom Adjust"
    ZoomAdjust,
    /// Usage ID `0x130`: "Spectral Doppler Mode Select"
    SpectralDopplerModeSelect,
    /// Usage ID `0x131`: "Spectral Doppler Adjust"
    SpectralDopplerAdjust,
    /// Usage ID `0x132`: "Color Doppler Mode Select"
    ColorDopplerModeSelect,
    /// Usage ID `0x133`: "Color Doppler Adjust"
    ColorDopplerAdjust,
    /// Usage ID `0x134`: "Motion Mode Select"
    MotionModeSelect,
    /// Usage ID `0x135`: "Motion Mode Adjust"
    MotionModeAdjust,
    /// Usage ID `0x136`: "2-D Mode Select"
    TwoDModeSelect,
    /// Usage ID `0x137`: "2-D Mode Adjust"
    TwoDModeAdjust,
    /// Usage ID `0x160`: "Soft Control Select"
    SoftControlSelect,
    /// Usage ID `0x161`: "Soft Control Adjust"
    SoftControlAdjust,
}

impl fmt::Display for MedicalInstruments {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            MedicalInstruments::Undefined => "Undefined",
            MedicalInstruments::MedicalUltrasound => "Medical Ultrasound",
            MedicalInstruments::VCRAcquisition => "VCR/Acquisition",
            MedicalInstruments::FreezeThaw => "Freeze/Thaw",
            MedicalInstruments::ClipStore => "Clip Store",
            MedicalInstruments::Update => "Update",
            MedicalInstruments::Next => "Next",
            MedicalInstruments::Save => "Save",
            MedicalInstruments::Print => "Print",
            MedicalInstruments::MicrophoneEnable => "Microphone Enable",
            MedicalInstruments::Cine => "Cine",
            MedicalInstruments::TransmitPower => "Transmit Power",
            MedicalInstruments::Volume => "Volume",
            MedicalInstruments::Focus => "Focus",
            MedicalInstruments::Depth => "Depth",
            MedicalInstruments::SoftStepPrimary => "Soft Step-Primary",
            MedicalInstruments::SoftStepSecondary => "Soft Step-Secondary",
            MedicalInstruments::DepthGainCompensation => "Depth Gain Compensation",
            MedicalInstruments::ZoomSelect => "Zoom Select",
            MedicalInstruments::ZoomAdjust => "Zoom Adjust",
            MedicalInstruments::SpectralDopplerModeSelect => "Spectral Doppler Mode Select",
            MedicalInstruments::SpectralDopplerAdjust => "Spectral Doppler Adjust",
            MedicalInstruments::ColorDopplerModeSelect => "Color Doppler Mode Select",
            MedicalInstruments::ColorDopplerAdjust => "Color Doppler Adjust",
            MedicalInstruments::MotionModeSelect => "Motion Mode Select",
            MedicalInstruments::MotionModeAdjust => "Motion Mode Adjust",
            MedicalInstruments::TwoDModeSelect => "2-D Mode Select",
            MedicalInstruments::TwoDModeAdjust => "2-D Mode Adjust",
            MedicalInstruments::SoftControlSelect => "Soft Control Select",
            MedicalInstruments::SoftControlAdjust => "Soft Control Adjust",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x65`: "Braille Display"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum BrailleDisplay {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Braille Display"
    BrailleDisplay,
    /// Usage ID `0x2`: "Braille Row"
    BrailleRow,
    /// Usage ID `0x3`: "8 Dot Braille Cell"
    EightDotBrailleCell,
    /// Usage ID `0x4`: "6 Dot Braille Cell"
    SixDotBrailleCell,
    /// Usage ID `0x5`: "Number of Braille Cells"
    NumberofBrailleCells,
    /// Usage ID `0x6`: "Screen Reader Control"
    ScreenReaderControl,
    /// Usage ID `0x7`: "Screen Reader Identifier"
    ScreenReaderIdentifier,
    /// Usage ID `0x250`: "Router Set 1"
    RouterSet1,
    /// Usage ID `0x251`: "Router Set 2"
    RouterSet2,
    /// Usage ID `0x252`: "Router Set 3"
    RouterSet3,
    /// Usage ID `0x256`: "Router Button"
    RouterButton,
    /// Usage ID `0x512`: "Braille Buttons"
    BrailleButtons,
    /// Usage ID `0x513`: "Braille Keyboard Dot 1"
    BrailleKeyboardDot1,
    /// Usage ID `0x514`: "Braille Keyboard Dot 2"
    BrailleKeyboardDot2,
    /// Usage ID `0x515`: "Braille Keyboard Dot 3"
    BrailleKeyboardDot3,
    /// Usage ID `0x516`: "Braille Keyboard Dot 4"
    BrailleKeyboardDot4,
    /// Usage ID `0x517`: "Braille Keyboard Dot 5"
    BrailleKeyboardDot5,
    /// Usage ID `0x518`: "Braille Keyboard Dot 6"
    BrailleKeyboardDot6,
    /// Usage ID `0x519`: "Braille Keyboard Dot 7"
    BrailleKeyboardDot7,
    /// Usage ID `0x520`: "Braille Keyboard Dot 8"
    BrailleKeyboardDot8,
    /// Usage ID `0x521`: "Braille Keyboard Space"
    BrailleKeyboardSpace,
    /// Usage ID `0x522`: "Braille Keyboard Left Space"
    BrailleKeyboardLeftSpace,
    /// Usage ID `0x523`: "Braille Keyboard Right Space"
    BrailleKeyboardRightSpace,
    /// Usage ID `0x524`: "Braille Face Controls"
    BrailleFaceControls,
    /// Usage ID `0x525`: "Braille Left Controls"
    BrailleLeftControls,
    /// Usage ID `0x526`: "Braille Right Controls"
    BrailleRightControls,
    /// Usage ID `0x527`: "Braille Top Controls"
    BrailleTopControls,
    /// Usage ID `0x528`: "Braille Joystick Center"
    BrailleJoystickCenter,
    /// Usage ID `0x529`: "Braille Joystick Up"
    BrailleJoystickUp,
    /// Usage ID `0x530`: "Braille Joystick Down"
    BrailleJoystickDown,
    /// Usage ID `0x531`: "Braille Joystick Left"
    BrailleJoystickLeft,
    /// Usage ID `0x548`: "Braille Joystick Right"
    BrailleJoystickRight,
    /// Usage ID `0x549`: "Braille D ‐ Pad Center"
    BrailleDPadCenter,
    /// Usage ID `0x550`: "Braille D ‐ Pad Up"
    BrailleDPadUp,
    /// Usage ID `0x535`: "Braille D ‐ Pad Down"
    BrailleDPadDown,
    /// Usage ID `0x536`: "Braille D ‐ Pad Left"
    BrailleDPadLeft,
    /// Usage ID `0x537`: "Braille D ‐ Pad Right"
    BrailleDPadRight,
    /// Usage ID `0x538`: "Braille Pan Left"
    BraillePanLeft,
    /// Usage ID `0x539`: "Braille Pan Right"
    BraillePanRight,
    /// Usage ID `0x540`: "Braille Rocker Up"
    BrailleRockerUp,
    /// Usage ID `0x541`: "Braille Rocker Down"
    BrailleRockerDown,
    /// Usage ID `0x542`: "Braille Rocker Press"
    BrailleRockerPress,
}

impl fmt::Display for BrailleDisplay {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            BrailleDisplay::Undefined => "Undefined",
            BrailleDisplay::BrailleDisplay => "Braille Display",
            BrailleDisplay::BrailleRow => "Braille Row",
            BrailleDisplay::EightDotBrailleCell => "8 Dot Braille Cell",
            BrailleDisplay::SixDotBrailleCell => "6 Dot Braille Cell",
            BrailleDisplay::NumberofBrailleCells => "Number of Braille Cells",
            BrailleDisplay::ScreenReaderControl => "Screen Reader Control",
            BrailleDisplay::ScreenReaderIdentifier => "Screen Reader Identifier",
            BrailleDisplay::RouterSet1 => "Router Set 1",
            BrailleDisplay::RouterSet2 => "Router Set 2",
            BrailleDisplay::RouterSet3 => "Router Set 3",
            BrailleDisplay::RouterButton => "Router Button",
            BrailleDisplay::BrailleButtons => "Braille Buttons",
            BrailleDisplay::BrailleKeyboardDot1 => "Braille Keyboard Dot 1",
            BrailleDisplay::BrailleKeyboardDot2 => "Braille Keyboard Dot 2",
            BrailleDisplay::BrailleKeyboardDot3 => "Braille Keyboard Dot 3",
            BrailleDisplay::BrailleKeyboardDot4 => "Braille Keyboard Dot 4",
            BrailleDisplay::BrailleKeyboardDot5 => "Braille Keyboard Dot 5",
            BrailleDisplay::BrailleKeyboardDot6 => "Braille Keyboard Dot 6",
            BrailleDisplay::BrailleKeyboardDot7 => "Braille Keyboard Dot 7",
            BrailleDisplay::BrailleKeyboardDot8 => "Braille Keyboard Dot 8",
            BrailleDisplay::BrailleKeyboardSpace => "Braille Keyboard Space",
            BrailleDisplay::BrailleKeyboardLeftSpace => "Braille Keyboard Left Space",
            BrailleDisplay::BrailleKeyboardRightSpace => "Braille Keyboard Right Space",
            BrailleDisplay::BrailleFaceControls => "Braille Face Controls",
            BrailleDisplay::BrailleLeftControls => "Braille Left Controls",
            BrailleDisplay::BrailleRightControls => "Braille Right Controls",
            BrailleDisplay::BrailleTopControls => "Braille Top Controls",
            BrailleDisplay::BrailleJoystickCenter => "Braille Joystick Center",
            BrailleDisplay::BrailleJoystickUp => "Braille Joystick Up",
            BrailleDisplay::BrailleJoystickDown => "Braille Joystick Down",
            BrailleDisplay::BrailleJoystickLeft => "Braille Joystick Left",
            BrailleDisplay::BrailleJoystickRight => "Braille Joystick Right",
            BrailleDisplay::BrailleDPadCenter => "Braille D ‐ Pad Center",
            BrailleDisplay::BrailleDPadUp => "Braille D ‐ Pad Up",
            BrailleDisplay::BrailleDPadDown => "Braille D ‐ Pad Down",
            BrailleDisplay::BrailleDPadLeft => "Braille D ‐ Pad Left",
            BrailleDisplay::BrailleDPadRight => "Braille D ‐ Pad Right",
            BrailleDisplay::BraillePanLeft => "Braille Pan Left",
            BrailleDisplay::BraillePanRight => "Braille Pan Right",
            BrailleDisplay::BrailleRockerUp => "Braille Rocker Up",
            BrailleDisplay::BrailleRockerDown => "Braille Rocker Down",
            BrailleDisplay::BrailleRockerPress => "Braille Rocker Press",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x89`: "Lighting and Illumination"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum LightingandIllumination {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Lamp Array"
    LampArray,
    /// Usage ID `0x2`: "Lamp Array Attributes Report"
    LampArrayAttributesReport,
    /// Usage ID `0x3`: "Lamp Count"
    LampCount,
    /// Usage ID `0x4`: "Bounding Box Width In Micrometers"
    BoundingBoxWidthInMicrometers,
    /// Usage ID `0x5`: "Bounding Box Height In Micrometers"
    BoundingBoxHeightInMicrometers,
    /// Usage ID `0x6`: "Bounding Box Depth In Micrometers"
    BoundingBoxDepthInMicrometers,
    /// Usage ID `0x7`: "Lamp Array Kind"
    LampArrayKind,
    /// Usage ID `0x8`: "Min Update Interval In Microseconds"
    MinUpdateIntervalInMicroseconds,
    /// Usage ID `0x32`: "Lamp Attributes Request Report"
    LampAttributesRequestReport,
    /// Usage ID `0x33`: "Lamp Id"
    LampId,
    /// Usage ID `0x34`: "Lamp Attributes Response Report"
    LampAttributesResponseReport,
    /// Usage ID `0x35`: "Position X In Micrometers"
    PositionXInMicrometers,
    /// Usage ID `0x36`: "Position Y In Micrometers"
    PositionYInMicrometers,
    /// Usage ID `0x37`: "Position Z In Micrometers"
    PositionZInMicrometers,
    /// Usage ID `0x38`: "Lamp Purposes"
    LampPurposes,
    /// Usage ID `0x39`: "Update Latency In Microseconds"
    UpdateLatencyInMicroseconds,
    /// Usage ID `0x40`: "Red Level Count"
    RedLevelCount,
    /// Usage ID `0x41`: "Green Level Count"
    GreenLevelCount,
    /// Usage ID `0x42`: "Blue Level Count"
    BlueLevelCount,
    /// Usage ID `0x43`: "Intensity Level Count"
    IntensityLevelCount,
    /// Usage ID `0x44`: "Is Programmable"
    IsProgrammable,
    /// Usage ID `0x45`: "Input Binding"
    InputBinding,
    /// Usage ID `0x80`: "Lamp Multi Update Report"
    LampMultiUpdateReport,
    /// Usage ID `0x81`: "Red Update Channel"
    RedUpdateChannel,
    /// Usage ID `0x82`: "Green Update Channel"
    GreenUpdateChannel,
    /// Usage ID `0x83`: "Blue Update Channel"
    BlueUpdateChannel,
    /// Usage ID `0x84`: "Intensity Update Channel"
    IntensityUpdateChannel,
    /// Usage ID `0x85`: "Lamp Update Flags"
    LampUpdateFlags,
    /// Usage ID `0x96`: "Lamp Range Update Report"
    LampRangeUpdateReport,
    /// Usage ID `0x97`: "Lamp Id Start"
    LampIdStart,
    /// Usage ID `0x98`: "Lamp Id End"
    LampIdEnd,
    /// Usage ID `0x112`: "Lamp Array Control Report"
    LampArrayControlReport,
    /// Usage ID `0x113`: "Autonomous Mode"
    AutonomousMode,
}

impl fmt::Display for LightingandIllumination {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            LightingandIllumination::Undefined => "Undefined",
            LightingandIllumination::LampArray => "Lamp Array",
            LightingandIllumination::LampArrayAttributesReport => "Lamp Array Attributes Report",
            LightingandIllumination::LampCount => "Lamp Count",
            LightingandIllumination::BoundingBoxWidthInMicrometers => {
                "Bounding Box Width In Micrometers"
            }
            LightingandIllumination::BoundingBoxHeightInMicrometers => {
                "Bounding Box Height In Micrometers"
            }
            LightingandIllumination::BoundingBoxDepthInMicrometers => {
                "Bounding Box Depth In Micrometers"
            }
            LightingandIllumination::LampArrayKind => "Lamp Array Kind",
            LightingandIllumination::MinUpdateIntervalInMicroseconds => {
                "Min Update Interval In Microseconds"
            }
            LightingandIllumination::LampAttributesRequestReport => {
                "Lamp Attributes Request Report"
            }
            LightingandIllumination::LampId => "Lamp Id",
            LightingandIllumination::LampAttributesResponseReport => {
                "Lamp Attributes Response Report"
            }
            LightingandIllumination::PositionXInMicrometers => "Position X In Micrometers",
            LightingandIllumination::PositionYInMicrometers => "Position Y In Micrometers",
            LightingandIllumination::PositionZInMicrometers => "Position Z In Micrometers",
            LightingandIllumination::LampPurposes => "Lamp Purposes",
            LightingandIllumination::UpdateLatencyInMicroseconds => {
                "Update Latency In Microseconds"
            }
            LightingandIllumination::RedLevelCount => "Red Level Count",
            LightingandIllumination::GreenLevelCount => "Green Level Count",
            LightingandIllumination::BlueLevelCount => "Blue Level Count",
            LightingandIllumination::IntensityLevelCount => "Intensity Level Count",
            LightingandIllumination::IsProgrammable => "Is Programmable",
            LightingandIllumination::InputBinding => "Input Binding",
            LightingandIllumination::LampMultiUpdateReport => "Lamp Multi Update Report",
            LightingandIllumination::RedUpdateChannel => "Red Update Channel",
            LightingandIllumination::GreenUpdateChannel => "Green Update Channel",
            LightingandIllumination::BlueUpdateChannel => "Blue Update Channel",
            LightingandIllumination::IntensityUpdateChannel => "Intensity Update Channel",
            LightingandIllumination::LampUpdateFlags => "Lamp Update Flags",
            LightingandIllumination::LampRangeUpdateReport => "Lamp Range Update Report",
            LightingandIllumination::LampIdStart => "Lamp Id Start",
            LightingandIllumination::LampIdEnd => "Lamp Id End",
            LightingandIllumination::LampArrayControlReport => "Lamp Array Control Report",
            LightingandIllumination::AutonomousMode => "Autonomous Mode",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x128`: "Monitor"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Monitor {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Monitor Control"
    MonitorControl,
    /// Usage ID `0x2`: "EDID Information"
    EDIDInformation,
    /// Usage ID `0x3`: "VDIF Information"
    VDIFInformation,
    /// Usage ID `0x4`: "VESA Version"
    VESAVersion,
    /// Usage ID `0x5`: "On Screen Display"
    OnScreenDisplay,
    /// Usage ID `0x6`: "Auto Size Center"
    AutoSizeCenter,
    /// Usage ID `0x7`: "Polarity Horz Synch"
    PolarityHorzSynch,
    /// Usage ID `0x8`: "Polarity Vert Synch"
    PolarityVertSynch,
    /// Usage ID `0x9`: "Sync Type"
    SyncType,
    /// Usage ID `0x10`: "Screen Position"
    ScreenPosition,
    /// Usage ID `0x11`: "Horizontal Frequency"
    HorizontalFrequency,
    /// Usage ID `0x12`: "Vertical Frequency"
    VerticalFrequency,
}

impl fmt::Display for Monitor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Monitor::Undefined => "Undefined",
            Monitor::MonitorControl => "Monitor Control",
            Monitor::EDIDInformation => "EDID Information",
            Monitor::VDIFInformation => "VDIF Information",
            Monitor::VESAVersion => "VESA Version",
            Monitor::OnScreenDisplay => "On Screen Display",
            Monitor::AutoSizeCenter => "Auto Size Center",
            Monitor::PolarityHorzSynch => "Polarity Horz Synch",
            Monitor::PolarityVertSynch => "Polarity Vert Synch",
            Monitor::SyncType => "Sync Type",
            Monitor::ScreenPosition => "Screen Position",
            Monitor::HorizontalFrequency => "Horizontal Frequency",
            Monitor::VerticalFrequency => "Vertical Frequency",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x129`: "Monitor Enumerated Values"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum MonitorEnumeratedValues {
    /// Usage ID `0x0`: "unassigned"
    unassigned,
}

impl fmt::Display for MonitorEnumeratedValues {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            MonitorEnumeratedValues::unassigned => "unassigned",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x130`: "VESA Virtual Controls"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VESAVirtualControls {
    /// Usage ID `0x16`: "Brightness"
    Brightness,
    /// Usage ID `0x18`: "Contrast"
    Contrast,
    /// Usage ID `0x22`: "Video Gain Red"
    VideoGainRed,
    /// Usage ID `0x24`: "Video Gain Green"
    VideoGainGreen,
    /// Usage ID `0x26`: "Video Gain Blue"
    VideoGainBlue,
    /// Usage ID `0x28`: "Focus"
    Focus,
    /// Usage ID `0x32`: "Horizontal Position"
    HorizontalPosition,
    /// Usage ID `0x34`: "Horizontal Size"
    HorizontalSize,
    /// Usage ID `0x36`: "Horizontal Pincushion"
    HorizontalPincushion,
    /// Usage ID `0x38`: "Horizontal Pincushion Balance"
    HorizontalPincushionBalance,
    /// Usage ID `0x40`: "Horizontal Misconvergence"
    HorizontalMisconvergence,
    /// Usage ID `0x42`: "Horizontal Linearity"
    HorizontalLinearity,
    /// Usage ID `0x44`: "Horizontal Linearity Balance"
    HorizontalLinearityBalance,
    /// Usage ID `0x48`: "Vertical Position"
    VerticalPosition,
    /// Usage ID `0x50`: "Vertical Size"
    VerticalSize,
    /// Usage ID `0x52`: "Vertical Pincushion"
    VerticalPincushion,
    /// Usage ID `0x54`: "Vertical Pincushion Balance"
    VerticalPincushionBalance,
    /// Usage ID `0x56`: "Vertical Misconvergence"
    VerticalMisconvergence,
    /// Usage ID `0x58`: "Vertical Linearity"
    VerticalLinearity,
    /// Usage ID `0x60`: "Vertical Linearity Balance"
    VerticalLinearityBalance,
    /// Usage ID `0x64`: "Parallelogram Distortion"
    ParallelogramDistortion,
    /// Usage ID `0x66`: "Trapezoidal Distortion"
    TrapezoidalDistortion,
    /// Usage ID `0x68`: "Tilt"
    Tilt,
    /// Usage ID `0x70`: "Top Corner Distortion Control"
    TopCornerDistortionControl,
    /// Usage ID `0x72`: "Top Corner Distortion Balance"
    TopCornerDistortionBalance,
    /// Usage ID `0x74`: "Bottom Corner Distortion Control"
    BottomCornerDistortionControl,
    /// Usage ID `0x76`: "Bottom Corner Distortion Balance"
    BottomCornerDistortionBalance,
    /// Usage ID `0x86`: "Moiré Horizontal"
    MoiréHorizontal,
    /// Usage ID `0x88`: "Moiré Vertical"
    MoiréVertical,
    /// Usage ID `0x94`: "Input Level Select"
    InputLevelSelect,
    /// Usage ID `0x96`: "Input Source Select"
    InputSourceSelect,
    /// Usage ID `0x98`: "Stereo Mode"
    StereoMode,
    /// Usage ID `0x108`: "Video Black Level Red"
    VideoBlackLevelRed,
    /// Usage ID `0x110`: "Video Black Level Green"
    VideoBlackLevelGreen,
    /// Usage ID `0x112`: "Video Black Level Blue"
    VideoBlackLevelBlue,
}

impl fmt::Display for VESAVirtualControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VESAVirtualControls::Brightness => "Brightness",
            VESAVirtualControls::Contrast => "Contrast",
            VESAVirtualControls::VideoGainRed => "Video Gain Red",
            VESAVirtualControls::VideoGainGreen => "Video Gain Green",
            VESAVirtualControls::VideoGainBlue => "Video Gain Blue",
            VESAVirtualControls::Focus => "Focus",
            VESAVirtualControls::HorizontalPosition => "Horizontal Position",
            VESAVirtualControls::HorizontalSize => "Horizontal Size",
            VESAVirtualControls::HorizontalPincushion => "Horizontal Pincushion",
            VESAVirtualControls::HorizontalPincushionBalance => "Horizontal Pincushion Balance",
            VESAVirtualControls::HorizontalMisconvergence => "Horizontal Misconvergence",
            VESAVirtualControls::HorizontalLinearity => "Horizontal Linearity",
            VESAVirtualControls::HorizontalLinearityBalance => "Horizontal Linearity Balance",
            VESAVirtualControls::VerticalPosition => "Vertical Position",
            VESAVirtualControls::VerticalSize => "Vertical Size",
            VESAVirtualControls::VerticalPincushion => "Vertical Pincushion",
            VESAVirtualControls::VerticalPincushionBalance => "Vertical Pincushion Balance",
            VESAVirtualControls::VerticalMisconvergence => "Vertical Misconvergence",
            VESAVirtualControls::VerticalLinearity => "Vertical Linearity",
            VESAVirtualControls::VerticalLinearityBalance => "Vertical Linearity Balance",
            VESAVirtualControls::ParallelogramDistortion => "Parallelogram Distortion",
            VESAVirtualControls::TrapezoidalDistortion => "Trapezoidal Distortion",
            VESAVirtualControls::Tilt => "Tilt",
            VESAVirtualControls::TopCornerDistortionControl => "Top Corner Distortion Control",
            VESAVirtualControls::TopCornerDistortionBalance => "Top Corner Distortion Balance",
            VESAVirtualControls::BottomCornerDistortionControl => {
                "Bottom Corner Distortion Control"
            }
            VESAVirtualControls::BottomCornerDistortionBalance => {
                "Bottom Corner Distortion Balance"
            }
            VESAVirtualControls::MoiréHorizontal => "Moiré Horizontal",
            VESAVirtualControls::MoiréVertical => "Moiré Vertical",
            VESAVirtualControls::InputLevelSelect => "Input Level Select",
            VESAVirtualControls::InputSourceSelect => "Input Source Select",
            VESAVirtualControls::StereoMode => "Stereo Mode",
            VESAVirtualControls::VideoBlackLevelRed => "Video Black Level Red",
            VESAVirtualControls::VideoBlackLevelGreen => "Video Black Level Green",
            VESAVirtualControls::VideoBlackLevelBlue => "Video Black Level Blue",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x131`: "VESA Command"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VESACommand {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "Settings"
    Settings,
    /// Usage ID `0x2`: "Degauss"
    Degauss,
}

impl fmt::Display for VESACommand {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VESACommand::Undefined => "Undefined",
            VESACommand::Settings => "Settings",
            VESACommand::Degauss => "Degauss",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x132`: "Power Device"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum PowerDevice {
    /// Usage ID `0x6`: "Peripheral Device"
    PeripheralDevice,
}

impl fmt::Display for PowerDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            PowerDevice::PeripheralDevice => "Peripheral Device",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x133`: "Battery System"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum BatterySystem {}

impl fmt::Display for BatterySystem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            _ => "",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x140`: "Bar Code Scanner"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum BarCodeScanner {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
}

impl fmt::Display for BarCodeScanner {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            BarCodeScanner::Undefined => "Undefined",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x141`: "Scale"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Scale {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
}

impl fmt::Display for Scale {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Scale::Undefined => "Undefined",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x142`: "Magnetic Stripe Reading"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum MagneticStripeReading {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
}

impl fmt::Display for MagneticStripeReading {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            MagneticStripeReading::Undefined => "Undefined",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x144`: "Camera Control"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum CameraControl {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x32`: "Camera Auto-focus"
    CameraAutofocus,
    /// Usage ID `0x33`: "Camera Shutter"
    CameraShutter,
}

impl fmt::Display for CameraControl {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            CameraControl::Undefined => "Undefined",
            CameraControl::CameraAutofocus => "Camera Auto-focus",
            CameraControl::CameraShutter => "Camera Shutter",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x145`: "Arcade Page OAAF"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum ArcadePageOAAF {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
}

impl fmt::Display for ArcadePageOAAF {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            ArcadePageOAAF::Undefined => "Undefined",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x146`: "Gaming Device"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GamingDevice {}

impl fmt::Display for GamingDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            _ => "",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x61904`: "FIDO Alliance"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum FIDOAlliance {
    /// Usage ID `0x0`: "Undefined"
    Undefined,
    /// Usage ID `0x1`: "U2F Authenticator Device"
    U2FAuthenticatorDevice,
    /// Usage ID `0x32`: "Input Report Data"
    InputReportData,
    /// Usage ID `0x33`: "Output Report Data"
    OutputReportData,
}

impl fmt::Display for FIDOAlliance {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            FIDOAlliance::Undefined => "Undefined",
            FIDOAlliance::U2FAuthenticatorDevice => "U2F Authenticator Device",
            FIDOAlliance::InputReportData => "Input Report Data",
            FIDOAlliance::OutputReportData => "Output Report Data",
        };
        write!(f, "{name}")
    }
}

/// Usage Page `0x65293`: "Wacom"
///
/// **This enum is autogenerated from the HID Usage Tables**.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Wacom {
    /// Usage ID `0x1`: "Wacom Digitizer"
    WacomDigitizer,
    /// Usage ID `0x2`: "Wacom Pen"
    WacomPen,
    /// Usage ID `0x3`: "Light Pen"
    LightPen,
    /// Usage ID `0x4`: "Touch Screen"
    TouchScreen,
    /// Usage ID `0x5`: "Touch Pad"
    TouchPad,
    /// Usage ID `0x6`: "White Board"
    WhiteBoard,
    /// Usage ID `0x7`: "Coordinate Measuring Machine"
    CoordinateMeasuringMachine,
    /// Usage ID `0x8`: "3-D Digitizer"
    ThreeDDigitizer,
    /// Usage ID `0x9`: "Stereo Plotter"
    StereoPlotter,
    /// Usage ID `0x10`: "Articulated Arm"
    ArticulatedArm,
    /// Usage ID `0x11`: "Armature"
    Armature,
    /// Usage ID `0x12`: "Multiple Point Digitizer"
    MultiplePointDigitizer,
    /// Usage ID `0x13`: "Free Space Wand"
    FreeSpaceWand,
    /// Usage ID `0x14`: "Device Configuration"
    DeviceConfiguration,
    /// Usage ID `0x32`: "Stylus"
    Stylus,
    /// Usage ID `0x33`: "Puck"
    Puck,
    /// Usage ID `0x34`: "Finger"
    Finger,
    /// Usage ID `0x35`: "Device Settings"
    DeviceSettings,
    /// Usage ID `0x48`: "Tip Pressure"
    TipPressure,
    /// Usage ID `0x49`: "Barrel Pressure"
    BarrelPressure,
    /// Usage ID `0x50`: "In Range"
    InRange,
    /// Usage ID `0x51`: "Touch"
    Touch,
    /// Usage ID `0x52`: "Untouch"
    Untouch,
    /// Usage ID `0x53`: "Tap"
    Tap,
    /// Usage ID `0x54`: "Wacom Sense"
    WacomSense,
    /// Usage ID `0x55`: "Data Valid"
    DataValid,
    /// Usage ID `0x56`: "Transducer Index"
    TransducerIndex,
    /// Usage ID `0x57`: "Wacom DigitizerFnKeys"
    WacomDigitizerFnKeys,
    /// Usage ID `0x58`: "Program Change Keys"
    ProgramChangeKeys,
    /// Usage ID `0x59`: "Battery Strength"
    BatteryStrength,
    /// Usage ID `0x60`: "Invert"
    Invert,
    /// Usage ID `0x61`: "X Tilt"
    XTilt,
    /// Usage ID `0x62`: "Y Tilt"
    YTilt,
    /// Usage ID `0x63`: "Azimuth"
    Azimuth,
    /// Usage ID `0x64`: "Altitude"
    Altitude,
    /// Usage ID `0x65`: "Twist"
    Twist,
    /// Usage ID `0x66`: "Tip Switch"
    TipSwitch,
    /// Usage ID `0x67`: "Secondary Tip Switch"
    SecondaryTipSwitch,
    /// Usage ID `0x68`: "Barrel Switch"
    BarrelSwitch,
    /// Usage ID `0x69`: "Eraser"
    Eraser,
    /// Usage ID `0x70`: "Tablet Pick"
    TabletPick,
    /// Usage ID `0x71`: "Confidence"
    Confidence,
    /// Usage ID `0x72`: "Width"
    Width,
    /// Usage ID `0x73`: "Height"
    Height,
    /// Usage ID `0x81`: "Contact Id"
    ContactId,
    /// Usage ID `0x82`: "Inputmode"
    Inputmode,
    /// Usage ID `0x83`: "Device Index"
    DeviceIndex,
    /// Usage ID `0x84`: "Contact Count"
    ContactCount,
    /// Usage ID `0x85`: "Contact Max"
    ContactMax,
    /// Usage ID `0x86`: "Scan Time"
    ScanTime,
    /// Usage ID `0x87`: "Surface Switch"
    SurfaceSwitch,
    /// Usage ID `0x88`: "Button Switch"
    ButtonSwitch,
    /// Usage ID `0x89`: "Button Type"
    ButtonType,
    /// Usage ID `0x90`: "Secondary Barrel Switch"
    SecondaryBarrelSwitch,
    /// Usage ID `0x91`: "Transducer Serial Number"
    TransducerSerialNumber,
    /// Usage ID `0x92`: "Wacom SerialHi"
    WacomSerialHi,
    /// Usage ID `0x93`: "Preferred Color is Locked"
    PreferredColorisLocked,
    /// Usage ID `0x94`: "Preferred Line Width"
    PreferredLineWidth,
    /// Usage ID `0x95`: "Preferred Line Width is Locked"
    PreferredLineWidthisLocked,
    /// Usage ID `0x112`: "Preferred Line Style"
    PreferredLineStyle,
    /// Usage ID `0x113`: "Preferred Line Style is Locked"
    PreferredLineStyleisLocked,
    /// Usage ID `0x114`: "Ink"
    Ink,
    /// Usage ID `0x115`: "Pencil"
    Pencil,
    /// Usage ID `0x116`: "Highlighter"
    Highlighter,
    /// Usage ID `0x117`: "Chisel Marker"
    ChiselMarker,
    /// Usage ID `0x118`: "Brush"
    Brush,
    /// Usage ID `0x119`: "Wacom ToolType"
    WacomToolType,
    /// Usage ID `0x128`: "Digitizer Diagnostic"
    DigitizerDiagnostic,
    /// Usage ID `0x129`: "Digitizer Error"
    DigitizerError,
    /// Usage ID `0x130`: "Err Normal Status"
    ErrNormalStatus,
    /// Usage ID `0x131`: "Err Transducers Exceeded"
    ErrTransducersExceeded,
    /// Usage ID `0x132`: "Err Full Trans Features Unavail"
    ErrFullTransFeaturesUnavail,
    /// Usage ID `0x133`: "Err Charge Low"
    ErrChargeLow,
    /// Usage ID `0x304`: "X"
    X,
    /// Usage ID `0x305`: "Y"
    Y,
    /// Usage ID `0x306`: "Wacom Distance"
    WacomDistance,
    /// Usage ID `0x310`: "Wacom TouchStrip"
    WacomTouchStrip,
    /// Usage ID `0x311`: "Wacom TouchStrip2"
    WacomTouchStrip2,
    /// Usage ID `0x312`: "Wacom TouchRing"
    WacomTouchRing,
    /// Usage ID `0x313`: "Wacom TouchRingStatus"
    WacomTouchRingStatus,
    /// Usage ID `0x1025`: "Wacom Accelerometer X"
    WacomAccelerometerX,
    /// Usage ID `0x1026`: "Wacom Accelerometer Y"
    WacomAccelerometerY,
    /// Usage ID `0x1027`: "Wacom Accelerometer Z"
    WacomAccelerometerZ,
    /// Usage ID `0x1028`: "Wacom Battery Charging"
    WacomBatteryCharging,
    /// Usage ID `0x1108`: "Wacom TouchOnOff"
    WacomTouchOnOff,
    /// Usage ID `0x1083`: "Wacom Battery Level"
    WacomBatteryLevel,
    /// Usage ID `0x2320`: "Wacom ExpressKey00"
    WacomExpressKey00,
    /// Usage ID `0x2384`: "Wacom ExpressKeyCap00"
    WacomExpressKeyCap00,
    /// Usage ID `0x2432`: "Wacom Mode Change"
    WacomModeChange,
    /// Usage ID `0x2433`: "Wacom Button Desktop Center"
    WacomButtonDesktopCenter,
    /// Usage ID `0x2434`: "Wacom Button On Screen Keyboard"
    WacomButtonOnScreenKeyboard,
    /// Usage ID `0x2435`: "Wacom Button Display Setting"
    WacomButtonDisplaySetting,
    /// Usage ID `0x2438`: "Wacom Button Touch On/Off"
    WacomButtonTouchOnOff,
    /// Usage ID `0x2448`: "Wacom Button Home"
    WacomButtonHome,
    /// Usage ID `0x2449`: "Wacom Button Up"
    WacomButtonUp,
    /// Usage ID `0x2450`: "Wacom Button Down"
    WacomButtonDown,
    /// Usage ID `0x2451`: "Wacom Button Left"
    WacomButtonLeft,
    /// Usage ID `0x2452`: "Wacom Button Right"
    WacomButtonRight,
    /// Usage ID `0x2453`: "Wacom Button Center"
    WacomButtonCenter,
    /// Usage ID `0x3331`: "Wacom FingerWheel"
    WacomFingerWheel,
    /// Usage ID `0x3376`: "Wacom Offset Left"
    WacomOffsetLeft,
    /// Usage ID `0x3377`: "Wacom Offset Top"
    WacomOffsetTop,
    /// Usage ID `0x3378`: "Wacom Offset Right"
    WacomOffsetRight,
    /// Usage ID `0x3379`: "Wacom Offset Bottom"
    WacomOffsetBottom,
    /// Usage ID `0x4098`: "Wacom DataMode"
    WacomDataMode,
    /// Usage ID `0x4115`: "Wacom Digitizer Info"
    WacomDigitizerInfo,
}

impl fmt::Display for Wacom {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Wacom::WacomDigitizer => "Wacom Digitizer",
            Wacom::WacomPen => "Wacom Pen",
            Wacom::LightPen => "Light Pen",
            Wacom::TouchScreen => "Touch Screen",
            Wacom::TouchPad => "Touch Pad",
            Wacom::WhiteBoard => "White Board",
            Wacom::CoordinateMeasuringMachine => "Coordinate Measuring Machine",
            Wacom::ThreeDDigitizer => "3-D Digitizer",
            Wacom::StereoPlotter => "Stereo Plotter",
            Wacom::ArticulatedArm => "Articulated Arm",
            Wacom::Armature => "Armature",
            Wacom::MultiplePointDigitizer => "Multiple Point Digitizer",
            Wacom::FreeSpaceWand => "Free Space Wand",
            Wacom::DeviceConfiguration => "Device Configuration",
            Wacom::Stylus => "Stylus",
            Wacom::Puck => "Puck",
            Wacom::Finger => "Finger",
            Wacom::DeviceSettings => "Device Settings",
            Wacom::TipPressure => "Tip Pressure",
            Wacom::BarrelPressure => "Barrel Pressure",
            Wacom::InRange => "In Range",
            Wacom::Touch => "Touch",
            Wacom::Untouch => "Untouch",
            Wacom::Tap => "Tap",
            Wacom::WacomSense => "Wacom Sense",
            Wacom::DataValid => "Data Valid",
            Wacom::TransducerIndex => "Transducer Index",
            Wacom::WacomDigitizerFnKeys => "Wacom DigitizerFnKeys",
            Wacom::ProgramChangeKeys => "Program Change Keys",
            Wacom::BatteryStrength => "Battery Strength",
            Wacom::Invert => "Invert",
            Wacom::XTilt => "X Tilt",
            Wacom::YTilt => "Y Tilt",
            Wacom::Azimuth => "Azimuth",
            Wacom::Altitude => "Altitude",
            Wacom::Twist => "Twist",
            Wacom::TipSwitch => "Tip Switch",
            Wacom::SecondaryTipSwitch => "Secondary Tip Switch",
            Wacom::BarrelSwitch => "Barrel Switch",
            Wacom::Eraser => "Eraser",
            Wacom::TabletPick => "Tablet Pick",
            Wacom::Confidence => "Confidence",
            Wacom::Width => "Width",
            Wacom::Height => "Height",
            Wacom::ContactId => "Contact Id",
            Wacom::Inputmode => "Inputmode",
            Wacom::DeviceIndex => "Device Index",
            Wacom::ContactCount => "Contact Count",
            Wacom::ContactMax => "Contact Max",
            Wacom::ScanTime => "Scan Time",
            Wacom::SurfaceSwitch => "Surface Switch",
            Wacom::ButtonSwitch => "Button Switch",
            Wacom::ButtonType => "Button Type",
            Wacom::SecondaryBarrelSwitch => "Secondary Barrel Switch",
            Wacom::TransducerSerialNumber => "Transducer Serial Number",
            Wacom::WacomSerialHi => "Wacom SerialHi",
            Wacom::PreferredColorisLocked => "Preferred Color is Locked",
            Wacom::PreferredLineWidth => "Preferred Line Width",
            Wacom::PreferredLineWidthisLocked => "Preferred Line Width is Locked",
            Wacom::PreferredLineStyle => "Preferred Line Style",
            Wacom::PreferredLineStyleisLocked => "Preferred Line Style is Locked",
            Wacom::Ink => "Ink",
            Wacom::Pencil => "Pencil",
            Wacom::Highlighter => "Highlighter",
            Wacom::ChiselMarker => "Chisel Marker",
            Wacom::Brush => "Brush",
            Wacom::WacomToolType => "Wacom ToolType",
            Wacom::DigitizerDiagnostic => "Digitizer Diagnostic",
            Wacom::DigitizerError => "Digitizer Error",
            Wacom::ErrNormalStatus => "Err Normal Status",
            Wacom::ErrTransducersExceeded => "Err Transducers Exceeded",
            Wacom::ErrFullTransFeaturesUnavail => "Err Full Trans Features Unavail",
            Wacom::ErrChargeLow => "Err Charge Low",
            Wacom::X => "X",
            Wacom::Y => "Y",
            Wacom::WacomDistance => "Wacom Distance",
            Wacom::WacomTouchStrip => "Wacom TouchStrip",
            Wacom::WacomTouchStrip2 => "Wacom TouchStrip2",
            Wacom::WacomTouchRing => "Wacom TouchRing",
            Wacom::WacomTouchRingStatus => "Wacom TouchRingStatus",
            Wacom::WacomAccelerometerX => "Wacom Accelerometer X",
            Wacom::WacomAccelerometerY => "Wacom Accelerometer Y",
            Wacom::WacomAccelerometerZ => "Wacom Accelerometer Z",
            Wacom::WacomBatteryCharging => "Wacom Battery Charging",
            Wacom::WacomTouchOnOff => "Wacom TouchOnOff",
            Wacom::WacomBatteryLevel => "Wacom Battery Level",
            Wacom::WacomExpressKey00 => "Wacom ExpressKey00",
            Wacom::WacomExpressKeyCap00 => "Wacom ExpressKeyCap00",
            Wacom::WacomModeChange => "Wacom Mode Change",
            Wacom::WacomButtonDesktopCenter => "Wacom Button Desktop Center",
            Wacom::WacomButtonOnScreenKeyboard => "Wacom Button On Screen Keyboard",
            Wacom::WacomButtonDisplaySetting => "Wacom Button Display Setting",
            Wacom::WacomButtonTouchOnOff => "Wacom Button Touch On/Off",
            Wacom::WacomButtonHome => "Wacom Button Home",
            Wacom::WacomButtonUp => "Wacom Button Up",
            Wacom::WacomButtonDown => "Wacom Button Down",
            Wacom::WacomButtonLeft => "Wacom Button Left",
            Wacom::WacomButtonRight => "Wacom Button Right",
            Wacom::WacomButtonCenter => "Wacom Button Center",
            Wacom::WacomFingerWheel => "Wacom FingerWheel",
            Wacom::WacomOffsetLeft => "Wacom Offset Left",
            Wacom::WacomOffsetTop => "Wacom Offset Top",
            Wacom::WacomOffsetRight => "Wacom Offset Right",
            Wacom::WacomOffsetBottom => "Wacom Offset Bottom",
            Wacom::WacomDataMode => "Wacom DataMode",
            Wacom::WacomDigitizerInfo => "Wacom Digitizer Info",
        };
        write!(f, "{name}")
    }
}

/// The Vendor Defined Page.
///
/// This Usage Page has no named Usage IDs, any / Usages in this Usage Page are
/// private to a vendor implementation.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VendorDefinedPage1 {
    Undefined,
    VendorUsage { usage_id: u16 },
}

impl fmt::Display for VendorDefinedPage1 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VendorDefinedPage1::Undefined => format!("Vendor Usage Undefined"),
            VendorDefinedPage1::VendorUsage { usage_id } => format!("Vendor Usage 0x{usage_id:02}"),
        };
        write!(f, "{name}")
    }
}

impl TryFrom<&UsagePage> for u16 {
    type Error = HutError;

    /// Returns the UsagePage as 16-bit value. This is equivalent to the
    /// upper 16 bits of a full 32-bit Usage value shifted down.
    fn try_from(usage_page: &UsagePage) -> Result<u16> {
        match usage_page {
            UsagePage::Undefined { .. } => Ok(0),
            UsagePage::GenericDesktop { .. } => Ok(1),
            UsagePage::SimulationControls { .. } => Ok(2),
            UsagePage::VRControls { .. } => Ok(3),
            UsagePage::SportsControls { .. } => Ok(4),
            UsagePage::GamingControls { .. } => Ok(5),
            UsagePage::GenericDeviceControls { .. } => Ok(6),
            UsagePage::Keyboard { .. } => Ok(7),
            UsagePage::LEDs { .. } => Ok(8),
            UsagePage::Button { .. } => Ok(9),
            UsagePage::Ordinals { .. } => Ok(10),
            UsagePage::TelephonyDevices { .. } => Ok(11),
            UsagePage::ConsumerDevices { .. } => Ok(12),
            UsagePage::Digitizers { .. } => Ok(13),
            UsagePage::Haptic { .. } => Ok(14),
            UsagePage::Unicode { .. } => Ok(16),
            UsagePage::EyeandHeadTrackers { .. } => Ok(18),
            UsagePage::AuxiliaryDisplay { .. } => Ok(20),
            UsagePage::Sensor { .. } => Ok(32),
            UsagePage::MedicalInstruments { .. } => Ok(64),
            UsagePage::BrailleDisplay { .. } => Ok(65),
            UsagePage::LightingandIllumination { .. } => Ok(89),
            UsagePage::Monitor { .. } => Ok(128),
            UsagePage::MonitorEnumeratedValues { .. } => Ok(129),
            UsagePage::VESAVirtualControls { .. } => Ok(130),
            UsagePage::VESACommand { .. } => Ok(131),
            UsagePage::PowerDevice { .. } => Ok(132),
            UsagePage::BatterySystem { .. } => Ok(133),
            UsagePage::BarCodeScanner { .. } => Ok(140),
            UsagePage::Scale { .. } => Ok(141),
            UsagePage::MagneticStripeReading { .. } => Ok(142),
            UsagePage::CameraControl { .. } => Ok(144),
            UsagePage::ArcadePageOAAF { .. } => Ok(145),
            UsagePage::GamingDevice { .. } => Ok(146),
            UsagePage::FIDOAlliance { .. } => Ok(61904),
            UsagePage::Wacom { .. } => Ok(65293),
            UsagePage::VendorDefinedPage1 { .. } => Ok(0xff00),
        }
    }
}

impl TryFrom<u16> for UsagePage {
    type Error = HutError;

    fn try_from(usage_page: u16) -> Result<UsagePage> {
        match usage_page {
            0 => Ok(UsagePage::Undefined),
            1 => Ok(UsagePage::GenericDesktop),
            2 => Ok(UsagePage::SimulationControls),
            3 => Ok(UsagePage::VRControls),
            4 => Ok(UsagePage::SportsControls),
            5 => Ok(UsagePage::GamingControls),
            6 => Ok(UsagePage::GenericDeviceControls),
            7 => Ok(UsagePage::Keyboard),
            8 => Ok(UsagePage::LEDs),
            9 => Ok(UsagePage::Button),
            10 => Ok(UsagePage::Ordinals),
            11 => Ok(UsagePage::TelephonyDevices),
            12 => Ok(UsagePage::ConsumerDevices),
            13 => Ok(UsagePage::Digitizers),
            14 => Ok(UsagePage::Haptic),
            16 => Ok(UsagePage::Unicode),
            18 => Ok(UsagePage::EyeandHeadTrackers),
            20 => Ok(UsagePage::AuxiliaryDisplay),
            32 => Ok(UsagePage::Sensor),
            64 => Ok(UsagePage::MedicalInstruments),
            65 => Ok(UsagePage::BrailleDisplay),
            89 => Ok(UsagePage::LightingandIllumination),
            128 => Ok(UsagePage::Monitor),
            129 => Ok(UsagePage::MonitorEnumeratedValues),
            130 => Ok(UsagePage::VESAVirtualControls),
            131 => Ok(UsagePage::VESACommand),
            132 => Ok(UsagePage::PowerDevice),
            133 => Ok(UsagePage::BatterySystem),
            140 => Ok(UsagePage::BarCodeScanner),
            141 => Ok(UsagePage::Scale),
            142 => Ok(UsagePage::MagneticStripeReading),
            144 => Ok(UsagePage::CameraControl),
            145 => Ok(UsagePage::ArcadePageOAAF),
            146 => Ok(UsagePage::GamingDevice),
            61904 => Ok(UsagePage::FIDOAlliance),
            65293 => Ok(UsagePage::Wacom),
            0xff00 => Ok(UsagePage::VendorDefinedPage1),
            n => Err(HutError::UnknownUsagePage { usage_page: n }),
        }
    }
}

impl TryFrom<&types::UsagePage> for UsagePage {
    type Error = HutError;

    fn try_from(usage_page: &types::UsagePage) -> Result<UsagePage> {
        let up: u16 = usage_page.into();
        UsagePage::from_usage_page_value(up)
    }
}

impl fmt::Display for UsagePage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            UsagePage::Undefined => "Undefined",
            UsagePage::GenericDesktop => "Generic Desktop",
            UsagePage::SimulationControls => "Simulation Controls",
            UsagePage::VRControls => "VR Controls",
            UsagePage::SportsControls => "Sports Controls",
            UsagePage::GamingControls => "Gaming Controls",
            UsagePage::GenericDeviceControls => "Generic Device Controls",
            UsagePage::Keyboard => "Keyboard",
            UsagePage::LEDs => "LEDs",
            UsagePage::Button => "Button",
            UsagePage::Ordinals => "Ordinals",
            UsagePage::TelephonyDevices => "Telephony Devices",
            UsagePage::ConsumerDevices => "Consumer Devices",
            UsagePage::Digitizers => "Digitizers",
            UsagePage::Haptic => "Haptic",
            UsagePage::Unicode => "Unicode",
            UsagePage::EyeandHeadTrackers => "Eye and Head Trackers",
            UsagePage::AuxiliaryDisplay => "Auxiliary Display",
            UsagePage::Sensor => "Sensor",
            UsagePage::MedicalInstruments => "Medical Instruments",
            UsagePage::BrailleDisplay => "Braille Display",
            UsagePage::LightingandIllumination => "Lighting and Illumination",
            UsagePage::Monitor => "Monitor",
            UsagePage::MonitorEnumeratedValues => "Monitor Enumerated Values",
            UsagePage::VESAVirtualControls => "VESA Virtual Controls",
            UsagePage::VESACommand => "VESA Command",
            UsagePage::PowerDevice => "Power Device",
            UsagePage::BatterySystem => "Battery System",
            UsagePage::BarCodeScanner => "Bar Code Scanner",
            UsagePage::Scale => "Scale",
            UsagePage::MagneticStripeReading => "Magnetic Stripe Reading",
            UsagePage::CameraControl => "Camera Control",
            UsagePage::ArcadePageOAAF => "Arcade Page OAAF",
            UsagePage::GamingDevice => "Gaming Device",
            UsagePage::FIDOAlliance => "FIDO Alliance",
            UsagePage::Wacom => "Wacom",
            UsagePage::VendorDefinedPage1 => "Vendor Defined Page 1",
        };
        write!(f, "{name}")
    }
}

impl BitOr<u16> for Undefined {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for GenericDesktop {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for SimulationControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for VRControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for SportsControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for GamingControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for GenericDeviceControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Keyboard {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for LEDs {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Button {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Ordinals {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for TelephonyDevices {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for ConsumerDevices {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Digitizers {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Haptic {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Unicode {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for EyeandHeadTrackers {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for AuxiliaryDisplay {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Sensor {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for MedicalInstruments {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for BrailleDisplay {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for LightingandIllumination {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Monitor {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for MonitorEnumeratedValues {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for VESAVirtualControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for VESACommand {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for PowerDevice {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for BatterySystem {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for BarCodeScanner {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Scale {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for MagneticStripeReading {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for CameraControl {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for ArcadePageOAAF {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for GamingDevice {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for FIDOAlliance {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

impl BitOr<u16> for Wacom {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Self::Output {
        Usage::try_from(self as u32 | usage as u32).expect("Invalid Usage ID for this Usage Page")
    }
}

///
///
/// Note: this enum is generated from the HUT documents.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Usage {
    /// "Undefined"
    Undefined {
        usage: Undefined,
    },
    /// "Generic Desktop"
    GenericDesktop {
        usage: GenericDesktop,
    },
    /// "Simulation Controls"
    SimulationControls {
        usage: SimulationControls,
    },
    /// "VR Controls"
    VRControls {
        usage: VRControls,
    },
    /// "Sports Controls"
    SportsControls {
        usage: SportsControls,
    },
    /// "Gaming Controls"
    GamingControls {
        usage: GamingControls,
    },
    /// "Generic Device Controls"
    GenericDeviceControls {
        usage: GenericDeviceControls,
    },
    /// "Keyboard"
    Keyboard {
        usage: Keyboard,
    },
    /// "LEDs"
    LEDs {
        usage: LEDs,
    },
    /// "Button"
    Button {
        usage: Button,
    },
    /// "Ordinals"
    Ordinals {
        usage: Ordinals,
    },
    /// "Telephony Devices"
    TelephonyDevices {
        usage: TelephonyDevices,
    },
    /// "Consumer Devices"
    ConsumerDevices {
        usage: ConsumerDevices,
    },
    /// "Digitizers"
    Digitizers {
        usage: Digitizers,
    },
    /// "Haptic"
    Haptic {
        usage: Haptic,
    },
    /// "Unicode"
    Unicode {
        usage: Unicode,
    },
    /// "Eye and Head Trackers"
    EyeandHeadTrackers {
        usage: EyeandHeadTrackers,
    },
    /// "Auxiliary Display"
    AuxiliaryDisplay {
        usage: AuxiliaryDisplay,
    },
    /// "Sensor"
    Sensor {
        usage: Sensor,
    },
    /// "Medical Instruments"
    MedicalInstruments {
        usage: MedicalInstruments,
    },
    /// "Braille Display"
    BrailleDisplay {
        usage: BrailleDisplay,
    },
    /// "Lighting and Illumination"
    LightingandIllumination {
        usage: LightingandIllumination,
    },
    /// "Monitor"
    Monitor {
        usage: Monitor,
    },
    /// "Monitor Enumerated Values"
    MonitorEnumeratedValues {
        usage: MonitorEnumeratedValues,
    },
    /// "VESA Virtual Controls"
    VESAVirtualControls {
        usage: VESAVirtualControls,
    },
    /// "VESA Command"
    VESACommand {
        usage: VESACommand,
    },
    /// "Power Device"
    PowerDevice {
        usage: PowerDevice,
    },
    /// "Battery System"
    BatterySystem {
        usage: BatterySystem,
    },
    /// "Bar Code Scanner"
    BarCodeScanner {
        usage: BarCodeScanner,
    },
    /// "Scale"
    Scale {
        usage: Scale,
    },
    /// "Magnetic Stripe Reading"
    MagneticStripeReading {
        usage: MagneticStripeReading,
    },
    /// "Camera Control"
    CameraControl {
        usage: CameraControl,
    },
    /// "Arcade Page OAAF"
    ArcadePageOAAF {
        usage: ArcadePageOAAF,
    },
    /// "Gaming Device"
    GamingDevice {
        usage: GamingDevice,
    },
    /// "FIDO Alliance"
    FIDOAlliance {
        usage: FIDOAlliance,
    },
    /// "Wacom"
    Wacom {
        usage: Wacom,
    },
    VendorDefinedPage1 {
        usage: VendorDefinedPage1,
    },
}

impl Usage {
    /// Returns the 32 bit Usage value for this usage.
    pub fn usage(&self) -> u32 {
        self.into()
    }
}

impl fmt::Display for Usage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Usage::Undefined { usage } => format!("{usage}"),
            Usage::GenericDesktop { usage } => format!("{usage}"),
            Usage::SimulationControls { usage } => format!("{usage}"),
            Usage::VRControls { usage } => format!("{usage}"),
            Usage::SportsControls { usage } => format!("{usage}"),
            Usage::GamingControls { usage } => format!("{usage}"),
            Usage::GenericDeviceControls { usage } => format!("{usage}"),
            Usage::Keyboard { usage } => format!("{usage}"),
            Usage::LEDs { usage } => format!("{usage}"),
            Usage::Button { usage } => format!("{usage}"),
            Usage::Ordinals { usage } => format!("{usage}"),
            Usage::TelephonyDevices { usage } => format!("{usage}"),
            Usage::ConsumerDevices { usage } => format!("{usage}"),
            Usage::Digitizers { usage } => format!("{usage}"),
            Usage::Haptic { usage } => format!("{usage}"),
            Usage::Unicode { usage } => format!("{usage}"),
            Usage::EyeandHeadTrackers { usage } => format!("{usage}"),
            Usage::AuxiliaryDisplay { usage } => format!("{usage}"),
            Usage::Sensor { usage } => format!("{usage}"),
            Usage::MedicalInstruments { usage } => format!("{usage}"),
            Usage::BrailleDisplay { usage } => format!("{usage}"),
            Usage::LightingandIllumination { usage } => format!("{usage}"),
            Usage::Monitor { usage } => format!("{usage}"),
            Usage::MonitorEnumeratedValues { usage } => format!("{usage}"),
            Usage::VESAVirtualControls { usage } => format!("{usage}"),
            Usage::VESACommand { usage } => format!("{usage}"),
            Usage::PowerDevice { usage } => format!("{usage}"),
            Usage::BatterySystem { usage } => format!("{usage}"),
            Usage::BarCodeScanner { usage } => format!("{usage}"),
            Usage::Scale { usage } => format!("{usage}"),
            Usage::MagneticStripeReading { usage } => format!("{usage}"),
            Usage::CameraControl { usage } => format!("{usage}"),
            Usage::ArcadePageOAAF { usage } => format!("{usage}"),
            Usage::GamingDevice { usage } => format!("{usage}"),
            Usage::FIDOAlliance { usage } => format!("{usage}"),
            Usage::Wacom { usage } => format!("{usage}"),
            Usage::VendorDefinedPage1 { usage } => format!("{usage}"),
        };
        write!(f, "{name}")
    }
}

impl From<&Usage> for u16 {
    fn from(usage: &Usage) -> u16 {
        let u: u32 = u32::from(usage);
        (u & 0xFFFF) as u16
    }
}

impl From<&Usage> for u32 {
    fn from(usage: &Usage) -> u32 {
        match usage {
            Usage::Undefined {
                usage: Undefined::Undefined,
            } => 0 << 16 | 0,
            Usage::GenericDesktop {
                usage: GenericDesktop::Undefined,
            } => 1 << 16 | 0,
            Usage::GenericDesktop {
                usage: GenericDesktop::Pointer,
            } => 1 << 16 | 1,
            Usage::GenericDesktop {
                usage: GenericDesktop::Mouse,
            } => 1 << 16 | 2,
            Usage::GenericDesktop {
                usage: GenericDesktop::Joystick,
            } => 1 << 16 | 4,
            Usage::GenericDesktop {
                usage: GenericDesktop::GamePad,
            } => 1 << 16 | 5,
            Usage::GenericDesktop {
                usage: GenericDesktop::Keyboard,
            } => 1 << 16 | 6,
            Usage::GenericDesktop {
                usage: GenericDesktop::Keypad,
            } => 1 << 16 | 7,
            Usage::GenericDesktop {
                usage: GenericDesktop::MultiAxis,
            } => 1 << 16 | 8,
            Usage::GenericDesktop {
                usage: GenericDesktop::WaterCoolingDevice,
            } => 1 << 16 | 10,
            Usage::GenericDesktop {
                usage: GenericDesktop::ComputerChassisDevice,
            } => 1 << 16 | 11,
            Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioControls,
            } => 1 << 16 | 12,
            Usage::GenericDesktop {
                usage: GenericDesktop::PortableDeviceControl,
            } => 1 << 16 | 13,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMultiAxisController,
            } => 1 << 16 | 14,
            Usage::GenericDesktop {
                usage: GenericDesktop::SpatialController,
            } => 1 << 16 | 15,
            Usage::GenericDesktop {
                usage: GenericDesktop::AssistiveControl,
            } => 1 << 16 | 16,
            Usage::GenericDesktop {
                usage: GenericDesktop::X,
            } => 1 << 16 | 48,
            Usage::GenericDesktop {
                usage: GenericDesktop::Y,
            } => 1 << 16 | 49,
            Usage::GenericDesktop {
                usage: GenericDesktop::Z,
            } => 1 << 16 | 50,
            Usage::GenericDesktop {
                usage: GenericDesktop::Rx,
            } => 1 << 16 | 51,
            Usage::GenericDesktop {
                usage: GenericDesktop::Ry,
            } => 1 << 16 | 52,
            Usage::GenericDesktop {
                usage: GenericDesktop::Rz,
            } => 1 << 16 | 53,
            Usage::GenericDesktop {
                usage: GenericDesktop::Slider,
            } => 1 << 16 | 54,
            Usage::GenericDesktop {
                usage: GenericDesktop::Dial,
            } => 1 << 16 | 55,
            Usage::GenericDesktop {
                usage: GenericDesktop::Wheel,
            } => 1 << 16 | 56,
            Usage::GenericDesktop {
                usage: GenericDesktop::Hatswitch,
            } => 1 << 16 | 57,
            Usage::GenericDesktop {
                usage: GenericDesktop::CountedBuffer,
            } => 1 << 16 | 58,
            Usage::GenericDesktop {
                usage: GenericDesktop::ByteCount,
            } => 1 << 16 | 59,
            Usage::GenericDesktop {
                usage: GenericDesktop::Motion,
            } => 1 << 16 | 60,
            Usage::GenericDesktop {
                usage: GenericDesktop::Start,
            } => 1 << 16 | 61,
            Usage::GenericDesktop {
                usage: GenericDesktop::Select,
            } => 1 << 16 | 62,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vx,
            } => 1 << 16 | 64,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vy,
            } => 1 << 16 | 65,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vz,
            } => 1 << 16 | 66,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vbrx,
            } => 1 << 16 | 67,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vbry,
            } => 1 << 16 | 68,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vbrz,
            } => 1 << 16 | 69,
            Usage::GenericDesktop {
                usage: GenericDesktop::Vno,
            } => 1 << 16 | 70,
            Usage::GenericDesktop {
                usage: GenericDesktop::Feature,
            } => 1 << 16 | 71,
            Usage::GenericDesktop {
                usage: GenericDesktop::ResolutionMultiplier,
            } => 1 << 16 | 72,
            Usage::GenericDesktop {
                usage: GenericDesktop::Qx,
            } => 1 << 16 | 73,
            Usage::GenericDesktop {
                usage: GenericDesktop::Qy,
            } => 1 << 16 | 74,
            Usage::GenericDesktop {
                usage: GenericDesktop::Qz,
            } => 1 << 16 | 75,
            Usage::GenericDesktop {
                usage: GenericDesktop::Qw,
            } => 1 << 16 | 76,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemControl,
            } => 1 << 16 | 128,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemPowerDown,
            } => 1 << 16 | 129,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemSleep,
            } => 1 << 16 | 130,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemWakeUp,
            } => 1 << 16 | 131,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemContextMenu,
            } => 1 << 16 | 132,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMainMenu,
            } => 1 << 16 | 133,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemAppMenu,
            } => 1 << 16 | 134,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemHelpMenu,
            } => 1 << 16 | 135,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuExit,
            } => 1 << 16 | 136,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuSelect,
            } => 1 << 16 | 137,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuRight,
            } => 1 << 16 | 138,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuLeft,
            } => 1 << 16 | 139,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuUp,
            } => 1 << 16 | 140,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuDown,
            } => 1 << 16 | 141,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemColdRestart,
            } => 1 << 16 | 142,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemWarmRestart,
            } => 1 << 16 | 143,
            Usage::GenericDesktop {
                usage: GenericDesktop::DPadUp,
            } => 1 << 16 | 144,
            Usage::GenericDesktop {
                usage: GenericDesktop::DPadDown,
            } => 1 << 16 | 145,
            Usage::GenericDesktop {
                usage: GenericDesktop::DPadRight,
            } => 1 << 16 | 146,
            Usage::GenericDesktop {
                usage: GenericDesktop::DPadLeft,
            } => 1 << 16 | 147,
            Usage::GenericDesktop {
                usage: GenericDesktop::IndexTrigger,
            } => 1 << 16 | 148,
            Usage::GenericDesktop {
                usage: GenericDesktop::PalmTrigger,
            } => 1 << 16 | 149,
            Usage::GenericDesktop {
                usage: GenericDesktop::Thumbstick,
            } => 1 << 16 | 150,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemFunctionShift,
            } => 1 << 16 | 151,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemFunctionShiftLock,
            } => 1 << 16 | 152,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemFunctionShiftLockIndicator,
            } => 1 << 16 | 153,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDismissNotification,
            } => 1 << 16 | 154,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDock,
            } => 1 << 16 | 160,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemUnDock,
            } => 1 << 16 | 161,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemSetup,
            } => 1 << 16 | 162,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemBreak,
            } => 1 << 16 | 163,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDebuggerBreak,
            } => 1 << 16 | 164,
            Usage::GenericDesktop {
                usage: GenericDesktop::ApplicationBreak,
            } => 1 << 16 | 165,
            Usage::GenericDesktop {
                usage: GenericDesktop::ApplicationDebuggerBreak,
            } => 1 << 16 | 166,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemSpeakerMute,
            } => 1 << 16 | 167,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemHibernate,
            } => 1 << 16 | 168,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayInvert,
            } => 1 << 16 | 176,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayInternal,
            } => 1 << 16 | 177,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayExternal,
            } => 1 << 16 | 178,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayBoth,
            } => 1 << 16 | 179,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayDual,
            } => 1 << 16 | 180,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayToggleInternalExternal,
            } => 1 << 16 | 181,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplaySwapPrimarySecondary,
            } => 1 << 16 | 182,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayLCDAutoScale,
            } => 1 << 16 | 183,
            Usage::GenericDesktop {
                usage: GenericDesktop::SensorZone,
            } => 1 << 16 | 192,
            Usage::GenericDesktop {
                usage: GenericDesktop::RPM,
            } => 1 << 16 | 193,
            Usage::GenericDesktop {
                usage: GenericDesktop::CoolantLevel,
            } => 1 << 16 | 194,
            Usage::GenericDesktop {
                usage: GenericDesktop::CoolantCriticalLevel,
            } => 1 << 16 | 195,
            Usage::GenericDesktop {
                usage: GenericDesktop::CoolantPump,
            } => 1 << 16 | 196,
            Usage::GenericDesktop {
                usage: GenericDesktop::ChassisEnclosure,
            } => 1 << 16 | 197,
            Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioButton,
            } => 1 << 16 | 198,
            Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioLED,
            } => 1 << 16 | 199,
            Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioSliderSwitch,
            } => 1 << 16 | 200,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayRotationLockButton,
            } => 1 << 16 | 201,
            Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayRotationLockSliderSwitch,
            } => 1 << 16 | 202,
            Usage::GenericDesktop {
                usage: GenericDesktop::ControlEnable,
            } => 1 << 16 | 203,
            Usage::SimulationControls {
                usage: SimulationControls::Undefined,
            } => 2 << 16 | 0,
            Usage::SimulationControls {
                usage: SimulationControls::FlightSimulationDevice,
            } => 2 << 16 | 1,
            Usage::SimulationControls {
                usage: SimulationControls::AutomobileSimulationDevice,
            } => 2 << 16 | 2,
            Usage::SimulationControls {
                usage: SimulationControls::TankSimulationDevice,
            } => 2 << 16 | 3,
            Usage::SimulationControls {
                usage: SimulationControls::SpaceshipSimulationDevice,
            } => 2 << 16 | 4,
            Usage::SimulationControls {
                usage: SimulationControls::SubmarineSimulationDevice,
            } => 2 << 16 | 5,
            Usage::SimulationControls {
                usage: SimulationControls::SailingSimulationDevice,
            } => 2 << 16 | 6,
            Usage::SimulationControls {
                usage: SimulationControls::MotorcycleSimulationDevice,
            } => 2 << 16 | 7,
            Usage::SimulationControls {
                usage: SimulationControls::SportsSimulationDevice,
            } => 2 << 16 | 8,
            Usage::SimulationControls {
                usage: SimulationControls::AirplaneSimulationDevice,
            } => 2 << 16 | 9,
            Usage::SimulationControls {
                usage: SimulationControls::HelicopterSimulationDevice,
            } => 2 << 16 | 10,
            Usage::SimulationControls {
                usage: SimulationControls::MagicCarpetSimulationDevice,
            } => 2 << 16 | 11,
            Usage::SimulationControls {
                usage: SimulationControls::Bicycle,
            } => 2 << 16 | 12,
            Usage::SimulationControls {
                usage: SimulationControls::FlightControlStick,
            } => 2 << 16 | 32,
            Usage::SimulationControls {
                usage: SimulationControls::FlightStick,
            } => 2 << 16 | 33,
            Usage::SimulationControls {
                usage: SimulationControls::CyclicControl,
            } => 2 << 16 | 34,
            Usage::SimulationControls {
                usage: SimulationControls::CyclicTrim,
            } => 2 << 16 | 35,
            Usage::SimulationControls {
                usage: SimulationControls::FlightYoke,
            } => 2 << 16 | 36,
            Usage::SimulationControls {
                usage: SimulationControls::TrackControl,
            } => 2 << 16 | 37,
            Usage::SimulationControls {
                usage: SimulationControls::DrivingControl,
            } => 2 << 16 | 38,
            Usage::SimulationControls {
                usage: SimulationControls::Aileron,
            } => 2 << 16 | 176,
            Usage::SimulationControls {
                usage: SimulationControls::AileronTrim,
            } => 2 << 16 | 177,
            Usage::SimulationControls {
                usage: SimulationControls::AntiTorqueControl,
            } => 2 << 16 | 178,
            Usage::SimulationControls {
                usage: SimulationControls::Autopilotenable,
            } => 2 << 16 | 179,
            Usage::SimulationControls {
                usage: SimulationControls::ChaffRelease,
            } => 2 << 16 | 180,
            Usage::SimulationControls {
                usage: SimulationControls::CollectiveControl,
            } => 2 << 16 | 181,
            Usage::SimulationControls {
                usage: SimulationControls::DiveBrake,
            } => 2 << 16 | 182,
            Usage::SimulationControls {
                usage: SimulationControls::ElectronicCounterMeasures,
            } => 2 << 16 | 183,
            Usage::SimulationControls {
                usage: SimulationControls::Elevator,
            } => 2 << 16 | 184,
            Usage::SimulationControls {
                usage: SimulationControls::ElevatorTrim,
            } => 2 << 16 | 185,
            Usage::SimulationControls {
                usage: SimulationControls::Rudder,
            } => 2 << 16 | 186,
            Usage::SimulationControls {
                usage: SimulationControls::Throttle,
            } => 2 << 16 | 187,
            Usage::SimulationControls {
                usage: SimulationControls::FlightCommunication,
            } => 2 << 16 | 188,
            Usage::SimulationControls {
                usage: SimulationControls::FlareRelease,
            } => 2 << 16 | 189,
            Usage::SimulationControls {
                usage: SimulationControls::LandingGear,
            } => 2 << 16 | 190,
            Usage::SimulationControls {
                usage: SimulationControls::ToeBrake,
            } => 2 << 16 | 191,
            Usage::SimulationControls {
                usage: SimulationControls::Trigger,
            } => 2 << 16 | 192,
            Usage::SimulationControls {
                usage: SimulationControls::WeaponsArm,
            } => 2 << 16 | 193,
            Usage::SimulationControls {
                usage: SimulationControls::WeaponsSelect,
            } => 2 << 16 | 194,
            Usage::SimulationControls {
                usage: SimulationControls::WingFlaps,
            } => 2 << 16 | 195,
            Usage::SimulationControls {
                usage: SimulationControls::Accelerator,
            } => 2 << 16 | 196,
            Usage::SimulationControls {
                usage: SimulationControls::Brake,
            } => 2 << 16 | 197,
            Usage::SimulationControls {
                usage: SimulationControls::Clutch,
            } => 2 << 16 | 198,
            Usage::SimulationControls {
                usage: SimulationControls::Shifter,
            } => 2 << 16 | 199,
            Usage::SimulationControls {
                usage: SimulationControls::Steering,
            } => 2 << 16 | 200,
            Usage::SimulationControls {
                usage: SimulationControls::TurretDirection,
            } => 2 << 16 | 201,
            Usage::SimulationControls {
                usage: SimulationControls::BarrelElevation,
            } => 2 << 16 | 202,
            Usage::SimulationControls {
                usage: SimulationControls::DivePlane,
            } => 2 << 16 | 203,
            Usage::SimulationControls {
                usage: SimulationControls::Ballast,
            } => 2 << 16 | 204,
            Usage::SimulationControls {
                usage: SimulationControls::BicycleCrank,
            } => 2 << 16 | 205,
            Usage::SimulationControls {
                usage: SimulationControls::HandleBars,
            } => 2 << 16 | 206,
            Usage::SimulationControls {
                usage: SimulationControls::FrontBrake,
            } => 2 << 16 | 207,
            Usage::SimulationControls {
                usage: SimulationControls::RearBrake,
            } => 2 << 16 | 208,
            Usage::VRControls {
                usage: VRControls::Unidentified,
            } => 3 << 16 | 0,
            Usage::VRControls {
                usage: VRControls::Belt,
            } => 3 << 16 | 1,
            Usage::VRControls {
                usage: VRControls::BodySuit,
            } => 3 << 16 | 2,
            Usage::VRControls {
                usage: VRControls::Flexor,
            } => 3 << 16 | 3,
            Usage::VRControls {
                usage: VRControls::Glove,
            } => 3 << 16 | 4,
            Usage::VRControls {
                usage: VRControls::HeadTracker,
            } => 3 << 16 | 5,
            Usage::VRControls {
                usage: VRControls::HeadMountedDisplay,
            } => 3 << 16 | 6,
            Usage::VRControls {
                usage: VRControls::HandTracker,
            } => 3 << 16 | 7,
            Usage::VRControls {
                usage: VRControls::Oculometer,
            } => 3 << 16 | 8,
            Usage::VRControls {
                usage: VRControls::Vest,
            } => 3 << 16 | 9,
            Usage::VRControls {
                usage: VRControls::AnimatronicDevice,
            } => 3 << 16 | 10,
            Usage::VRControls {
                usage: VRControls::StereoEnable,
            } => 3 << 16 | 32,
            Usage::VRControls {
                usage: VRControls::DisplayEnable,
            } => 3 << 16 | 33,
            Usage::SportsControls {
                usage: SportsControls::Unidentified,
            } => 4 << 16 | 0,
            Usage::SportsControls {
                usage: SportsControls::BaseballBat,
            } => 4 << 16 | 1,
            Usage::SportsControls {
                usage: SportsControls::GolfClub,
            } => 4 << 16 | 2,
            Usage::SportsControls {
                usage: SportsControls::RowingMachine,
            } => 4 << 16 | 3,
            Usage::SportsControls {
                usage: SportsControls::Treadmill,
            } => 4 << 16 | 4,
            Usage::SportsControls {
                usage: SportsControls::Oar,
            } => 4 << 16 | 48,
            Usage::SportsControls {
                usage: SportsControls::Slope,
            } => 4 << 16 | 49,
            Usage::SportsControls {
                usage: SportsControls::Rate,
            } => 4 << 16 | 50,
            Usage::SportsControls {
                usage: SportsControls::StickSpeed,
            } => 4 << 16 | 51,
            Usage::SportsControls {
                usage: SportsControls::StickFaceAngle,
            } => 4 << 16 | 52,
            Usage::SportsControls {
                usage: SportsControls::StickHeelToe,
            } => 4 << 16 | 53,
            Usage::SportsControls {
                usage: SportsControls::StickFollowThrough,
            } => 4 << 16 | 54,
            Usage::SportsControls {
                usage: SportsControls::StickTempo,
            } => 4 << 16 | 55,
            Usage::SportsControls {
                usage: SportsControls::StickType,
            } => 4 << 16 | 56,
            Usage::SportsControls {
                usage: SportsControls::StickHeight,
            } => 4 << 16 | 57,
            Usage::SportsControls {
                usage: SportsControls::Putter,
            } => 4 << 16 | 80,
            Usage::SportsControls {
                usage: SportsControls::OneIron,
            } => 4 << 16 | 81,
            Usage::SportsControls {
                usage: SportsControls::TwoIron,
            } => 4 << 16 | 82,
            Usage::SportsControls {
                usage: SportsControls::ThreeIron,
            } => 4 << 16 | 83,
            Usage::SportsControls {
                usage: SportsControls::FourIron,
            } => 4 << 16 | 84,
            Usage::SportsControls {
                usage: SportsControls::FiveIron,
            } => 4 << 16 | 85,
            Usage::SportsControls {
                usage: SportsControls::SixIron,
            } => 4 << 16 | 86,
            Usage::SportsControls {
                usage: SportsControls::SevenIron,
            } => 4 << 16 | 87,
            Usage::SportsControls {
                usage: SportsControls::EightIron,
            } => 4 << 16 | 88,
            Usage::SportsControls {
                usage: SportsControls::NineIron,
            } => 4 << 16 | 89,
            Usage::SportsControls {
                usage: SportsControls::One0Iron,
            } => 4 << 16 | 90,
            Usage::SportsControls {
                usage: SportsControls::One1Iron,
            } => 4 << 16 | 91,
            Usage::SportsControls {
                usage: SportsControls::SandWedge,
            } => 4 << 16 | 92,
            Usage::SportsControls {
                usage: SportsControls::LoftWedge,
            } => 4 << 16 | 93,
            Usage::SportsControls {
                usage: SportsControls::PowerWedge,
            } => 4 << 16 | 94,
            Usage::SportsControls {
                usage: SportsControls::OneWood,
            } => 4 << 16 | 95,
            Usage::SportsControls {
                usage: SportsControls::ThreeWood,
            } => 4 << 16 | 96,
            Usage::SportsControls {
                usage: SportsControls::FiveWood,
            } => 4 << 16 | 97,
            Usage::SportsControls {
                usage: SportsControls::SevenWood,
            } => 4 << 16 | 98,
            Usage::SportsControls {
                usage: SportsControls::NineWood,
            } => 4 << 16 | 99,
            Usage::GamingControls {
                usage: GamingControls::Undefined,
            } => 5 << 16 | 0,
            Usage::GamingControls {
                usage: GamingControls::ThreeDGameController,
            } => 5 << 16 | 1,
            Usage::GamingControls {
                usage: GamingControls::PinballDevice,
            } => 5 << 16 | 2,
            Usage::GamingControls {
                usage: GamingControls::GunDevice,
            } => 5 << 16 | 3,
            Usage::GamingControls {
                usage: GamingControls::PointofView,
            } => 5 << 16 | 32,
            Usage::GamingControls {
                usage: GamingControls::TurnRightLeft,
            } => 5 << 16 | 33,
            Usage::GamingControls {
                usage: GamingControls::PitchForwardBackward,
            } => 5 << 16 | 34,
            Usage::GamingControls {
                usage: GamingControls::RollRightLeft,
            } => 5 << 16 | 35,
            Usage::GamingControls {
                usage: GamingControls::MoveRightLeft,
            } => 5 << 16 | 36,
            Usage::GamingControls {
                usage: GamingControls::MoveForwardBackward,
            } => 5 << 16 | 37,
            Usage::GamingControls {
                usage: GamingControls::MoveUpDown,
            } => 5 << 16 | 38,
            Usage::GamingControls {
                usage: GamingControls::LeanRightLeft,
            } => 5 << 16 | 39,
            Usage::GamingControls {
                usage: GamingControls::LeanForwardBackward,
            } => 5 << 16 | 40,
            Usage::GamingControls {
                usage: GamingControls::HeightofPOV,
            } => 5 << 16 | 41,
            Usage::GamingControls {
                usage: GamingControls::Flipper,
            } => 5 << 16 | 42,
            Usage::GamingControls {
                usage: GamingControls::SecondaryFlipper,
            } => 5 << 16 | 43,
            Usage::GamingControls {
                usage: GamingControls::Bump,
            } => 5 << 16 | 44,
            Usage::GamingControls {
                usage: GamingControls::NewGame,
            } => 5 << 16 | 45,
            Usage::GamingControls {
                usage: GamingControls::ShootBall,
            } => 5 << 16 | 46,
            Usage::GamingControls {
                usage: GamingControls::Player,
            } => 5 << 16 | 47,
            Usage::GamingControls {
                usage: GamingControls::GunBolt,
            } => 5 << 16 | 48,
            Usage::GamingControls {
                usage: GamingControls::GunClip,
            } => 5 << 16 | 49,
            Usage::GamingControls {
                usage: GamingControls::GunSelector,
            } => 5 << 16 | 50,
            Usage::GamingControls {
                usage: GamingControls::GunSingleShot,
            } => 5 << 16 | 51,
            Usage::GamingControls {
                usage: GamingControls::GunBurst,
            } => 5 << 16 | 52,
            Usage::GamingControls {
                usage: GamingControls::GunAutomatic,
            } => 5 << 16 | 53,
            Usage::GamingControls {
                usage: GamingControls::GunSafety,
            } => 5 << 16 | 54,
            Usage::GamingControls {
                usage: GamingControls::GamepadFireJump,
            } => 5 << 16 | 55,
            Usage::GamingControls {
                usage: GamingControls::GamepadTrigger,
            } => 5 << 16 | 57,
            Usage::GamingControls {
                usage: GamingControls::Formfittinggamepad,
            } => 5 << 16 | 58,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Unidentified,
            } => 6 << 16 | 0,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::BackgroundControls,
            } => 6 << 16 | 1,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::BatteryStrength,
            } => 6 << 16 | 32,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::WirelessChannel,
            } => 6 << 16 | 33,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::WirelessID,
            } => 6 << 16 | 34,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::DiscoverWirelessControl,
            } => 6 << 16 | 35,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SecurityCodeCharacterEntered,
            } => 6 << 16 | 36,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SecurityCodeCharacterErased,
            } => 6 << 16 | 37,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SecurityCodeCleared,
            } => 6 << 16 | 38,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SequenceID,
            } => 6 << 16 | 39,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SequenceIDReset,
            } => 6 << 16 | 40,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::RFSignalStrength,
            } => 6 << 16 | 41,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SoftwareVersion,
            } => 6 << 16 | 42,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::ProtocolVersion,
            } => 6 << 16 | 43,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::HardwareVersion,
            } => 6 << 16 | 44,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Major,
            } => 6 << 16 | 45,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Minor,
            } => 6 << 16 | 46,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Revision,
            } => 6 << 16 | 47,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Handedness,
            } => 6 << 16 | 48,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::EitherHand,
            } => 6 << 16 | 49,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::LeftHand,
            } => 6 << 16 | 50,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::RightHand,
            } => 6 << 16 | 51,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::BothHands,
            } => 6 << 16 | 52,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::GripPoseOffset,
            } => 6 << 16 | 64,
            Usage::GenericDeviceControls {
                usage: GenericDeviceControls::PointerPoseOffset,
            } => 6 << 16 | 65,
            Usage::Keyboard {
                usage: Keyboard::ErrorRollOver,
            } => 7 << 16 | 1,
            Usage::Keyboard {
                usage: Keyboard::POSTFail,
            } => 7 << 16 | 2,
            Usage::Keyboard {
                usage: Keyboard::ErrorUndefine,
            } => 7 << 16 | 3,
            Usage::Keyboard {
                usage: Keyboard::aAndA,
            } => 7 << 16 | 4,
            Usage::Keyboard {
                usage: Keyboard::bAndB,
            } => 7 << 16 | 5,
            Usage::Keyboard {
                usage: Keyboard::cAndC,
            } => 7 << 16 | 6,
            Usage::Keyboard {
                usage: Keyboard::dAndD,
            } => 7 << 16 | 7,
            Usage::Keyboard {
                usage: Keyboard::eAndE,
            } => 7 << 16 | 8,
            Usage::Keyboard {
                usage: Keyboard::fAndF,
            } => 7 << 16 | 9,
            Usage::Keyboard {
                usage: Keyboard::gAndG,
            } => 7 << 16 | 10,
            Usage::Keyboard {
                usage: Keyboard::hAndH,
            } => 7 << 16 | 11,
            Usage::Keyboard {
                usage: Keyboard::iAndI,
            } => 7 << 16 | 12,
            Usage::Keyboard {
                usage: Keyboard::jAndJ,
            } => 7 << 16 | 13,
            Usage::Keyboard {
                usage: Keyboard::kAndK,
            } => 7 << 16 | 14,
            Usage::Keyboard {
                usage: Keyboard::lAndL,
            } => 7 << 16 | 15,
            Usage::Keyboard {
                usage: Keyboard::mAndM,
            } => 7 << 16 | 16,
            Usage::Keyboard {
                usage: Keyboard::nAndN,
            } => 7 << 16 | 17,
            Usage::Keyboard {
                usage: Keyboard::oAndO,
            } => 7 << 16 | 18,
            Usage::Keyboard {
                usage: Keyboard::pAndP,
            } => 7 << 16 | 19,
            Usage::Keyboard {
                usage: Keyboard::qAndQ,
            } => 7 << 16 | 20,
            Usage::Keyboard {
                usage: Keyboard::rAndR,
            } => 7 << 16 | 21,
            Usage::Keyboard {
                usage: Keyboard::sAndS,
            } => 7 << 16 | 22,
            Usage::Keyboard {
                usage: Keyboard::tAndT,
            } => 7 << 16 | 23,
            Usage::Keyboard {
                usage: Keyboard::uAndU,
            } => 7 << 16 | 24,
            Usage::Keyboard {
                usage: Keyboard::vAndV,
            } => 7 << 16 | 25,
            Usage::Keyboard {
                usage: Keyboard::wAndW,
            } => 7 << 16 | 26,
            Usage::Keyboard {
                usage: Keyboard::xAndX,
            } => 7 << 16 | 27,
            Usage::Keyboard {
                usage: Keyboard::yAndY,
            } => 7 << 16 | 28,
            Usage::Keyboard {
                usage: Keyboard::zAndZ,
            } => 7 << 16 | 29,
            Usage::Keyboard {
                usage: Keyboard::OneAndExclamationMark,
            } => 7 << 16 | 30,
            Usage::Keyboard {
                usage: Keyboard::TwoAndAt,
            } => 7 << 16 | 31,
            Usage::Keyboard {
                usage: Keyboard::ThreeAndHash,
            } => 7 << 16 | 32,
            Usage::Keyboard {
                usage: Keyboard::FourAndDollar,
            } => 7 << 16 | 33,
            Usage::Keyboard {
                usage: Keyboard::FiveAndPercent,
            } => 7 << 16 | 34,
            Usage::Keyboard {
                usage: Keyboard::SixAndCaret,
            } => 7 << 16 | 35,
            Usage::Keyboard {
                usage: Keyboard::SevenAndAmpersand,
            } => 7 << 16 | 36,
            Usage::Keyboard {
                usage: Keyboard::EightAndStar,
            } => 7 << 16 | 37,
            Usage::Keyboard {
                usage: Keyboard::NineAndOpenParenthesis,
            } => 7 << 16 | 38,
            Usage::Keyboard {
                usage: Keyboard::ZeroAndCloseParenthesis,
            } => 7 << 16 | 39,
            Usage::Keyboard {
                usage: Keyboard::ReturnOpenParenthesisENTERCloseParenthesis,
            } => 7 << 16 | 40,
            Usage::Keyboard {
                usage: Keyboard::ESCAPE,
            } => 7 << 16 | 41,
            Usage::Keyboard {
                usage: Keyboard::DELETEOpenParenthesisBackspaceCloseParenthesis,
            } => 7 << 16 | 42,
            Usage::Keyboard {
                usage: Keyboard::Tab,
            } => 7 << 16 | 43,
            Usage::Keyboard {
                usage: Keyboard::Spacebar,
            } => 7 << 16 | 44,
            Usage::Keyboard {
                usage: Keyboard::MinusAndOpenParenthesisunderscoreCloseParenthesis,
            } => 7 << 16 | 45,
            Usage::Keyboard {
                usage: Keyboard::EqualsAndPlus,
            } => 7 << 16 | 46,
            Usage::Keyboard {
                usage: Keyboard::OpenBracketAndOpenBrace,
            } => 7 << 16 | 47,
            Usage::Keyboard {
                usage: Keyboard::CloseBracketAndCloseBrace,
            } => 7 << 16 | 48,
            Usage::Keyboard {
                usage: Keyboard::BackslashAndPipe,
            } => 7 << 16 | 49,
            Usage::Keyboard {
                usage: Keyboard::NonMinusUSHashAndTilde,
            } => 7 << 16 | 50,
            Usage::Keyboard {
                usage: Keyboard::SemicolonAndColon,
            } => 7 << 16 | 51,
            Usage::Keyboard {
                usage: Keyboard::SingleQuoteAndDoubleQuote,
            } => 7 << 16 | 52,
            Usage::Keyboard {
                usage: Keyboard::GraveAccentAndTilde,
            } => 7 << 16 | 53,
            Usage::Keyboard {
                usage: Keyboard::KeyboardCommaAndLessThan,
            } => 7 << 16 | 54,
            Usage::Keyboard {
                usage: Keyboard::PeriodAndGreaterThan,
            } => 7 << 16 | 55,
            Usage::Keyboard {
                usage: Keyboard::SlashAndQuestionMark,
            } => 7 << 16 | 56,
            Usage::Keyboard {
                usage: Keyboard::CapsLock,
            } => 7 << 16 | 57,
            Usage::Keyboard {
                usage: Keyboard::F1,
            } => 7 << 16 | 58,
            Usage::Keyboard {
                usage: Keyboard::F2,
            } => 7 << 16 | 59,
            Usage::Keyboard {
                usage: Keyboard::F3,
            } => 7 << 16 | 60,
            Usage::Keyboard {
                usage: Keyboard::F4,
            } => 7 << 16 | 61,
            Usage::Keyboard {
                usage: Keyboard::F5,
            } => 7 << 16 | 62,
            Usage::Keyboard {
                usage: Keyboard::F6,
            } => 7 << 16 | 63,
            Usage::Keyboard {
                usage: Keyboard::F7,
            } => 7 << 16 | 64,
            Usage::Keyboard {
                usage: Keyboard::F8,
            } => 7 << 16 | 65,
            Usage::Keyboard {
                usage: Keyboard::F9,
            } => 7 << 16 | 66,
            Usage::Keyboard {
                usage: Keyboard::F10,
            } => 7 << 16 | 67,
            Usage::Keyboard {
                usage: Keyboard::F11,
            } => 7 << 16 | 68,
            Usage::Keyboard {
                usage: Keyboard::F12,
            } => 7 << 16 | 69,
            Usage::Keyboard {
                usage: Keyboard::PrintScreen,
            } => 7 << 16 | 70,
            Usage::Keyboard {
                usage: Keyboard::ScrollLock,
            } => 7 << 16 | 71,
            Usage::Keyboard {
                usage: Keyboard::Pause,
            } => 7 << 16 | 72,
            Usage::Keyboard {
                usage: Keyboard::Insert,
            } => 7 << 16 | 73,
            Usage::Keyboard {
                usage: Keyboard::Home,
            } => 7 << 16 | 74,
            Usage::Keyboard {
                usage: Keyboard::PageUp,
            } => 7 << 16 | 75,
            Usage::Keyboard {
                usage: Keyboard::DeleteForward,
            } => 7 << 16 | 76,
            Usage::Keyboard {
                usage: Keyboard::End,
            } => 7 << 16 | 77,
            Usage::Keyboard {
                usage: Keyboard::PageDown,
            } => 7 << 16 | 78,
            Usage::Keyboard {
                usage: Keyboard::RightArrow,
            } => 7 << 16 | 79,
            Usage::Keyboard {
                usage: Keyboard::LeftArrow,
            } => 7 << 16 | 80,
            Usage::Keyboard {
                usage: Keyboard::DownArrow,
            } => 7 << 16 | 81,
            Usage::Keyboard {
                usage: Keyboard::UpArrow,
            } => 7 << 16 | 82,
            Usage::Keyboard {
                usage: Keyboard::KeypadNumLockAndClear,
            } => 7 << 16 | 83,
            Usage::Keyboard {
                usage: Keyboard::KeypadSlash,
            } => 7 << 16 | 84,
            Usage::Keyboard {
                usage: Keyboard::KeypadStar,
            } => 7 << 16 | 85,
            Usage::Keyboard {
                usage: Keyboard::KeypadMinus,
            } => 7 << 16 | 86,
            Usage::Keyboard {
                usage: Keyboard::KeypadPlus,
            } => 7 << 16 | 87,
            Usage::Keyboard {
                usage: Keyboard::KeypadENTER,
            } => 7 << 16 | 88,
            Usage::Keyboard {
                usage: Keyboard::Keypad1AndEnd,
            } => 7 << 16 | 89,
            Usage::Keyboard {
                usage: Keyboard::Keypad2AndDownArrow,
            } => 7 << 16 | 90,
            Usage::Keyboard {
                usage: Keyboard::Keypad3AndPageDn,
            } => 7 << 16 | 91,
            Usage::Keyboard {
                usage: Keyboard::Keypad4AndLeftArrow,
            } => 7 << 16 | 92,
            Usage::Keyboard {
                usage: Keyboard::Keypad5,
            } => 7 << 16 | 93,
            Usage::Keyboard {
                usage: Keyboard::Keypad6AndRightArrow,
            } => 7 << 16 | 94,
            Usage::Keyboard {
                usage: Keyboard::Keypad7AndHome,
            } => 7 << 16 | 95,
            Usage::Keyboard {
                usage: Keyboard::Keypad8AndUpArrow,
            } => 7 << 16 | 96,
            Usage::Keyboard {
                usage: Keyboard::Keypad9AndPageUp,
            } => 7 << 16 | 97,
            Usage::Keyboard {
                usage: Keyboard::Keypad0AndInsert,
            } => 7 << 16 | 98,
            Usage::Keyboard {
                usage: Keyboard::KeypadPeriodAndDelete,
            } => 7 << 16 | 99,
            Usage::Keyboard {
                usage: Keyboard::NonMinusUSBackslashAndPipe,
            } => 7 << 16 | 100,
            Usage::Keyboard {
                usage: Keyboard::Application,
            } => 7 << 16 | 101,
            Usage::Keyboard {
                usage: Keyboard::Power,
            } => 7 << 16 | 102,
            Usage::Keyboard {
                usage: Keyboard::KeypadEquals,
            } => 7 << 16 | 103,
            Usage::Keyboard {
                usage: Keyboard::F13,
            } => 7 << 16 | 104,
            Usage::Keyboard {
                usage: Keyboard::F14,
            } => 7 << 16 | 105,
            Usage::Keyboard {
                usage: Keyboard::F15,
            } => 7 << 16 | 106,
            Usage::Keyboard {
                usage: Keyboard::F16,
            } => 7 << 16 | 107,
            Usage::Keyboard {
                usage: Keyboard::F17,
            } => 7 << 16 | 108,
            Usage::Keyboard {
                usage: Keyboard::F18,
            } => 7 << 16 | 109,
            Usage::Keyboard {
                usage: Keyboard::F19,
            } => 7 << 16 | 110,
            Usage::Keyboard {
                usage: Keyboard::F20,
            } => 7 << 16 | 111,
            Usage::Keyboard {
                usage: Keyboard::F21,
            } => 7 << 16 | 112,
            Usage::Keyboard {
                usage: Keyboard::F22,
            } => 7 << 16 | 113,
            Usage::Keyboard {
                usage: Keyboard::F23,
            } => 7 << 16 | 114,
            Usage::Keyboard {
                usage: Keyboard::F24,
            } => 7 << 16 | 115,
            Usage::Keyboard {
                usage: Keyboard::Execute,
            } => 7 << 16 | 116,
            Usage::Keyboard {
                usage: Keyboard::Help,
            } => 7 << 16 | 117,
            Usage::Keyboard {
                usage: Keyboard::Menu,
            } => 7 << 16 | 118,
            Usage::Keyboard {
                usage: Keyboard::Select,
            } => 7 << 16 | 119,
            Usage::Keyboard {
                usage: Keyboard::Stop,
            } => 7 << 16 | 120,
            Usage::Keyboard {
                usage: Keyboard::Again,
            } => 7 << 16 | 121,
            Usage::Keyboard {
                usage: Keyboard::Undo,
            } => 7 << 16 | 122,
            Usage::Keyboard {
                usage: Keyboard::Cut,
            } => 7 << 16 | 123,
            Usage::Keyboard {
                usage: Keyboard::Copy,
            } => 7 << 16 | 124,
            Usage::Keyboard {
                usage: Keyboard::Paste,
            } => 7 << 16 | 125,
            Usage::Keyboard {
                usage: Keyboard::Find,
            } => 7 << 16 | 126,
            Usage::Keyboard {
                usage: Keyboard::Mute,
            } => 7 << 16 | 127,
            Usage::Keyboard {
                usage: Keyboard::VolumeUp,
            } => 7 << 16 | 128,
            Usage::Keyboard {
                usage: Keyboard::VolumeDown,
            } => 7 << 16 | 129,
            Usage::Keyboard {
                usage: Keyboard::LockingCapsLock,
            } => 7 << 16 | 130,
            Usage::Keyboard {
                usage: Keyboard::LockingNumLock,
            } => 7 << 16 | 131,
            Usage::Keyboard {
                usage: Keyboard::LockingScrollLock,
            } => 7 << 16 | 132,
            Usage::Keyboard {
                usage: Keyboard::KeypadComma,
            } => 7 << 16 | 133,
            Usage::Keyboard {
                usage: Keyboard::KeypadEqualSign,
            } => 7 << 16 | 134,
            Usage::Keyboard {
                usage: Keyboard::Kanji1,
            } => 7 << 16 | 135,
            Usage::Keyboard {
                usage: Keyboard::Kanji2,
            } => 7 << 16 | 136,
            Usage::Keyboard {
                usage: Keyboard::Kanji3,
            } => 7 << 16 | 137,
            Usage::Keyboard {
                usage: Keyboard::Kanji4,
            } => 7 << 16 | 138,
            Usage::Keyboard {
                usage: Keyboard::Kanji5,
            } => 7 << 16 | 139,
            Usage::Keyboard {
                usage: Keyboard::Kanji6,
            } => 7 << 16 | 140,
            Usage::Keyboard {
                usage: Keyboard::Kanji7,
            } => 7 << 16 | 141,
            Usage::Keyboard {
                usage: Keyboard::Kanji8,
            } => 7 << 16 | 142,
            Usage::Keyboard {
                usage: Keyboard::Kanji9,
            } => 7 << 16 | 143,
            Usage::Keyboard {
                usage: Keyboard::LANG1,
            } => 7 << 16 | 144,
            Usage::Keyboard {
                usage: Keyboard::LANG2,
            } => 7 << 16 | 145,
            Usage::Keyboard {
                usage: Keyboard::LANG3,
            } => 7 << 16 | 146,
            Usage::Keyboard {
                usage: Keyboard::LANG4,
            } => 7 << 16 | 147,
            Usage::Keyboard {
                usage: Keyboard::LANG5,
            } => 7 << 16 | 148,
            Usage::Keyboard {
                usage: Keyboard::LANG6,
            } => 7 << 16 | 149,
            Usage::Keyboard {
                usage: Keyboard::LANG7,
            } => 7 << 16 | 150,
            Usage::Keyboard {
                usage: Keyboard::LANG8,
            } => 7 << 16 | 151,
            Usage::Keyboard {
                usage: Keyboard::LANG9,
            } => 7 << 16 | 152,
            Usage::Keyboard {
                usage: Keyboard::AlternateErase,
            } => 7 << 16 | 153,
            Usage::Keyboard {
                usage: Keyboard::SysReqSlashAttention,
            } => 7 << 16 | 154,
            Usage::Keyboard {
                usage: Keyboard::Cancel,
            } => 7 << 16 | 155,
            Usage::Keyboard {
                usage: Keyboard::Clear,
            } => 7 << 16 | 156,
            Usage::Keyboard {
                usage: Keyboard::Prior,
            } => 7 << 16 | 157,
            Usage::Keyboard {
                usage: Keyboard::Return,
            } => 7 << 16 | 158,
            Usage::Keyboard {
                usage: Keyboard::Separator,
            } => 7 << 16 | 159,
            Usage::Keyboard {
                usage: Keyboard::Out,
            } => 7 << 16 | 160,
            Usage::Keyboard {
                usage: Keyboard::Oper,
            } => 7 << 16 | 161,
            Usage::Keyboard {
                usage: Keyboard::ClearSlashAgain,
            } => 7 << 16 | 162,
            Usage::Keyboard {
                usage: Keyboard::CrSelSlashProps,
            } => 7 << 16 | 163,
            Usage::Keyboard {
                usage: Keyboard::ExSel,
            } => 7 << 16 | 164,
            Usage::Keyboard {
                usage: Keyboard::LeftControl,
            } => 7 << 16 | 224,
            Usage::Keyboard {
                usage: Keyboard::LeftShift,
            } => 7 << 16 | 225,
            Usage::Keyboard {
                usage: Keyboard::LeftAlt,
            } => 7 << 16 | 226,
            Usage::Keyboard {
                usage: Keyboard::LeftGUI,
            } => 7 << 16 | 227,
            Usage::Keyboard {
                usage: Keyboard::RightControl,
            } => 7 << 16 | 228,
            Usage::Keyboard {
                usage: Keyboard::RightShift,
            } => 7 << 16 | 229,
            Usage::Keyboard {
                usage: Keyboard::RightAlt,
            } => 7 << 16 | 230,
            Usage::Keyboard {
                usage: Keyboard::RightGUI,
            } => 7 << 16 | 231,
            Usage::LEDs {
                usage: LEDs::Undefined,
            } => 8 << 16 | 0,
            Usage::LEDs {
                usage: LEDs::NumLock,
            } => 8 << 16 | 1,
            Usage::LEDs {
                usage: LEDs::CapsLock,
            } => 8 << 16 | 2,
            Usage::LEDs {
                usage: LEDs::ScrollLock,
            } => 8 << 16 | 3,
            Usage::LEDs {
                usage: LEDs::Compose,
            } => 8 << 16 | 4,
            Usage::LEDs { usage: LEDs::Kana } => 8 << 16 | 5,
            Usage::LEDs { usage: LEDs::Power } => 8 << 16 | 6,
            Usage::LEDs { usage: LEDs::Shift } => 8 << 16 | 7,
            Usage::LEDs {
                usage: LEDs::DoNotDisturb,
            } => 8 << 16 | 8,
            Usage::LEDs { usage: LEDs::Mute } => 8 << 16 | 9,
            Usage::LEDs {
                usage: LEDs::ToneEnable,
            } => 8 << 16 | 10,
            Usage::LEDs {
                usage: LEDs::HighCutFilter,
            } => 8 << 16 | 11,
            Usage::LEDs {
                usage: LEDs::LowCutFilter,
            } => 8 << 16 | 12,
            Usage::LEDs {
                usage: LEDs::EqualizerEnable,
            } => 8 << 16 | 13,
            Usage::LEDs {
                usage: LEDs::SoundFieldOn,
            } => 8 << 16 | 14,
            Usage::LEDs {
                usage: LEDs::SurroundfieldOn,
            } => 8 << 16 | 15,
            Usage::LEDs {
                usage: LEDs::Repeat,
            } => 8 << 16 | 16,
            Usage::LEDs {
                usage: LEDs::Stereo,
            } => 8 << 16 | 17,
            Usage::LEDs {
                usage: LEDs::SamplingRateDetect,
            } => 8 << 16 | 18,
            Usage::LEDs {
                usage: LEDs::Spinning,
            } => 8 << 16 | 19,
            Usage::LEDs { usage: LEDs::CAV } => 8 << 16 | 20,
            Usage::LEDs { usage: LEDs::CLV } => 8 << 16 | 21,
            Usage::LEDs {
                usage: LEDs::RecordingFormatDetect,
            } => 8 << 16 | 22,
            Usage::LEDs {
                usage: LEDs::OffHook,
            } => 8 << 16 | 23,
            Usage::LEDs { usage: LEDs::Ring } => 8 << 16 | 24,
            Usage::LEDs {
                usage: LEDs::MessageWaiting,
            } => 8 << 16 | 25,
            Usage::LEDs {
                usage: LEDs::DataMode,
            } => 8 << 16 | 26,
            Usage::LEDs {
                usage: LEDs::BatteryOperation,
            } => 8 << 16 | 27,
            Usage::LEDs {
                usage: LEDs::BatteryOK,
            } => 8 << 16 | 28,
            Usage::LEDs {
                usage: LEDs::BatteryLow,
            } => 8 << 16 | 29,
            Usage::LEDs {
                usage: LEDs::Speaker,
            } => 8 << 16 | 30,
            Usage::LEDs {
                usage: LEDs::HeadSet,
            } => 8 << 16 | 31,
            Usage::LEDs { usage: LEDs::Hold } => 8 << 16 | 32,
            Usage::LEDs {
                usage: LEDs::Microphone,
            } => 8 << 16 | 33,
            Usage::LEDs {
                usage: LEDs::Coverage,
            } => 8 << 16 | 34,
            Usage::LEDs {
                usage: LEDs::NightMode,
            } => 8 << 16 | 35,
            Usage::LEDs {
                usage: LEDs::SendCalls,
            } => 8 << 16 | 36,
            Usage::LEDs {
                usage: LEDs::CallPickup,
            } => 8 << 16 | 37,
            Usage::LEDs {
                usage: LEDs::Conference,
            } => 8 << 16 | 38,
            Usage::LEDs {
                usage: LEDs::Standby,
            } => 8 << 16 | 39,
            Usage::LEDs {
                usage: LEDs::CameraOn,
            } => 8 << 16 | 40,
            Usage::LEDs {
                usage: LEDs::CameraOff,
            } => 8 << 16 | 41,
            Usage::LEDs {
                usage: LEDs::OnLine,
            } => 8 << 16 | 42,
            Usage::LEDs {
                usage: LEDs::OffLine,
            } => 8 << 16 | 43,
            Usage::LEDs { usage: LEDs::Busy } => 8 << 16 | 44,
            Usage::LEDs { usage: LEDs::Ready } => 8 << 16 | 45,
            Usage::LEDs {
                usage: LEDs::PaperOut,
            } => 8 << 16 | 46,
            Usage::LEDs {
                usage: LEDs::PaperJam,
            } => 8 << 16 | 47,
            Usage::LEDs {
                usage: LEDs::Remote,
            } => 8 << 16 | 48,
            Usage::LEDs {
                usage: LEDs::Forward,
            } => 8 << 16 | 49,
            Usage::LEDs {
                usage: LEDs::Reverse,
            } => 8 << 16 | 50,
            Usage::LEDs { usage: LEDs::Stop } => 8 << 16 | 51,
            Usage::LEDs {
                usage: LEDs::Rewind,
            } => 8 << 16 | 52,
            Usage::LEDs {
                usage: LEDs::FastForward,
            } => 8 << 16 | 53,
            Usage::LEDs { usage: LEDs::Play } => 8 << 16 | 54,
            Usage::LEDs { usage: LEDs::Pause } => 8 << 16 | 55,
            Usage::LEDs {
                usage: LEDs::Record,
            } => 8 << 16 | 56,
            Usage::LEDs { usage: LEDs::Error } => 8 << 16 | 57,
            Usage::LEDs {
                usage: LEDs::UsageSelectedIndicator,
            } => 8 << 16 | 58,
            Usage::LEDs {
                usage: LEDs::UsageInUseIndicator,
            } => 8 << 16 | 59,
            Usage::LEDs {
                usage: LEDs::UsageMultiModeIndicator,
            } => 8 << 16 | 60,
            Usage::LEDs {
                usage: LEDs::IndicatorOn,
            } => 8 << 16 | 61,
            Usage::LEDs {
                usage: LEDs::IndicatorFlash,
            } => 8 << 16 | 62,
            Usage::LEDs {
                usage: LEDs::IndicatorSlowBlink,
            } => 8 << 16 | 63,
            Usage::LEDs {
                usage: LEDs::IndicatorFastBlink,
            } => 8 << 16 | 64,
            Usage::LEDs {
                usage: LEDs::IndicatorOff,
            } => 8 << 16 | 65,
            Usage::LEDs {
                usage: LEDs::FlashOnTime,
            } => 8 << 16 | 66,
            Usage::LEDs {
                usage: LEDs::SlowBlinkOnTime,
            } => 8 << 16 | 67,
            Usage::LEDs {
                usage: LEDs::SlowBlinkOffTime,
            } => 8 << 16 | 68,
            Usage::LEDs {
                usage: LEDs::FastBlinkOnTime,
            } => 8 << 16 | 69,
            Usage::LEDs {
                usage: LEDs::FastBlinkOffTime,
            } => 8 << 16 | 70,
            Usage::LEDs {
                usage: LEDs::UsageIndicatorColor,
            } => 8 << 16 | 71,
            Usage::LEDs {
                usage: LEDs::IndicatorRed,
            } => 8 << 16 | 72,
            Usage::LEDs {
                usage: LEDs::IndicatorGreen,
            } => 8 << 16 | 73,
            Usage::LEDs {
                usage: LEDs::IndicatorAmber,
            } => 8 << 16 | 74,
            Usage::LEDs {
                usage: LEDs::GenericIndicator,
            } => 8 << 16 | 75,
            Usage::LEDs {
                usage: LEDs::SystemSuspend,
            } => 8 << 16 | 76,
            Usage::LEDs {
                usage: LEDs::ExternalPowerConnected,
            } => 8 << 16 | 77,
            Usage::LEDs {
                usage: LEDs::IndicatorBlue,
            } => 8 << 16 | 78,
            Usage::LEDs {
                usage: LEDs::IndicatorOrange,
            } => 8 << 16 | 79,
            Usage::LEDs {
                usage: LEDs::GoodStatus,
            } => 8 << 16 | 80,
            Usage::LEDs {
                usage: LEDs::WarningStatus,
            } => 8 << 16 | 81,
            Usage::LEDs {
                usage: LEDs::RGBLED,
            } => 8 << 16 | 82,
            Usage::LEDs {
                usage: LEDs::RedLEDChannel,
            } => 8 << 16 | 83,
            Usage::LEDs {
                usage: LEDs::GreedLEDChannel,
            } => 8 << 16 | 84,
            Usage::LEDs {
                usage: LEDs::BlueLEDChannel,
            } => 8 << 16 | 85,
            Usage::LEDs {
                usage: LEDs::LEDIntensity,
            } => 8 << 16 | 86,
            Usage::LEDs {
                usage: LEDs::PlayerIndicator,
            } => 8 << 16 | 96,
            Usage::LEDs {
                usage: LEDs::Player1,
            } => 8 << 16 | 97,
            Usage::LEDs {
                usage: LEDs::Player2,
            } => 8 << 16 | 98,
            Usage::LEDs {
                usage: LEDs::Player3,
            } => 8 << 16 | 99,
            Usage::LEDs {
                usage: LEDs::Player4,
            } => 8 << 16 | 100,
            Usage::LEDs {
                usage: LEDs::Player5,
            } => 8 << 16 | 101,
            Usage::LEDs {
                usage: LEDs::Player6,
            } => 8 << 16 | 102,
            Usage::LEDs {
                usage: LEDs::Player7,
            } => 8 << 16 | 103,
            Usage::LEDs {
                usage: LEDs::Player8,
            } => 8 << 16 | 104,
            Usage::Button {
                usage: Button::NoButtonsPressed,
            } => 9 << 16 | 0,
            Usage::Ordinals {
                usage: Ordinals::Unused,
            } => 10 << 16 | 0,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Unassigned,
            } => 11 << 16 | 0,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Phone,
            } => 11 << 16 | 1,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AnsweringMachine,
            } => 11 << 16 | 2,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::MessageControls,
            } => 11 << 16 | 3,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Handset,
            } => 11 << 16 | 4,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Headset,
            } => 11 << 16 | 5,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::TelephonyKeyPad,
            } => 11 << 16 | 6,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ProgrammableButton,
            } => 11 << 16 | 7,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::HookSwitch,
            } => 11 << 16 | 32,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Flash,
            } => 11 << 16 | 33,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Feature,
            } => 11 << 16 | 34,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Hold,
            } => 11 << 16 | 35,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Redial,
            } => 11 << 16 | 36,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Transfer,
            } => 11 << 16 | 37,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Drop,
            } => 11 << 16 | 38,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Park,
            } => 11 << 16 | 39,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ForwardCalls,
            } => 11 << 16 | 40,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AlternateFunction,
            } => 11 << 16 | 41,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::LineOSC,
            } => 11 << 16 | 42,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::SpeakerPhone,
            } => 11 << 16 | 43,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Conference,
            } => 11 << 16 | 44,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::RingEnable,
            } => 11 << 16 | 45,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::RingSelect,
            } => 11 << 16 | 46,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneMute,
            } => 11 << 16 | 47,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::CallerID,
            } => 11 << 16 | 48,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Send,
            } => 11 << 16 | 49,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::SpeedDial,
            } => 11 << 16 | 80,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::StoreNumber,
            } => 11 << 16 | 81,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::RecallNumber,
            } => 11 << 16 | 82,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDirectory,
            } => 11 << 16 | 83,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::VoiceMail,
            } => 11 << 16 | 112,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ScreenCalls,
            } => 11 << 16 | 113,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::DoNotDisturb,
            } => 11 << 16 | 114,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Message,
            } => 11 << 16 | 115,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AnswerOnOff,
            } => 11 << 16 | 116,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::InsideDialTone,
            } => 11 << 16 | 144,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::OutsideDialTone,
            } => 11 << 16 | 145,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::InsideRingTone,
            } => 11 << 16 | 146,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::OutsideRingTone,
            } => 11 << 16 | 147,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PriorityRingTone,
            } => 11 << 16 | 148,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::InsideRingback,
            } => 11 << 16 | 149,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PriorityRingback,
            } => 11 << 16 | 150,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::LineBusyTone,
            } => 11 << 16 | 151,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ReorderTone,
            } => 11 << 16 | 152,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::CallWaitingTone,
            } => 11 << 16 | 153,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ConfirmationTone1,
            } => 11 << 16 | 154,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ConfirmationTone2,
            } => 11 << 16 | 155,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::TonesOff,
            } => 11 << 16 | 156,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::OutsideRingback,
            } => 11 << 16 | 157,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::Ringer,
            } => 11 << 16 | 158,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey0,
            } => 11 << 16 | 176,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey1,
            } => 11 << 16 | 177,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey2,
            } => 11 << 16 | 178,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey3,
            } => 11 << 16 | 179,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey4,
            } => 11 << 16 | 180,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey5,
            } => 11 << 16 | 181,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey6,
            } => 11 << 16 | 182,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey7,
            } => 11 << 16 | 183,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey8,
            } => 11 << 16 | 184,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey9,
            } => 11 << 16 | 185,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyStar,
            } => 11 << 16 | 186,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyPound,
            } => 11 << 16 | 187,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyA,
            } => 11 << 16 | 188,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyB,
            } => 11 << 16 | 189,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyC,
            } => 11 << 16 | 190,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyD,
            } => 11 << 16 | 191,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneCallHistoryKey,
            } => 11 << 16 | 192,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneCallerIDKey,
            } => 11 << 16 | 193,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneSettingsKey,
            } => 11 << 16 | 194,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::HostControl,
            } => 11 << 16 | 240,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::HostAvailable,
            } => 11 << 16 | 241,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::HostCallActive,
            } => 11 << 16 | 242,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ActivateHandsetAudio,
            } => 11 << 16 | 243,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::RingType,
            } => 11 << 16 | 244,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::RedialablePhoneNumber,
            } => 11 << 16 | 245,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::StopRingTone,
            } => 11 << 16 | 248,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PSTNRingTone,
            } => 11 << 16 | 249,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::HostRingTone,
            } => 11 << 16 | 250,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AlertSoundError,
            } => 11 << 16 | 251,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AlertSoundConfirm,
            } => 11 << 16 | 252,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AlertSoundNotification,
            } => 11 << 16 | 253,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::SilentRing,
            } => 11 << 16 | 254,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::EmailMessageWaiting,
            } => 11 << 16 | 264,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::oicemailMessageWaiting,
            } => 11 << 16 | 265,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::ostHold,
            } => 11 << 16 | 266,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::IncomingCallHistoryCount,
            } => 11 << 16 | 272,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::OutgoingCallHistoryCount,
            } => 11 << 16 | 273,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::IncomingCallHistory,
            } => 11 << 16 | 274,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::OutgoingCallHistory,
            } => 11 << 16 | 275,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneLocale,
            } => 11 << 16 | 276,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneTimeSecond,
            } => 11 << 16 | 320,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneTimeMinute,
            } => 11 << 16 | 321,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneTimeHour,
            } => 11 << 16 | 322,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDateDay,
            } => 11 << 16 | 323,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDateMonth,
            } => 11 << 16 | 324,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDateYear,
            } => 11 << 16 | 325,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::HandsetNickname,
            } => 11 << 16 | 326,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::AddressBookID,
            } => 11 << 16 | 327,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::CallDuration,
            } => 11 << 16 | 330,
            Usage::TelephonyDevices {
                usage: TelephonyDevices::DualModePhone,
            } => 11 << 16 | 331,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ConsumerControl,
            } => 12 << 16 | 1,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::NumericKeyPad,
            } => 12 << 16 | 2,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ProgrammableButtons,
            } => 12 << 16 | 3,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Microphone,
            } => 12 << 16 | 4,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Headphone,
            } => 12 << 16 | 5,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::GraphicEqualizer,
            } => 12 << 16 | 6,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Plus10,
            } => 12 << 16 | 32,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Plus100,
            } => 12 << 16 | 33,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::AMPM,
            } => 12 << 16 | 34,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Power,
            } => 12 << 16 | 48,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Reset,
            } => 12 << 16 | 49,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Sleep,
            } => 12 << 16 | 50,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SleepAfter,
            } => 12 << 16 | 51,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SleepMode,
            } => 12 << 16 | 52,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Illumination,
            } => 12 << 16 | 53,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FunctionButtons,
            } => 12 << 16 | 54,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Menu,
            } => 12 << 16 | 64,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuPick,
            } => 12 << 16 | 65,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuUp,
            } => 12 << 16 | 66,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuDown,
            } => 12 << 16 | 67,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuLeft,
            } => 12 << 16 | 68,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuRight,
            } => 12 << 16 | 69,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuEscape,
            } => 12 << 16 | 70,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuValueIncrease,
            } => 12 << 16 | 71,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuValueDecrease,
            } => 12 << 16 | 72,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DataOnScreen,
            } => 12 << 16 | 96,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ClosedCaption,
            } => 12 << 16 | 97,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ClosedCaptionSelect,
            } => 12 << 16 | 98,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::VCRTV,
            } => 12 << 16 | 99,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BroadcastMode,
            } => 12 << 16 | 100,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Snapshot,
            } => 12 << 16 | 101,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Still,
            } => 12 << 16 | 102,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::PictureinPictureToggle,
            } => 12 << 16 | 103,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::PictureinPictureSwap,
            } => 12 << 16 | 104,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::RedMenuButton,
            } => 12 << 16 | 105,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::GreenMenuButton,
            } => 12 << 16 | 106,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BlueMenuButton,
            } => 12 << 16 | 107,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::YellowMenuButton,
            } => 12 << 16 | 108,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Aspect,
            } => 12 << 16 | 109,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ThreeDModeSelect,
            } => 12 << 16 | 110,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBrightnessIncrement,
            } => 12 << 16 | 111,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBrightnessDecrement,
            } => 12 << 16 | 112,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBrightness,
            } => 12 << 16 | 113,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBacklightToggle,
            } => 12 << 16 | 114,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplaySetBrightnesstoMinimum,
            } => 12 << 16 | 115,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplaySetBrightnesstoMaximum,
            } => 12 << 16 | 116,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplaySetAutoBrightness,
            } => 12 << 16 | 117,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::CameraAccessEnabled,
            } => 12 << 16 | 118,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::CameraAccessDisabled,
            } => 12 << 16 | 119,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::CameraAccessToggle,
            } => 12 << 16 | 120,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBrightnessIncrement,
            } => 12 << 16 | 121,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBrightnessDecrement,
            } => 12 << 16 | 122,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightSetLevel,
            } => 12 << 16 | 123,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightOOC,
            } => 12 << 16 | 124,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightSetMinimum,
            } => 12 << 16 | 125,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightSetMaximum,
            } => 12 << 16 | 126,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightAuto,
            } => 12 << 16 | 127,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Selection,
            } => 12 << 16 | 128,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::AssignSelection,
            } => 12 << 16 | 129,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ModeStep,
            } => 12 << 16 | 130,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::RecallLast,
            } => 12 << 16 | 131,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::EnterChannel,
            } => 12 << 16 | 132,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::OrderMovie,
            } => 12 << 16 | 133,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Channel,
            } => 12 << 16 | 134,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelection,
            } => 12 << 16 | 135,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectComputer,
            } => 12 << 16 | 136,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTV,
            } => 12 << 16 | 137,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectWWW,
            } => 12 << 16 | 138,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectDVD,
            } => 12 << 16 | 139,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTelephone,
            } => 12 << 16 | 140,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectProgramGuide,
            } => 12 << 16 | 141,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectVideoPhone,
            } => 12 << 16 | 142,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectGames,
            } => 12 << 16 | 143,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectMessages,
            } => 12 << 16 | 144,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectCD,
            } => 12 << 16 | 145,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectVCR,
            } => 12 << 16 | 146,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTuner,
            } => 12 << 16 | 147,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Quit,
            } => 12 << 16 | 148,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Help,
            } => 12 << 16 | 149,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTape,
            } => 12 << 16 | 150,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectCable,
            } => 12 << 16 | 151,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectSatellite,
            } => 12 << 16 | 152,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectSecurity,
            } => 12 << 16 | 153,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectHome,
            } => 12 << 16 | 154,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectCall,
            } => 12 << 16 | 155,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelIncrement,
            } => 12 << 16 | 156,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelDecrement,
            } => 12 << 16 | 157,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectSAP,
            } => 12 << 16 | 158,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::VCRPlus,
            } => 12 << 16 | 160,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Once,
            } => 12 << 16 | 161,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Daily,
            } => 12 << 16 | 162,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Weekly,
            } => 12 << 16 | 163,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Monthly,
            } => 12 << 16 | 164,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Play,
            } => 12 << 16 | 176,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Pause,
            } => 12 << 16 | 177,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Record,
            } => 12 << 16 | 178,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FastForward,
            } => 12 << 16 | 179,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Rewind,
            } => 12 << 16 | 180,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ScanNextTrack,
            } => 12 << 16 | 181,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ScanPreviousTrack,
            } => 12 << 16 | 182,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Stop,
            } => 12 << 16 | 183,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Eject,
            } => 12 << 16 | 184,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::RandomPlay,
            } => 12 << 16 | 185,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SelectDisc,
            } => 12 << 16 | 186,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::EnterDisc,
            } => 12 << 16 | 187,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Repeat,
            } => 12 << 16 | 188,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Tracking,
            } => 12 << 16 | 189,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::TrackNormal,
            } => 12 << 16 | 190,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SlowTracking,
            } => 12 << 16 | 191,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FrameForward,
            } => 12 << 16 | 192,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FrameBack,
            } => 12 << 16 | 193,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Mark,
            } => 12 << 16 | 194,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ClearMark,
            } => 12 << 16 | 195,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::RepeatFromMark,
            } => 12 << 16 | 196,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ReturnToMark,
            } => 12 << 16 | 197,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SearchMarkForward,
            } => 12 << 16 | 198,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SearchMarkBackwards,
            } => 12 << 16 | 199,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::CounterReset,
            } => 12 << 16 | 200,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ShowCounter,
            } => 12 << 16 | 201,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::TrackingIncrement,
            } => 12 << 16 | 202,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::TrackingDecrement,
            } => 12 << 16 | 203,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::StopEject,
            } => 12 << 16 | 204,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::PlayPause,
            } => 12 << 16 | 205,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::PlaySkip,
            } => 12 << 16 | 206,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::VoiceCommand,
            } => 12 << 16 | 207,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::InvokeCaptureInterface,
            } => 12 << 16 | 208,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopGameRecording,
            } => 12 << 16 | 209,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::HistoricalGameCapture,
            } => 12 << 16 | 210,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::CaptureGameScreenshot,
            } => 12 << 16 | 211,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ShoworHideRecordingIndicator,
            } => 12 << 16 | 212,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopMicrophoneCapture,
            } => 12 << 16 | 213,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopCameraCapture,
            } => 12 << 16 | 214,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopGameBroadcast,
            } => 12 << 16 | 215,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Volume,
            } => 12 << 16 | 224,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Balance,
            } => 12 << 16 | 225,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Mute,
            } => 12 << 16 | 226,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Bass,
            } => 12 << 16 | 227,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Treble,
            } => 12 << 16 | 228,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BassBoost,
            } => 12 << 16 | 229,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SurroundMode,
            } => 12 << 16 | 230,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Loudness,
            } => 12 << 16 | 231,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MPX,
            } => 12 << 16 | 232,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::VolumeUp,
            } => 12 << 16 | 233,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::VolumeDown,
            } => 12 << 16 | 234,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SpeedSelect,
            } => 12 << 16 | 240,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::PlaybackSpeed,
            } => 12 << 16 | 241,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::StandardPlay,
            } => 12 << 16 | 242,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::LongPlay,
            } => 12 << 16 | 243,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ExtendedPlay,
            } => 12 << 16 | 244,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Slow,
            } => 12 << 16 | 245,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FanEnable,
            } => 12 << 16 | 256,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FanSpeed,
            } => 12 << 16 | 257,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::LightEnable,
            } => 12 << 16 | 258,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::LightIlluminationLevel,
            } => 12 << 16 | 259,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ClimateControlEnable,
            } => 12 << 16 | 260,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::RoomTemperature,
            } => 12 << 16 | 261,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SecurityEnable,
            } => 12 << 16 | 262,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::FireAlarm,
            } => 12 << 16 | 263,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::PoliceAlarm,
            } => 12 << 16 | 264,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Proximity,
            } => 12 << 16 | 265,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Motion,
            } => 12 << 16 | 266,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::DuressAlarm,
            } => 12 << 16 | 267,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::HoldupAlarm,
            } => 12 << 16 | 268,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::MedicalAlarm,
            } => 12 << 16 | 269,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BalanceRight,
            } => 12 << 16 | 336,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BalanceLeft,
            } => 12 << 16 | 337,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BassIncrement,
            } => 12 << 16 | 338,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::BassDecrement,
            } => 12 << 16 | 339,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::TrebleIncrement,
            } => 12 << 16 | 340,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::TrebleDecrement,
            } => 12 << 16 | 341,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SpeakerSystem,
            } => 12 << 16 | 352,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelLeft,
            } => 12 << 16 | 353,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelRight,
            } => 12 << 16 | 354,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelCenter,
            } => 12 << 16 | 355,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelFront,
            } => 12 << 16 | 356,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelCenterFront,
            } => 12 << 16 | 357,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelSide,
            } => 12 << 16 | 358,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelSurround,
            } => 12 << 16 | 359,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelLowFreqEnhancement,
            } => 12 << 16 | 360,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelTop,
            } => 12 << 16 | 361,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelUnknown,
            } => 12 << 16 | 362,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::Subchannel,
            } => 12 << 16 | 368,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SubchannelIncrement,
            } => 12 << 16 | 369,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::SubchannelDecrement,
            } => 12 << 16 | 370,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::AlternateAudioIncrement,
            } => 12 << 16 | 371,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::AlternateAudioDecrement,
            } => 12 << 16 | 372,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ApplicationLaunchButtons,
            } => 12 << 16 | 384,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLaunchButtonConfigTool,
            } => 12 << 16 | 385,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALProgrammableButtonConfig,
            } => 12 << 16 | 386,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALConsumerControlConfig,
            } => 12 << 16 | 387,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALWordProcessor,
            } => 12 << 16 | 388,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTextEditor,
            } => 12 << 16 | 389,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSpreadsheet,
            } => 12 << 16 | 390,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALGraphicsEditor,
            } => 12 << 16 | 391,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPresentationApp,
            } => 12 << 16 | 392,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDatabaseApp,
            } => 12 << 16 | 393,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALEmailReader,
            } => 12 << 16 | 394,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNewsreader,
            } => 12 << 16 | 395,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALVoicemail,
            } => 12 << 16 | 396,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALContactsAddressBook,
            } => 12 << 16 | 397,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCalendarSchedule,
            } => 12 << 16 | 398,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTaskProjectManager,
            } => 12 << 16 | 399,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogJournalTimecard,
            } => 12 << 16 | 400,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCheckbookFinance,
            } => 12 << 16 | 401,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCalculator,
            } => 12 << 16 | 402,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAVCapturePlayback,
            } => 12 << 16 | 403,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLocalMachineBrowser,
            } => 12 << 16 | 404,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLANWANBrowser,
            } => 12 << 16 | 405,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALInternetBrowser,
            } => 12 << 16 | 406,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALRemoteNetworkingISPConnect,
            } => 12 << 16 | 407,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNetworkConference,
            } => 12 << 16 | 408,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNetworkChat,
            } => 12 << 16 | 409,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTelephonyDialer,
            } => 12 << 16 | 410,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogon,
            } => 12 << 16 | 411,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogoff,
            } => 12 << 16 | 412,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogonLogoff,
            } => 12 << 16 | 413,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTerminalLockScreensaver,
            } => 12 << 16 | 414,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALControlPanel,
            } => 12 << 16 | 415,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCommandLineProcessorRun,
            } => 12 << 16 | 416,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALProcessTaskManager,
            } => 12 << 16 | 417,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSelectTaskApplication,
            } => 12 << 16 | 418,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNextTaskApplication,
            } => 12 << 16 | 419,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPreviousTaskApplication,
            } => 12 << 16 | 420,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPreemptHaltTaskApplication,
            } => 12 << 16 | 421,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALIntegratedHelpCenter,
            } => 12 << 16 | 422,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDocuments,
            } => 12 << 16 | 423,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALThesaurus,
            } => 12 << 16 | 424,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDictionary,
            } => 12 << 16 | 425,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDesktop,
            } => 12 << 16 | 426,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSpellCheck,
            } => 12 << 16 | 427,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALGrammarCheck,
            } => 12 << 16 | 428,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALWirelessStatus,
            } => 12 << 16 | 429,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALKeyboardLayout,
            } => 12 << 16 | 430,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALVirusProtection,
            } => 12 << 16 | 431,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALEncryption,
            } => 12 << 16 | 432,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALScreenSaver,
            } => 12 << 16 | 433,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAlarms,
            } => 12 << 16 | 434,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALClock,
            } => 12 << 16 | 435,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALFileBrowser,
            } => 12 << 16 | 436,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPowerStatus,
            } => 12 << 16 | 437,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALImageBrowser,
            } => 12 << 16 | 438,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAudioBrowser,
            } => 12 << 16 | 439,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALMovieBrowser,
            } => 12 << 16 | 440,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDigitalRightsManager,
            } => 12 << 16 | 441,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDigitalWallet,
            } => 12 << 16 | 442,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALInstantMessaging,
            } => 12 << 16 | 444,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOEMFeaturesTipsTutoBrowser,
            } => 12 << 16 | 445,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOEMHelp,
            } => 12 << 16 | 446,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOnlineCommunity,
            } => 12 << 16 | 447,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALEntertainmentContentBrowser,
            } => 12 << 16 | 448,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOnlineShoppingBrowser,
            } => 12 << 16 | 449,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSmartCardInformationHelp,
            } => 12 << 16 | 450,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALMarketMonitorFinanceBrowser,
            } => 12 << 16 | 451,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCustomizedCorpNewsBrowser,
            } => 12 << 16 | 452,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOnlineActivityBrowser,
            } => 12 << 16 | 453,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALResearchSearchBrowser,
            } => 12 << 16 | 454,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAudioPlayer,
            } => 12 << 16 | 455,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALMessageStatus,
            } => 12 << 16 | 456,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ALContactSync,
            } => 12 << 16 | 457,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::GenericGUIApplicationControls,
            } => 12 << 16 | 512,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNew,
            } => 12 << 16 | 513,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACOpen,
            } => 12 << 16 | 514,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACClose,
            } => 12 << 16 | 515,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACExit,
            } => 12 << 16 | 516,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMaximize,
            } => 12 << 16 | 517,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMinimize,
            } => 12 << 16 | 518,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSave,
            } => 12 << 16 | 519,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPrint,
            } => 12 << 16 | 520,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACProperties,
            } => 12 << 16 | 521,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUndo,
            } => 12 << 16 | 538,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCopy,
            } => 12 << 16 | 539,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCut,
            } => 12 << 16 | 540,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPaste,
            } => 12 << 16 | 541,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectAll,
            } => 12 << 16 | 542,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFind,
            } => 12 << 16 | 543,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFindandReplace,
            } => 12 << 16 | 544,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSearch,
            } => 12 << 16 | 545,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACGoTo,
            } => 12 << 16 | 546,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACHome,
            } => 12 << 16 | 547,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBack,
            } => 12 << 16 | 548,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACForward,
            } => 12 << 16 | 549,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACStop,
            } => 12 << 16 | 550,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRefresh,
            } => 12 << 16 | 551,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPreviousLink,
            } => 12 << 16 | 552,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNextLink,
            } => 12 << 16 | 553,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBookmarks,
            } => 12 << 16 | 554,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACHistory,
            } => 12 << 16 | 555,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSubscriptions,
            } => 12 << 16 | 556,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACZoomIn,
            } => 12 << 16 | 557,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACZoomOut,
            } => 12 << 16 | 558,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACZoom,
            } => 12 << 16 | 559,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFullScreenView,
            } => 12 << 16 | 560,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNormalView,
            } => 12 << 16 | 561,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACViewToggle,
            } => 12 << 16 | 562,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACScrollUp,
            } => 12 << 16 | 563,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACScrollDown,
            } => 12 << 16 | 564,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACScroll,
            } => 12 << 16 | 565,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPanLeft,
            } => 12 << 16 | 566,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPanRight,
            } => 12 << 16 | 567,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPan,
            } => 12 << 16 | 568,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNewWindow,
            } => 12 << 16 | 569,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACTileHorizontally,
            } => 12 << 16 | 570,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACTileVertically,
            } => 12 << 16 | 571,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFormat,
            } => 12 << 16 | 572,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACEdit,
            } => 12 << 16 | 573,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBold,
            } => 12 << 16 | 574,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACItalics,
            } => 12 << 16 | 575,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUnderline,
            } => 12 << 16 | 576,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACStrikethrough,
            } => 12 << 16 | 577,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSubscript,
            } => 12 << 16 | 578,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSuperscript,
            } => 12 << 16 | 579,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAllCaps,
            } => 12 << 16 | 580,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRotate,
            } => 12 << 16 | 581,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACResize,
            } => 12 << 16 | 582,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFliphorizontal,
            } => 12 << 16 | 583,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFlipVertical,
            } => 12 << 16 | 584,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMirrorHorizontal,
            } => 12 << 16 | 585,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMirrorVertical,
            } => 12 << 16 | 586,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFontSelect,
            } => 12 << 16 | 587,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFontColor,
            } => 12 << 16 | 588,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFontSize,
            } => 12 << 16 | 589,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyLeft,
            } => 12 << 16 | 590,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyCenterH,
            } => 12 << 16 | 591,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyRight,
            } => 12 << 16 | 592,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyBlockH,
            } => 12 << 16 | 593,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyTop,
            } => 12 << 16 | 594,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyCenterV,
            } => 12 << 16 | 595,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyBottom,
            } => 12 << 16 | 596,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyBlockV,
            } => 12 << 16 | 597,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACIndentDecrease,
            } => 12 << 16 | 598,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACIndentIncrease,
            } => 12 << 16 | 599,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNumberedList,
            } => 12 << 16 | 600,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRestartNumbering,
            } => 12 << 16 | 601,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBulletedList,
            } => 12 << 16 | 602,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPromote,
            } => 12 << 16 | 603,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDemote,
            } => 12 << 16 | 604,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACYes,
            } => 12 << 16 | 605,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNo,
            } => 12 << 16 | 606,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCancel,
            } => 12 << 16 | 607,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCatalog,
            } => 12 << 16 | 608,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBuyCheckout,
            } => 12 << 16 | 609,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAddtoCart,
            } => 12 << 16 | 610,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACExpand,
            } => 12 << 16 | 611,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACExpandAll,
            } => 12 << 16 | 612,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCollapse,
            } => 12 << 16 | 613,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCollapseAll,
            } => 12 << 16 | 614,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPrintPreview,
            } => 12 << 16 | 615,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPasteSpecial,
            } => 12 << 16 | 616,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertMode,
            } => 12 << 16 | 617,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDelete,
            } => 12 << 16 | 618,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACLock,
            } => 12 << 16 | 619,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUnlock,
            } => 12 << 16 | 620,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACProtect,
            } => 12 << 16 | 621,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUnprotect,
            } => 12 << 16 | 622,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAttachComment,
            } => 12 << 16 | 623,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDeleteComment,
            } => 12 << 16 | 624,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACViewComment,
            } => 12 << 16 | 625,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectWord,
            } => 12 << 16 | 626,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectSentence,
            } => 12 << 16 | 627,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectParagraph,
            } => 12 << 16 | 628,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectColumn,
            } => 12 << 16 | 629,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectRow,
            } => 12 << 16 | 630,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectTable,
            } => 12 << 16 | 631,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectObject,
            } => 12 << 16 | 632,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRedoRepeat,
            } => 12 << 16 | 633,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSort,
            } => 12 << 16 | 634,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSortAscending,
            } => 12 << 16 | 635,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSortDescending,
            } => 12 << 16 | 636,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFilter,
            } => 12 << 16 | 637,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSetClock,
            } => 12 << 16 | 638,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACViewClock,
            } => 12 << 16 | 639,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectTimeZone,
            } => 12 << 16 | 640,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACEditTimeZones,
            } => 12 << 16 | 641,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSetAlarm,
            } => 12 << 16 | 642,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACClearAlarm,
            } => 12 << 16 | 643,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSnoozeAlarm,
            } => 12 << 16 | 644,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACResetAlarm,
            } => 12 << 16 | 645,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSynchronize,
            } => 12 << 16 | 646,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSendReceive,
            } => 12 << 16 | 647,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSendTo,
            } => 12 << 16 | 648,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACReply,
            } => 12 << 16 | 649,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACReplyAll,
            } => 12 << 16 | 650,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACForwardMsg,
            } => 12 << 16 | 651,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSend,
            } => 12 << 16 | 652,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAttachFile,
            } => 12 << 16 | 653,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUpload,
            } => 12 << 16 | 654,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDownloadSaveTargetAs,
            } => 12 << 16 | 655,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSetBorders,
            } => 12 << 16 | 656,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertRow,
            } => 12 << 16 | 657,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertColumn,
            } => 12 << 16 | 658,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertFile,
            } => 12 << 16 | 659,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertPicture,
            } => 12 << 16 | 660,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertObject,
            } => 12 << 16 | 661,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertSymbol,
            } => 12 << 16 | 662,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSaveandClose,
            } => 12 << 16 | 663,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRename,
            } => 12 << 16 | 664,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMerge,
            } => 12 << 16 | 665,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSplit,
            } => 12 << 16 | 666,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDisributeHorizontally,
            } => 12 << 16 | 667,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDistributeVertically,
            } => 12 << 16 | 668,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNextKeyboardLayoutSelect,
            } => 12 << 16 | 669,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNavigationGuidance,
            } => 12 << 16 | 670,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDesktopShowAllWindows,
            } => 12 << 16 | 671,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSoftKeyLeft,
            } => 12 << 16 | 672,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSoftKeyRight,
            } => 12 << 16 | 673,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ACIdleKeepAlive,
            } => 12 << 16 | 688,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ExtendedKeyboardAttributesCollection,
            } => 12 << 16 | 704,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardFormFactor,
            } => 12 << 16 | 705,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardKeyType,
            } => 12 << 16 | 706,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardPhysicalLayout,
            } => 12 << 16 | 707,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::VendorSpecificKeyboardPhysicalLayout,
            } => 12 << 16 | 708,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardIETFLanguageTagIndex,
            } => 12 << 16 | 709,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ImplementedKeyboardInputAssistControls,
            } => 12 << 16 | 710,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistPrevious,
            } => 12 << 16 | 711,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistNextS,
            } => 12 << 16 | 712,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistPreviousGroup,
            } => 12 << 16 | 713,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistNextGroup,
            } => 12 << 16 | 714,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistAccept,
            } => 12 << 16 | 715,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistCancel,
            } => 12 << 16 | 716,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEdited,
            } => 12 << 16 | 1280,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactAdded,
            } => 12 << 16 | 1281,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactRecordActive,
            } => 12 << 16 | 1282,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactIndex,
            } => 12 << 16 | 1283,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactNickname,
            } => 12 << 16 | 1284,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactFirstName,
            } => 12 << 16 | 1285,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactLastName,
            } => 12 << 16 | 1286,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactFullName,
            } => 12 << 16 | 1287,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberPersonal,
            } => 12 << 16 | 1288,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberBusiness,
            } => 12 << 16 | 1289,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberMobile,
            } => 12 << 16 | 1290,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberPager,
            } => 12 << 16 | 1291,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberFax,
            } => 12 << 16 | 1292,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberOther,
            } => 12 << 16 | 1293,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailPersonal,
            } => 12 << 16 | 1294,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailBusiness,
            } => 12 << 16 | 1295,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailOther,
            } => 12 << 16 | 1296,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailMain,
            } => 12 << 16 | 1297,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactSpeedDialNumber,
            } => 12 << 16 | 1298,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactStatusFlag,
            } => 12 << 16 | 1299,
            Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactMisc,
            } => 12 << 16 | 1300,
            Usage::Digitizers {
                usage: Digitizers::Undefined,
            } => 13 << 16 | 0,
            Usage::Digitizers {
                usage: Digitizers::Digitizer,
            } => 13 << 16 | 1,
            Usage::Digitizers {
                usage: Digitizers::Pen,
            } => 13 << 16 | 2,
            Usage::Digitizers {
                usage: Digitizers::LightPen,
            } => 13 << 16 | 3,
            Usage::Digitizers {
                usage: Digitizers::TouchScreen,
            } => 13 << 16 | 4,
            Usage::Digitizers {
                usage: Digitizers::TouchPad,
            } => 13 << 16 | 5,
            Usage::Digitizers {
                usage: Digitizers::WhiteBoard,
            } => 13 << 16 | 6,
            Usage::Digitizers {
                usage: Digitizers::CoordinateMeasuringMachine,
            } => 13 << 16 | 7,
            Usage::Digitizers {
                usage: Digitizers::ThreeDDigitizer,
            } => 13 << 16 | 8,
            Usage::Digitizers {
                usage: Digitizers::StereoPlotter,
            } => 13 << 16 | 9,
            Usage::Digitizers {
                usage: Digitizers::ArticulatedArm,
            } => 13 << 16 | 10,
            Usage::Digitizers {
                usage: Digitizers::Armature,
            } => 13 << 16 | 11,
            Usage::Digitizers {
                usage: Digitizers::MultiplePointDigitizer,
            } => 13 << 16 | 12,
            Usage::Digitizers {
                usage: Digitizers::FreeSpaceWand,
            } => 13 << 16 | 13,
            Usage::Digitizers {
                usage: Digitizers::DeviceConfiguration,
            } => 13 << 16 | 14,
            Usage::Digitizers {
                usage: Digitizers::CapacitiveHeatMapDigitizer,
            } => 13 << 16 | 15,
            Usage::Digitizers {
                usage: Digitizers::Stylus,
            } => 13 << 16 | 32,
            Usage::Digitizers {
                usage: Digitizers::Puck,
            } => 13 << 16 | 33,
            Usage::Digitizers {
                usage: Digitizers::Finger,
            } => 13 << 16 | 34,
            Usage::Digitizers {
                usage: Digitizers::DeviceSettings,
            } => 13 << 16 | 35,
            Usage::Digitizers {
                usage: Digitizers::CharacterGesture,
            } => 13 << 16 | 36,
            Usage::Digitizers {
                usage: Digitizers::TipPressure,
            } => 13 << 16 | 48,
            Usage::Digitizers {
                usage: Digitizers::BarrelPressure,
            } => 13 << 16 | 49,
            Usage::Digitizers {
                usage: Digitizers::InRange,
            } => 13 << 16 | 50,
            Usage::Digitizers {
                usage: Digitizers::Touch,
            } => 13 << 16 | 51,
            Usage::Digitizers {
                usage: Digitizers::Untouch,
            } => 13 << 16 | 52,
            Usage::Digitizers {
                usage: Digitizers::Tap,
            } => 13 << 16 | 53,
            Usage::Digitizers {
                usage: Digitizers::Quality,
            } => 13 << 16 | 54,
            Usage::Digitizers {
                usage: Digitizers::DataValid,
            } => 13 << 16 | 55,
            Usage::Digitizers {
                usage: Digitizers::TransducerIndex,
            } => 13 << 16 | 56,
            Usage::Digitizers {
                usage: Digitizers::TabletFunctionKeys,
            } => 13 << 16 | 57,
            Usage::Digitizers {
                usage: Digitizers::ProgramChangeKeys,
            } => 13 << 16 | 58,
            Usage::Digitizers {
                usage: Digitizers::BatteryStrength,
            } => 13 << 16 | 59,
            Usage::Digitizers {
                usage: Digitizers::Invert,
            } => 13 << 16 | 60,
            Usage::Digitizers {
                usage: Digitizers::XTilt,
            } => 13 << 16 | 61,
            Usage::Digitizers {
                usage: Digitizers::YTilt,
            } => 13 << 16 | 62,
            Usage::Digitizers {
                usage: Digitizers::Azimuth,
            } => 13 << 16 | 63,
            Usage::Digitizers {
                usage: Digitizers::Altitude,
            } => 13 << 16 | 64,
            Usage::Digitizers {
                usage: Digitizers::Twist,
            } => 13 << 16 | 65,
            Usage::Digitizers {
                usage: Digitizers::TipSwitch,
            } => 13 << 16 | 66,
            Usage::Digitizers {
                usage: Digitizers::SecondaryTipSwitch,
            } => 13 << 16 | 67,
            Usage::Digitizers {
                usage: Digitizers::BarrelSwitch,
            } => 13 << 16 | 68,
            Usage::Digitizers {
                usage: Digitizers::Eraser,
            } => 13 << 16 | 69,
            Usage::Digitizers {
                usage: Digitizers::TabletPick,
            } => 13 << 16 | 70,
            Usage::Digitizers {
                usage: Digitizers::Confidence,
            } => 13 << 16 | 71,
            Usage::Digitizers {
                usage: Digitizers::Width,
            } => 13 << 16 | 72,
            Usage::Digitizers {
                usage: Digitizers::Height,
            } => 13 << 16 | 73,
            Usage::Digitizers {
                usage: Digitizers::ContactId,
            } => 13 << 16 | 81,
            Usage::Digitizers {
                usage: Digitizers::Inputmode,
            } => 13 << 16 | 82,
            Usage::Digitizers {
                usage: Digitizers::DeviceIndex,
            } => 13 << 16 | 83,
            Usage::Digitizers {
                usage: Digitizers::ContactCount,
            } => 13 << 16 | 84,
            Usage::Digitizers {
                usage: Digitizers::ContactMax,
            } => 13 << 16 | 85,
            Usage::Digitizers {
                usage: Digitizers::ScanTime,
            } => 13 << 16 | 86,
            Usage::Digitizers {
                usage: Digitizers::SurfaceSwitch,
            } => 13 << 16 | 87,
            Usage::Digitizers {
                usage: Digitizers::ButtonSwitch,
            } => 13 << 16 | 88,
            Usage::Digitizers {
                usage: Digitizers::ButtonType,
            } => 13 << 16 | 89,
            Usage::Digitizers {
                usage: Digitizers::SecondaryBarrelSwitch,
            } => 13 << 16 | 90,
            Usage::Digitizers {
                usage: Digitizers::TransducerSerialNumber,
            } => 13 << 16 | 91,
            Usage::Digitizers {
                usage: Digitizers::PreferredInkingColor,
            } => 13 << 16 | 92,
            Usage::Digitizers {
                usage: Digitizers::PreferredColorisLocked,
            } => 13 << 16 | 93,
            Usage::Digitizers {
                usage: Digitizers::PreferredLineWidth,
            } => 13 << 16 | 94,
            Usage::Digitizers {
                usage: Digitizers::PreferredLineWidthisLocked,
            } => 13 << 16 | 95,
            Usage::Digitizers {
                usage: Digitizers::GestureCharacterQuality,
            } => 13 << 16 | 97,
            Usage::Digitizers {
                usage: Digitizers::CharacterGestureDataLength,
            } => 13 << 16 | 98,
            Usage::Digitizers {
                usage: Digitizers::CharacterGestureData,
            } => 13 << 16 | 99,
            Usage::Digitizers {
                usage: Digitizers::GestureCharacterEncoding,
            } => 13 << 16 | 100,
            Usage::Digitizers {
                usage: Digitizers::UTF8CharacterGestureEncodingSel,
            } => 13 << 16 | 101,
            Usage::Digitizers {
                usage: Digitizers::UTF16LittleEndianCharacterGestureEncodingSel,
            } => 13 << 16 | 102,
            Usage::Digitizers {
                usage: Digitizers::UTF16BigEndianCharacterGestureEncodingSel,
            } => 13 << 16 | 103,
            Usage::Digitizers {
                usage: Digitizers::UTF32LittleEndianCharacterGestureEncoding,
            } => 13 << 16 | 104,
            Usage::Digitizers {
                usage: Digitizers::UTF32BigEndianCharacterGestureEncoding,
            } => 13 << 16 | 105,
            Usage::Digitizers {
                usage: Digitizers::GestureCharacterEnable,
            } => 13 << 16 | 106,
            Usage::Digitizers {
                usage: Digitizers::CapacitiveHeatMapProtocolVersion,
            } => 13 << 16 | 107,
            Usage::Digitizers {
                usage: Digitizers::CapacitiveHeatMapFrameData,
            } => 13 << 16 | 108,
            Usage::Digitizers {
                usage: Digitizers::PreferredLineStyle,
            } => 13 << 16 | 112,
            Usage::Digitizers {
                usage: Digitizers::PreferredLineStyleisLocked,
            } => 13 << 16 | 113,
            Usage::Digitizers {
                usage: Digitizers::Ink,
            } => 13 << 16 | 114,
            Usage::Digitizers {
                usage: Digitizers::Pencil,
            } => 13 << 16 | 115,
            Usage::Digitizers {
                usage: Digitizers::Highlighter,
            } => 13 << 16 | 116,
            Usage::Digitizers {
                usage: Digitizers::ChiselMarker,
            } => 13 << 16 | 117,
            Usage::Digitizers {
                usage: Digitizers::Brush,
            } => 13 << 16 | 118,
            Usage::Digitizers {
                usage: Digitizers::Nopreference,
            } => 13 << 16 | 119,
            Usage::Digitizers {
                usage: Digitizers::DigitizerDiagnostic,
            } => 13 << 16 | 128,
            Usage::Digitizers {
                usage: Digitizers::DigitizerError,
            } => 13 << 16 | 129,
            Usage::Digitizers {
                usage: Digitizers::ErrNormalStatus,
            } => 13 << 16 | 130,
            Usage::Digitizers {
                usage: Digitizers::ErrTransducersExceeded,
            } => 13 << 16 | 131,
            Usage::Digitizers {
                usage: Digitizers::ErrFullTransFeaturesUnavail,
            } => 13 << 16 | 132,
            Usage::Digitizers {
                usage: Digitizers::ErrChargeLow,
            } => 13 << 16 | 133,
            Usage::Digitizers {
                usage: Digitizers::TransducerSoftwareInfo,
            } => 13 << 16 | 144,
            Usage::Digitizers {
                usage: Digitizers::TransducerVendorID,
            } => 13 << 16 | 145,
            Usage::Digitizers {
                usage: Digitizers::TransducerProductID,
            } => 13 << 16 | 146,
            Usage::Digitizers {
                usage: Digitizers::DeviceSupportedProtocols,
            } => 13 << 16 | 147,
            Usage::Digitizers {
                usage: Digitizers::TransducerSupportedProtocols,
            } => 13 << 16 | 148,
            Usage::Digitizers {
                usage: Digitizers::NoProtocol,
            } => 13 << 16 | 149,
            Usage::Digitizers {
                usage: Digitizers::WacomAESProtocol,
            } => 13 << 16 | 150,
            Usage::Digitizers {
                usage: Digitizers::USIProtocol,
            } => 13 << 16 | 151,
            Usage::Digitizers {
                usage: Digitizers::MicrosoftPenProtocol,
            } => 13 << 16 | 152,
            Usage::Digitizers {
                usage: Digitizers::SupportedReportRates,
            } => 13 << 16 | 160,
            Usage::Digitizers {
                usage: Digitizers::ReportRate,
            } => 13 << 16 | 161,
            Usage::Digitizers {
                usage: Digitizers::TransducerConnected,
            } => 13 << 16 | 162,
            Usage::Digitizers {
                usage: Digitizers::SwitchDisabled,
            } => 13 << 16 | 163,
            Usage::Digitizers {
                usage: Digitizers::SwitchUnimplemented,
            } => 13 << 16 | 164,
            Usage::Digitizers {
                usage: Digitizers::TransducerSwitches,
            } => 13 << 16 | 165,
            Usage::Haptic {
                usage: Haptic::SimpleHapticController,
            } => 14 << 16 | 1,
            Usage::Haptic {
                usage: Haptic::Waveform,
            } => 14 << 16 | 16,
            Usage::Haptic {
                usage: Haptic::Duration,
            } => 14 << 16 | 17,
            Usage::Haptic {
                usage: Haptic::AutoTrigger,
            } => 14 << 16 | 32,
            Usage::Haptic {
                usage: Haptic::ManualTrigger,
            } => 14 << 16 | 33,
            Usage::Haptic {
                usage: Haptic::AutoTriggerAssociatedControl,
            } => 14 << 16 | 34,
            Usage::Haptic {
                usage: Haptic::Intensity,
            } => 14 << 16 | 35,
            Usage::Haptic {
                usage: Haptic::RepeatCount,
            } => 14 << 16 | 36,
            Usage::Haptic {
                usage: Haptic::RetriggerPeriod,
            } => 14 << 16 | 37,
            Usage::Haptic {
                usage: Haptic::WaveformVendorPage,
            } => 14 << 16 | 38,
            Usage::Haptic {
                usage: Haptic::WaveformVendorID,
            } => 14 << 16 | 39,
            Usage::Haptic {
                usage: Haptic::WaveformCutoffTime,
            } => 14 << 16 | 40,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_NONE,
            } => 14 << 16 | 4097,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_STOP,
            } => 14 << 16 | 4098,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_CLICK,
            } => 14 << 16 | 4099,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_BUZZ_CONTINUOUS,
            } => 14 << 16 | 4100,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_RUMBLE_CONTINUOUS,
            } => 14 << 16 | 4101,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_PRESS,
            } => 14 << 16 | 4102,
            Usage::Haptic {
                usage: Haptic::WAVEFORM_RELEASE,
            } => 14 << 16 | 4103,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::EyeTracker,
            } => 18 << 16 | 1,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::HeadTracker,
            } => 18 << 16 | 2,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::TrackingData,
            } => 18 << 16 | 16,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Capabilities,
            } => 18 << 16 | 17,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Configuration,
            } => 18 << 16 | 18,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Status,
            } => 18 << 16 | 19,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Control,
            } => 18 << 16 | 20,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::SensorTimestamp,
            } => 18 << 16 | 32,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::PositionX,
            } => 18 << 16 | 33,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::PositionY,
            } => 18 << 16 | 34,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::PositionZ,
            } => 18 << 16 | 35,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::GazePoint,
            } => 18 << 16 | 36,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::LeftEyePosition,
            } => 18 << 16 | 37,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RightEyePosition,
            } => 18 << 16 | 38,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::HeadPosition,
            } => 18 << 16 | 39,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::HeadDirectionPoint,
            } => 18 << 16 | 40,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RotationaboutXaxis,
            } => 18 << 16 | 41,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RotationaboutYaxis,
            } => 18 << 16 | 42,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RotationaboutZaxis,
            } => 18 << 16 | 43,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::TrackerQuality,
            } => 18 << 16 | 256,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MinimumTrackingDistance,
            } => 18 << 16 | 257,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::OptimumTrackingDistance,
            } => 18 << 16 | 258,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MaximumTrackingDistance,
            } => 18 << 16 | 259,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MaximumScreenPlaneWidth,
            } => 18 << 16 | 260,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MaximumScreenPlaneHeight,
            } => 18 << 16 | 261,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplayManufacturerID,
            } => 18 << 16 | 512,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplayProductID,
            } => 18 << 16 | 513,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplaySerialNumber,
            } => 18 << 16 | 514,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplayManufacturerDate,
            } => 18 << 16 | 515,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::CalibratedScreenWidth,
            } => 18 << 16 | 516,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::CalibratedScreenHeight,
            } => 18 << 16 | 517,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::SamplingFrequency,
            } => 18 << 16 | 768,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::ConfigurationStatus,
            } => 18 << 16 | 769,
            Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DeviceModeRequest,
            } => 18 << 16 | 1024,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Undefined,
            } => 20 << 16 | 0,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AlphanumericDisplay,
            } => 20 << 16 | 1,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AuxiliaryDisplay,
            } => 20 << 16 | 2,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayAttributesReport,
            } => 20 << 16 | 32,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ASCIICharacterSet,
            } => 20 << 16 | 33,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DataReadBack,
            } => 20 << 16 | 34,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::FontReadBack,
            } => 20 << 16 | 35,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayControlReport,
            } => 20 << 16 | 36,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ClearDisplay,
            } => 20 << 16 | 37,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayEnable,
            } => 20 << 16 | 38,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ScreenSaverDelay,
            } => 20 << 16 | 39,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ScreenSaverEnable,
            } => 20 << 16 | 40,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::VerticalScroll,
            } => 20 << 16 | 41,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::HorizontalScroll,
            } => 20 << 16 | 42,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterReport,
            } => 20 << 16 | 43,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayData,
            } => 20 << 16 | 44,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayStatus,
            } => 20 << 16 | 45,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::StatNotReady,
            } => 20 << 16 | 46,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::StatReady,
            } => 20 << 16 | 47,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ErrNotaloadablecharacter,
            } => 20 << 16 | 48,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ErrFontdatacannotberead,
            } => 20 << 16 | 49,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorPositionReport,
            } => 20 << 16 | 50,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Row,
            } => 20 << 16 | 51,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Column,
            } => 20 << 16 | 52,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Rows,
            } => 20 << 16 | 53,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Columns,
            } => 20 << 16 | 54,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorPixelPositioning,
            } => 20 << 16 | 55,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorMode,
            } => 20 << 16 | 56,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorEnable,
            } => 20 << 16 | 57,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorBlink,
            } => 20 << 16 | 58,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::FontReport,
            } => 20 << 16 | 59,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::FontData,
            } => 20 << 16 | 60,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterWidth,
            } => 20 << 16 | 61,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterHeight,
            } => 20 << 16 | 62,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterSpacingHorizontal,
            } => 20 << 16 | 63,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterSpacingVertical,
            } => 20 << 16 | 64,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::UnicodeCharacterSet,
            } => 20 << 16 | 65,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Font7Segment,
            } => 20 << 16 | 66,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SevenSegmentDirectMap,
            } => 20 << 16 | 67,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Font14Segment,
            } => 20 << 16 | 68,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::One4SegmentDirectMap,
            } => 20 << 16 | 69,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayBrightness,
            } => 20 << 16 | 70,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayContrast,
            } => 20 << 16 | 71,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterAttribute,
            } => 20 << 16 | 72,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AttributeReadback,
            } => 20 << 16 | 73,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AttributeData,
            } => 20 << 16 | 74,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharAttrEnhance,
            } => 20 << 16 | 75,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharAttrUnderline,
            } => 20 << 16 | 76,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharAttrBlink,
            } => 20 << 16 | 77,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BitmapSizeX,
            } => 20 << 16 | 128,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BitmapSizeY,
            } => 20 << 16 | 129,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::MaxBlitSize,
            } => 20 << 16 | 130,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BitDepthFormat,
            } => 20 << 16 | 131,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayOrientation,
            } => 20 << 16 | 132,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteReport,
            } => 20 << 16 | 133,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteDataSize,
            } => 20 << 16 | 134,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteDataOffset,
            } => 20 << 16 | 135,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteData,
            } => 20 << 16 | 136,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitReport,
            } => 20 << 16 | 138,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleX1,
            } => 20 << 16 | 139,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleY1,
            } => 20 << 16 | 140,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleX2,
            } => 20 << 16 | 141,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleY2,
            } => 20 << 16 | 142,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitData,
            } => 20 << 16 | 143,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButton,
            } => 20 << 16 | 144,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonID,
            } => 20 << 16 | 145,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonSide,
            } => 20 << 16 | 146,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonOffset1,
            } => 20 << 16 | 147,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonOffset2,
            } => 20 << 16 | 148,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonReport,
            } => 20 << 16 | 149,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftKeys,
            } => 20 << 16 | 194,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayDataExtensions,
            } => 20 << 16 | 204,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterMapping,
            } => 20 << 16 | 207,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::UnicodeEquivalent,
            } => 20 << 16 | 221,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterPageMapping,
            } => 20 << 16 | 223,
            Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::RequestReport,
            } => 20 << 16 | 255,
            Usage::Sensor {
                usage: Sensor::Undefined,
            } => 32 << 16 | 0,
            Usage::Sensor {
                usage: Sensor::Sensor,
            } => 32 << 16 | 1,
            Usage::Sensor {
                usage: Sensor::Biometric,
            } => 32 << 16 | 16,
            Usage::Sensor {
                usage: Sensor::BiometricHumanPresence,
            } => 32 << 16 | 17,
            Usage::Sensor {
                usage: Sensor::BiometricHumanProximity,
            } => 32 << 16 | 18,
            Usage::Sensor {
                usage: Sensor::BiometricHumanTouch,
            } => 32 << 16 | 19,
            Usage::Sensor {
                usage: Sensor::BiometricBloodPressure,
            } => 32 << 16 | 20,
            Usage::Sensor {
                usage: Sensor::BiometricBodyTemperature,
            } => 32 << 16 | 21,
            Usage::Sensor {
                usage: Sensor::BiometricHeartRate,
            } => 32 << 16 | 22,
            Usage::Sensor {
                usage: Sensor::BiometricHeartRateVariability,
            } => 32 << 16 | 23,
            Usage::Sensor {
                usage: Sensor::BiometricPeripheralOxygenSaturation,
            } => 32 << 16 | 24,
            Usage::Sensor {
                usage: Sensor::BiometricRespiratoryRate,
            } => 32 << 16 | 25,
            Usage::Sensor {
                usage: Sensor::Electrical,
            } => 32 << 16 | 32,
            Usage::Sensor {
                usage: Sensor::ElectricalCapacitance,
            } => 32 << 16 | 33,
            Usage::Sensor {
                usage: Sensor::ElectricalCurrent,
            } => 32 << 16 | 34,
            Usage::Sensor {
                usage: Sensor::ElectricalPower,
            } => 32 << 16 | 35,
            Usage::Sensor {
                usage: Sensor::ElectricalInductance,
            } => 32 << 16 | 36,
            Usage::Sensor {
                usage: Sensor::ElectricalResistance,
            } => 32 << 16 | 37,
            Usage::Sensor {
                usage: Sensor::ElectricalVoltage,
            } => 32 << 16 | 38,
            Usage::Sensor {
                usage: Sensor::ElectricalPotentiometer,
            } => 32 << 16 | 39,
            Usage::Sensor {
                usage: Sensor::ElectricalFrequency,
            } => 32 << 16 | 40,
            Usage::Sensor {
                usage: Sensor::ElectricalPeriod,
            } => 32 << 16 | 41,
            Usage::Sensor {
                usage: Sensor::Environmental,
            } => 32 << 16 | 48,
            Usage::Sensor {
                usage: Sensor::EnvironmentalAtmosphericPressure,
            } => 32 << 16 | 49,
            Usage::Sensor {
                usage: Sensor::EnvironmentalHumidity,
            } => 32 << 16 | 50,
            Usage::Sensor {
                usage: Sensor::EnvironmentalTemperature,
            } => 32 << 16 | 51,
            Usage::Sensor {
                usage: Sensor::EnvironmentalWindDirection,
            } => 32 << 16 | 52,
            Usage::Sensor {
                usage: Sensor::EnvironmentalWindSpeed,
            } => 32 << 16 | 53,
            Usage::Sensor {
                usage: Sensor::EnvironmentalAirQuality,
            } => 32 << 16 | 54,
            Usage::Sensor {
                usage: Sensor::EnvironmentalHeatIndex,
            } => 32 << 16 | 55,
            Usage::Sensor {
                usage: Sensor::EnvironmentalSurfaceTemperature,
            } => 32 << 16 | 56,
            Usage::Sensor {
                usage: Sensor::EnvironmentalVolatileOrganicCompounds,
            } => 32 << 16 | 57,
            Usage::Sensor {
                usage: Sensor::EnvironmentalObjectPresence,
            } => 32 << 16 | 58,
            Usage::Sensor {
                usage: Sensor::EnvironmentalObjectProximity,
            } => 32 << 16 | 59,
            Usage::Sensor {
                usage: Sensor::Light,
            } => 32 << 16 | 64,
            Usage::Sensor {
                usage: Sensor::LightAmbientLight,
            } => 32 << 16 | 65,
            Usage::Sensor {
                usage: Sensor::LightConsumerInfrared,
            } => 32 << 16 | 66,
            Usage::Sensor {
                usage: Sensor::LightInfraredLight,
            } => 32 << 16 | 67,
            Usage::Sensor {
                usage: Sensor::LightVisibleLight,
            } => 32 << 16 | 68,
            Usage::Sensor {
                usage: Sensor::LightUltravioletLight,
            } => 32 << 16 | 69,
            Usage::Sensor {
                usage: Sensor::Location,
            } => 32 << 16 | 80,
            Usage::Sensor {
                usage: Sensor::LocationBroadcast,
            } => 32 << 16 | 81,
            Usage::Sensor {
                usage: Sensor::LocationDeadReckoning,
            } => 32 << 16 | 82,
            Usage::Sensor {
                usage: Sensor::LocationGPS,
            } => 32 << 16 | 83,
            Usage::Sensor {
                usage: Sensor::LocationLookup,
            } => 32 << 16 | 84,
            Usage::Sensor {
                usage: Sensor::LocationOther,
            } => 32 << 16 | 85,
            Usage::Sensor {
                usage: Sensor::LocationStatic,
            } => 32 << 16 | 86,
            Usage::Sensor {
                usage: Sensor::LocationTriangulation,
            } => 32 << 16 | 87,
            Usage::Sensor {
                usage: Sensor::Mechanical,
            } => 32 << 16 | 96,
            Usage::Sensor {
                usage: Sensor::MechanicalBooleanSwitch,
            } => 32 << 16 | 97,
            Usage::Sensor {
                usage: Sensor::MechanicalBooleanSwitchArray,
            } => 32 << 16 | 98,
            Usage::Sensor {
                usage: Sensor::MechanicalMultivalueSwitch,
            } => 32 << 16 | 99,
            Usage::Sensor {
                usage: Sensor::MechanicalForce,
            } => 32 << 16 | 100,
            Usage::Sensor {
                usage: Sensor::MechanicalPressure,
            } => 32 << 16 | 101,
            Usage::Sensor {
                usage: Sensor::MechanicalStrain,
            } => 32 << 16 | 102,
            Usage::Sensor {
                usage: Sensor::MechanicalWeight,
            } => 32 << 16 | 103,
            Usage::Sensor {
                usage: Sensor::MechanicalHapticVibrator,
            } => 32 << 16 | 104,
            Usage::Sensor {
                usage: Sensor::MechanicalHallEffectSwitch,
            } => 32 << 16 | 105,
            Usage::Sensor {
                usage: Sensor::Motion,
            } => 32 << 16 | 112,
            Usage::Sensor {
                usage: Sensor::MotionAccelerometer1D,
            } => 32 << 16 | 113,
            Usage::Sensor {
                usage: Sensor::MotionAccelerometer2D,
            } => 32 << 16 | 114,
            Usage::Sensor {
                usage: Sensor::MotionAccelerometer3D,
            } => 32 << 16 | 115,
            Usage::Sensor {
                usage: Sensor::MotionGyrometer1D,
            } => 32 << 16 | 116,
            Usage::Sensor {
                usage: Sensor::MotionGyrometer2D,
            } => 32 << 16 | 117,
            Usage::Sensor {
                usage: Sensor::MotionGyrometer3D,
            } => 32 << 16 | 118,
            Usage::Sensor {
                usage: Sensor::MotionMotionDetector,
            } => 32 << 16 | 119,
            Usage::Sensor {
                usage: Sensor::MotionSpeedometer,
            } => 32 << 16 | 120,
            Usage::Sensor {
                usage: Sensor::MotionAccelerometer,
            } => 32 << 16 | 121,
            Usage::Sensor {
                usage: Sensor::MotionGyrometer,
            } => 32 << 16 | 122,
            Usage::Sensor {
                usage: Sensor::MotionGravityVector,
            } => 32 << 16 | 123,
            Usage::Sensor {
                usage: Sensor::MotionLinearAccelerometer,
            } => 32 << 16 | 124,
            Usage::Sensor {
                usage: Sensor::Orientation,
            } => 32 << 16 | 128,
            Usage::Sensor {
                usage: Sensor::OrientationCompass1D,
            } => 32 << 16 | 129,
            Usage::Sensor {
                usage: Sensor::OrientationCompass2D,
            } => 32 << 16 | 130,
            Usage::Sensor {
                usage: Sensor::OrientationCompass3D,
            } => 32 << 16 | 131,
            Usage::Sensor {
                usage: Sensor::OrientationInclinometer1D,
            } => 32 << 16 | 132,
            Usage::Sensor {
                usage: Sensor::OrientationInclinometer2D,
            } => 32 << 16 | 133,
            Usage::Sensor {
                usage: Sensor::OrientationInclinometer3D,
            } => 32 << 16 | 134,
            Usage::Sensor {
                usage: Sensor::OrientationDistance1D,
            } => 32 << 16 | 135,
            Usage::Sensor {
                usage: Sensor::OrientationDistance2D,
            } => 32 << 16 | 136,
            Usage::Sensor {
                usage: Sensor::OrientationDistance3D,
            } => 32 << 16 | 137,
            Usage::Sensor {
                usage: Sensor::OrientationDeviceOrientation,
            } => 32 << 16 | 138,
            Usage::Sensor {
                usage: Sensor::OrientationCompass,
            } => 32 << 16 | 139,
            Usage::Sensor {
                usage: Sensor::OrientationInclinometer,
            } => 32 << 16 | 140,
            Usage::Sensor {
                usage: Sensor::OrientationDistance,
            } => 32 << 16 | 141,
            Usage::Sensor {
                usage: Sensor::OrientationRelativeOrientation,
            } => 32 << 16 | 142,
            Usage::Sensor {
                usage: Sensor::OrientationSimpleOrientation,
            } => 32 << 16 | 143,
            Usage::Sensor {
                usage: Sensor::Scanner,
            } => 32 << 16 | 144,
            Usage::Sensor {
                usage: Sensor::ScannerBarcode,
            } => 32 << 16 | 145,
            Usage::Sensor {
                usage: Sensor::ScannerRFID,
            } => 32 << 16 | 146,
            Usage::Sensor {
                usage: Sensor::ScannerNFC,
            } => 32 << 16 | 147,
            Usage::Sensor {
                usage: Sensor::Time,
            } => 32 << 16 | 160,
            Usage::Sensor {
                usage: Sensor::TimeAlarmTimer,
            } => 32 << 16 | 161,
            Usage::Sensor {
                usage: Sensor::TimeRealTimeClock,
            } => 32 << 16 | 162,
            Usage::Sensor {
                usage: Sensor::PersonalActivity,
            } => 32 << 16 | 176,
            Usage::Sensor {
                usage: Sensor::PersonalActivityActivityDetection,
            } => 32 << 16 | 177,
            Usage::Sensor {
                usage: Sensor::PersonalActivityDevicePosition,
            } => 32 << 16 | 178,
            Usage::Sensor {
                usage: Sensor::PersonalActivityPedometer,
            } => 32 << 16 | 179,
            Usage::Sensor {
                usage: Sensor::PersonalActivityStepDetection,
            } => 32 << 16 | 180,
            Usage::Sensor {
                usage: Sensor::OrientationExtended,
            } => 32 << 16 | 192,
            Usage::Sensor {
                usage: Sensor::OrientationExtendedGeomagneticOrientation,
            } => 32 << 16 | 193,
            Usage::Sensor {
                usage: Sensor::OrientationExtendedMagnetometer,
            } => 32 << 16 | 194,
            Usage::Sensor {
                usage: Sensor::Other,
            } => 32 << 16 | 224,
            Usage::Sensor {
                usage: Sensor::OtherCustom,
            } => 32 << 16 | 225,
            Usage::Sensor {
                usage: Sensor::OtherGeneric,
            } => 32 << 16 | 226,
            Usage::Sensor {
                usage: Sensor::OtherGenericEnumerator,
            } => 32 << 16 | 227,
            Usage::Sensor {
                usage: Sensor::Event,
            } => 32 << 16 | 512,
            Usage::Sensor {
                usage: Sensor::EventSensorState,
            } => 32 << 16 | 513,
            Usage::Sensor {
                usage: Sensor::EventSensorEvent,
            } => 32 << 16 | 514,
            Usage::Sensor {
                usage: Sensor::Property,
            } => 32 << 16 | 768,
            Usage::Sensor {
                usage: Sensor::PropertyFriendlyName,
            } => 32 << 16 | 769,
            Usage::Sensor {
                usage: Sensor::PropertyPersistentUniqueID,
            } => 32 << 16 | 770,
            Usage::Sensor {
                usage: Sensor::PropertySensorStatus,
            } => 32 << 16 | 771,
            Usage::Sensor {
                usage: Sensor::PropertyMinimumReportInterval,
            } => 32 << 16 | 772,
            Usage::Sensor {
                usage: Sensor::PropertySensorManufacturer,
            } => 32 << 16 | 773,
            Usage::Sensor {
                usage: Sensor::PropertySensorModel,
            } => 32 << 16 | 774,
            Usage::Sensor {
                usage: Sensor::PropertySensorSerialNumber,
            } => 32 << 16 | 775,
            Usage::Sensor {
                usage: Sensor::PropertySensorDescription,
            } => 32 << 16 | 776,
            Usage::Sensor {
                usage: Sensor::PropertySensorConnectionType,
            } => 32 << 16 | 777,
            Usage::Sensor {
                usage: Sensor::PropertySensorDevicePath,
            } => 32 << 16 | 778,
            Usage::Sensor {
                usage: Sensor::PropertyHardwareRevision,
            } => 32 << 16 | 779,
            Usage::Sensor {
                usage: Sensor::PropertyFirmwareVersion,
            } => 32 << 16 | 780,
            Usage::Sensor {
                usage: Sensor::PropertyReleaseDate,
            } => 32 << 16 | 781,
            Usage::Sensor {
                usage: Sensor::PropertyReportInterval,
            } => 32 << 16 | 782,
            Usage::Sensor {
                usage: Sensor::PropertyChangeSensitivityAbsolute,
            } => 32 << 16 | 783,
            Usage::Sensor {
                usage: Sensor::PropertyChangeSensitivityPercentofRange,
            } => 32 << 16 | 784,
            Usage::Sensor {
                usage: Sensor::PropertyChangeSensitivityPercentRelative,
            } => 32 << 16 | 785,
            Usage::Sensor {
                usage: Sensor::PropertyAccuracy,
            } => 32 << 16 | 786,
            Usage::Sensor {
                usage: Sensor::PropertyResolution,
            } => 32 << 16 | 787,
            Usage::Sensor {
                usage: Sensor::PropertyMaximum,
            } => 32 << 16 | 788,
            Usage::Sensor {
                usage: Sensor::PropertyMinimum,
            } => 32 << 16 | 789,
            Usage::Sensor {
                usage: Sensor::PropertyReportingState,
            } => 32 << 16 | 790,
            Usage::Sensor {
                usage: Sensor::PropertyMaximumFIFOEvents,
            } => 32 << 16 | 794,
            Usage::Sensor {
                usage: Sensor::PropertyReportLatency,
            } => 32 << 16 | 795,
            Usage::Sensor {
                usage: Sensor::PropertyFlushFIFOEvents,
            } => 32 << 16 | 796,
            Usage::Sensor {
                usage: Sensor::PropertyMaximumPowerConsumption,
            } => 32 << 16 | 797,
            Usage::Sensor {
                usage: Sensor::DataFieldLocation,
            } => 32 << 16 | 1024,
            Usage::Sensor {
                usage: Sensor::DataFieldAltitudeAntennaSeaLevel,
            } => 32 << 16 | 1026,
            Usage::Sensor {
                usage: Sensor::DataFieldDifferentialReferenceStationID,
            } => 32 << 16 | 1027,
            Usage::Sensor {
                usage: Sensor::DataFieldAltitudeEllipsoidError,
            } => 32 << 16 | 1028,
            Usage::Sensor {
                usage: Sensor::DataFieldAltitudeEllipsoid,
            } => 32 << 16 | 1029,
            Usage::Sensor {
                usage: Sensor::DataFieldAltitudeSeaLevelError,
            } => 32 << 16 | 1030,
            Usage::Sensor {
                usage: Sensor::DataFieldAltitudeSeaLevel,
            } => 32 << 16 | 1031,
            Usage::Sensor {
                usage: Sensor::DataFieldDifferentialGPSDataAge,
            } => 32 << 16 | 1032,
            Usage::Sensor {
                usage: Sensor::DataFieldErrorRadius,
            } => 32 << 16 | 1033,
            Usage::Sensor {
                usage: Sensor::DataFieldFixQuality,
            } => 32 << 16 | 1034,
            Usage::Sensor {
                usage: Sensor::DataFieldFixType,
            } => 32 << 16 | 1035,
            Usage::Sensor {
                usage: Sensor::DataFieldGeoidalSeparation,
            } => 32 << 16 | 1036,
            Usage::Sensor {
                usage: Sensor::DataFieldGPSOperationMode,
            } => 32 << 16 | 1037,
            Usage::Sensor {
                usage: Sensor::DataFieldGPSSelectionMode,
            } => 32 << 16 | 1038,
            Usage::Sensor {
                usage: Sensor::DataFieldGPSStatus,
            } => 32 << 16 | 1039,
            Usage::Sensor {
                usage: Sensor::DataFieldPositionDilutionofPrecision,
            } => 32 << 16 | 1040,
            Usage::Sensor {
                usage: Sensor::DataFieldHorizontalDilutionofPrecision,
            } => 32 << 16 | 1041,
            Usage::Sensor {
                usage: Sensor::DataFieldVerticalDilutionofPrecision,
            } => 32 << 16 | 1042,
            Usage::Sensor {
                usage: Sensor::DataFieldLatitude,
            } => 32 << 16 | 1043,
            Usage::Sensor {
                usage: Sensor::DataFieldLongitude,
            } => 32 << 16 | 1044,
            Usage::Sensor {
                usage: Sensor::DataFieldTrueHeading,
            } => 32 << 16 | 1045,
            Usage::Sensor {
                usage: Sensor::DataFieldMagneticHeading,
            } => 32 << 16 | 1046,
            Usage::Sensor {
                usage: Sensor::DataFieldMagneticVariation,
            } => 32 << 16 | 1047,
            Usage::Sensor {
                usage: Sensor::DataFieldSpeed,
            } => 32 << 16 | 1048,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinView,
            } => 32 << 16 | 1049,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewAzimuth,
            } => 32 << 16 | 1050,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewElevation,
            } => 32 << 16 | 1051,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewIDs,
            } => 32 << 16 | 1052,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewPRNs,
            } => 32 << 16 | 1053,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewSNRatios,
            } => 32 << 16 | 1054,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesUsedCount,
            } => 32 << 16 | 1055,
            Usage::Sensor {
                usage: Sensor::DataFieldSatellitesUsedPRNs,
            } => 32 << 16 | 1056,
            Usage::Sensor {
                usage: Sensor::DataFieldNMEASentence,
            } => 32 << 16 | 1057,
            Usage::Sensor {
                usage: Sensor::DataFieldAddressLine1,
            } => 32 << 16 | 1058,
            Usage::Sensor {
                usage: Sensor::DataFieldAddressLine2,
            } => 32 << 16 | 1059,
            Usage::Sensor {
                usage: Sensor::DataFieldCity,
            } => 32 << 16 | 1060,
            Usage::Sensor {
                usage: Sensor::DataFieldStateorProvince,
            } => 32 << 16 | 1061,
            Usage::Sensor {
                usage: Sensor::DataFieldCountryorRegion,
            } => 32 << 16 | 1062,
            Usage::Sensor {
                usage: Sensor::DataFieldPostalCode,
            } => 32 << 16 | 1063,
            Usage::Sensor {
                usage: Sensor::PropertyLocation,
            } => 32 << 16 | 1066,
            Usage::Sensor {
                usage: Sensor::PropertyLocationDesiredAccuracy,
            } => 32 << 16 | 1067,
            Usage::Sensor {
                usage: Sensor::DataFieldEnvironmental,
            } => 32 << 16 | 1072,
            Usage::Sensor {
                usage: Sensor::DataFieldAtmosphericPressure,
            } => 32 << 16 | 1073,
            Usage::Sensor {
                usage: Sensor::DataFieldRelativeHumidity,
            } => 32 << 16 | 1075,
            Usage::Sensor {
                usage: Sensor::DataFieldTemperature,
            } => 32 << 16 | 1076,
            Usage::Sensor {
                usage: Sensor::DataFieldWindDirection,
            } => 32 << 16 | 1077,
            Usage::Sensor {
                usage: Sensor::DataFieldWindSpeed,
            } => 32 << 16 | 1078,
            Usage::Sensor {
                usage: Sensor::DataFieldAirQualityIndex,
            } => 32 << 16 | 1079,
            Usage::Sensor {
                usage: Sensor::DataFieldEquivalentCO2,
            } => 32 << 16 | 1080,
            Usage::Sensor {
                usage: Sensor::DataFieldVolatileOrganicCompoundConcentration,
            } => 32 << 16 | 1081,
            Usage::Sensor {
                usage: Sensor::DataFieldObjectPresence,
            } => 32 << 16 | 1082,
            Usage::Sensor {
                usage: Sensor::DataFieldObjectProximityRange,
            } => 32 << 16 | 1083,
            Usage::Sensor {
                usage: Sensor::DataFieldObjectProximityOutofRange,
            } => 32 << 16 | 1084,
            Usage::Sensor {
                usage: Sensor::PropertyEnvironmental,
            } => 32 << 16 | 1088,
            Usage::Sensor {
                usage: Sensor::PropertyReferencePressure,
            } => 32 << 16 | 1089,
            Usage::Sensor {
                usage: Sensor::DataFieldMotion,
            } => 32 << 16 | 1104,
            Usage::Sensor {
                usage: Sensor::DataFieldMotionState,
            } => 32 << 16 | 1105,
            Usage::Sensor {
                usage: Sensor::DataFieldAcceleration,
            } => 32 << 16 | 1106,
            Usage::Sensor {
                usage: Sensor::DataFieldAccelerationAxisX,
            } => 32 << 16 | 1107,
            Usage::Sensor {
                usage: Sensor::DataFieldAccelerationAxisY,
            } => 32 << 16 | 1108,
            Usage::Sensor {
                usage: Sensor::DataFieldAccelerationAxisZ,
            } => 32 << 16 | 1109,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocity,
            } => 32 << 16 | 1110,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocityaboutXAxis,
            } => 32 << 16 | 1111,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocityaboutYAxis,
            } => 32 << 16 | 1112,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocityaboutZAxis,
            } => 32 << 16 | 1113,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularPosition,
            } => 32 << 16 | 1114,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularPositionaboutXAxis,
            } => 32 << 16 | 1115,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularPositionaboutYAxis,
            } => 32 << 16 | 1116,
            Usage::Sensor {
                usage: Sensor::DataFieldAngularPositionaboutZAxis,
            } => 32 << 16 | 1117,
            Usage::Sensor {
                usage: Sensor::DataFieldMotionSpeed,
            } => 32 << 16 | 1118,
            Usage::Sensor {
                usage: Sensor::DataFieldMotionIntensity,
            } => 32 << 16 | 1119,
            Usage::Sensor {
                usage: Sensor::DataFieldOrientation,
            } => 32 << 16 | 1136,
            Usage::Sensor {
                usage: Sensor::DataFieldHeading,
            } => 32 << 16 | 1137,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingXAxis,
            } => 32 << 16 | 1138,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingYAxis,
            } => 32 << 16 | 16499,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingZAxis,
            } => 32 << 16 | 1140,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingCompensatedMagneticNorth,
            } => 32 << 16 | 1141,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingCompensatedTrueNorth,
            } => 32 << 16 | 1142,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingMagneticNorth,
            } => 32 << 16 | 1143,
            Usage::Sensor {
                usage: Sensor::DataFieldHeadingTrueNorth,
            } => 32 << 16 | 1144,
            Usage::Sensor {
                usage: Sensor::DataFieldDistance,
            } => 32 << 16 | 1145,
            Usage::Sensor {
                usage: Sensor::DataFieldDistanceXAxis,
            } => 32 << 16 | 1146,
            Usage::Sensor {
                usage: Sensor::DataFieldDistanceYAxis,
            } => 32 << 16 | 1147,
            Usage::Sensor {
                usage: Sensor::DataFieldDistanceZAxis,
            } => 32 << 16 | 1148,
            Usage::Sensor {
                usage: Sensor::DataFieldDistanceOutofRange,
            } => 32 << 16 | 1149,
            Usage::Sensor {
                usage: Sensor::DataFieldTilt,
            } => 32 << 16 | 1150,
            Usage::Sensor {
                usage: Sensor::DataFieldTiltXAxis,
            } => 32 << 16 | 1151,
            Usage::Sensor {
                usage: Sensor::DataFieldTiltYAxis,
            } => 32 << 16 | 1152,
            Usage::Sensor {
                usage: Sensor::DataFieldTiltZAxis,
            } => 32 << 16 | 1153,
            Usage::Sensor {
                usage: Sensor::DataFieldRotationMatrix,
            } => 32 << 16 | 1154,
            Usage::Sensor {
                usage: Sensor::DataFieldQuaternion,
            } => 32 << 16 | 1155,
            Usage::Sensor {
                usage: Sensor::DataFieldMagneticFlux,
            } => 32 << 16 | 1156,
            Usage::Sensor {
                usage: Sensor::DataFieldMagneticFluxXAxis,
            } => 32 << 16 | 1157,
            Usage::Sensor {
                usage: Sensor::DataFieldMagneticFluxYAxis,
            } => 32 << 16 | 1158,
            Usage::Sensor {
                usage: Sensor::DataFieldMagneticFluxZAxis,
            } => 32 << 16 | 1159,
            Usage::Sensor {
                usage: Sensor::DataFieldMagnetometerAccuracy,
            } => 32 << 16 | 1160,
            Usage::Sensor {
                usage: Sensor::DataFieldSimpleOrientationDirection,
            } => 32 << 16 | 1161,
            Usage::Sensor {
                usage: Sensor::DataFieldMechanical,
            } => 32 << 16 | 1168,
            Usage::Sensor {
                usage: Sensor::DataFieldBooleanSwitchState,
            } => 32 << 16 | 1169,
            Usage::Sensor {
                usage: Sensor::DataFieldBooleanSwitchArrayStates,
            } => 32 << 16 | 1170,
            Usage::Sensor {
                usage: Sensor::DataFieldMultivalueSwitchValue,
            } => 32 << 16 | 1171,
            Usage::Sensor {
                usage: Sensor::DataFieldForce,
            } => 32 << 16 | 1172,
            Usage::Sensor {
                usage: Sensor::DataFieldAbsolutePressure,
            } => 32 << 16 | 1173,
            Usage::Sensor {
                usage: Sensor::DataFieldGaugePressure,
            } => 32 << 16 | 1174,
            Usage::Sensor {
                usage: Sensor::DataFieldStrain,
            } => 32 << 16 | 1175,
            Usage::Sensor {
                usage: Sensor::DataFieldWeight,
            } => 32 << 16 | 1176,
            Usage::Sensor {
                usage: Sensor::PropertyMechanical,
            } => 32 << 16 | 1184,
            Usage::Sensor {
                usage: Sensor::PropertyVibrationState,
            } => 32 << 16 | 1185,
            Usage::Sensor {
                usage: Sensor::PropertyForwardVibrationSpeed,
            } => 32 << 16 | 1186,
            Usage::Sensor {
                usage: Sensor::PropertyBackwardVibrationSpeed,
            } => 32 << 16 | 1187,
            Usage::Sensor {
                usage: Sensor::DataFieldBiometric,
            } => 32 << 16 | 1200,
            Usage::Sensor {
                usage: Sensor::DataFieldHumanPresence,
            } => 32 << 16 | 1201,
            Usage::Sensor {
                usage: Sensor::DataFieldHumanProximityRange,
            } => 32 << 16 | 1202,
            Usage::Sensor {
                usage: Sensor::DataFieldHumanProximityOutofRange,
            } => 32 << 16 | 1203,
            Usage::Sensor {
                usage: Sensor::DataFieldHumanTouchState,
            } => 32 << 16 | 1204,
            Usage::Sensor {
                usage: Sensor::DataFieldBloodPressure,
            } => 32 << 16 | 1205,
            Usage::Sensor {
                usage: Sensor::DataFieldBloodPressureDiastolic,
            } => 32 << 16 | 1206,
            Usage::Sensor {
                usage: Sensor::DataFieldBloodPressureSystolic,
            } => 32 << 16 | 1207,
            Usage::Sensor {
                usage: Sensor::DataFieldHeartRate,
            } => 32 << 16 | 1208,
            Usage::Sensor {
                usage: Sensor::DataFieldRestingHeartRate,
            } => 32 << 16 | 1209,
            Usage::Sensor {
                usage: Sensor::DataFieldHeartbeatInterval,
            } => 32 << 16 | 1210,
            Usage::Sensor {
                usage: Sensor::DataFieldRespiratoryRate,
            } => 32 << 16 | 1211,
            Usage::Sensor {
                usage: Sensor::DataFieldSpO2,
            } => 32 << 16 | 1212,
            Usage::Sensor {
                usage: Sensor::DataFieldLight,
            } => 32 << 16 | 1232,
            Usage::Sensor {
                usage: Sensor::DataFieldIlluminance,
            } => 32 << 16 | 1233,
            Usage::Sensor {
                usage: Sensor::DataFieldColorTemperature,
            } => 32 << 16 | 1234,
            Usage::Sensor {
                usage: Sensor::DataFieldChromaticity,
            } => 32 << 16 | 1235,
            Usage::Sensor {
                usage: Sensor::DataFieldChromaticityX,
            } => 32 << 16 | 1236,
            Usage::Sensor {
                usage: Sensor::DataFieldChromaticityY,
            } => 32 << 16 | 1237,
            Usage::Sensor {
                usage: Sensor::DataFieldConsumerIRSentenceReceive,
            } => 32 << 16 | 1238,
            Usage::Sensor {
                usage: Sensor::DataFieldInfraredLight,
            } => 32 << 16 | 1239,
            Usage::Sensor {
                usage: Sensor::DataFieldRedLight,
            } => 32 << 16 | 1240,
            Usage::Sensor {
                usage: Sensor::DataFieldGreenLight,
            } => 32 << 16 | 1241,
            Usage::Sensor {
                usage: Sensor::DataFieldBlueLight,
            } => 32 << 16 | 1242,
            Usage::Sensor {
                usage: Sensor::DataFieldUltravioletALight,
            } => 32 << 16 | 1243,
            Usage::Sensor {
                usage: Sensor::DataFieldUltravioletBLight,
            } => 32 << 16 | 1244,
            Usage::Sensor {
                usage: Sensor::DataFieldUltravioletIndex,
            } => 32 << 16 | 1245,
            Usage::Sensor {
                usage: Sensor::PropertyLight,
            } => 32 << 16 | 1248,
            Usage::Sensor {
                usage: Sensor::PropertyConsumerIRSentenceSend,
            } => 32 << 16 | 1249,
            Usage::Sensor {
                usage: Sensor::DataFieldScanner,
            } => 32 << 16 | 1264,
            Usage::Sensor {
                usage: Sensor::DataFieldRFIDTag40Bit,
            } => 32 << 16 | 1265,
            Usage::Sensor {
                usage: Sensor::DataFieldNFCSentenceReceive,
            } => 32 << 16 | 1266,
            Usage::Sensor {
                usage: Sensor::PropertyScanner,
            } => 32 << 16 | 1272,
            Usage::Sensor {
                usage: Sensor::PropertyNFCSentenceSend,
            } => 32 << 16 | 1273,
            Usage::Sensor {
                usage: Sensor::DataFieldElectrical,
            } => 32 << 16 | 1280,
            Usage::Sensor {
                usage: Sensor::DataFieldCapacitance,
            } => 32 << 16 | 1281,
            Usage::Sensor {
                usage: Sensor::DataFieldCurrent,
            } => 32 << 16 | 1282,
            Usage::Sensor {
                usage: Sensor::DataFieldElectricalPower,
            } => 32 << 16 | 1283,
            Usage::Sensor {
                usage: Sensor::DataFieldInductance,
            } => 32 << 16 | 1284,
            Usage::Sensor {
                usage: Sensor::DataFieldResistance,
            } => 32 << 16 | 1285,
            Usage::Sensor {
                usage: Sensor::DataFieldVoltage,
            } => 32 << 16 | 1286,
            Usage::Sensor {
                usage: Sensor::DataFieldFrequency,
            } => 32 << 16 | 1287,
            Usage::Sensor {
                usage: Sensor::DataFieldPeriod,
            } => 32 << 16 | 1288,
            Usage::Sensor {
                usage: Sensor::DataFieldPercentofRange,
            } => 32 << 16 | 1289,
            Usage::Sensor {
                usage: Sensor::DataFieldTime,
            } => 32 << 16 | 1312,
            Usage::Sensor {
                usage: Sensor::DataFieldYear,
            } => 32 << 16 | 1313,
            Usage::Sensor {
                usage: Sensor::DataFieldMonth,
            } => 32 << 16 | 1314,
            Usage::Sensor {
                usage: Sensor::DataFieldDay,
            } => 32 << 16 | 1315,
            Usage::Sensor {
                usage: Sensor::DataFieldDayofWeek,
            } => 32 << 16 | 1316,
            Usage::Sensor {
                usage: Sensor::DataFieldHour,
            } => 32 << 16 | 1317,
            Usage::Sensor {
                usage: Sensor::DataFieldMinute,
            } => 32 << 16 | 1318,
            Usage::Sensor {
                usage: Sensor::DataFieldSecond,
            } => 32 << 16 | 1319,
            Usage::Sensor {
                usage: Sensor::DataFieldMillisecond,
            } => 32 << 16 | 1320,
            Usage::Sensor {
                usage: Sensor::DataFieldTimestamp,
            } => 32 << 16 | 1321,
            Usage::Sensor {
                usage: Sensor::DataFieldJulianDayofYear,
            } => 32 << 16 | 1322,
            Usage::Sensor {
                usage: Sensor::DataFieldTimeSinceSystemBoot,
            } => 32 << 16 | 1323,
            Usage::Sensor {
                usage: Sensor::PropertyTime,
            } => 32 << 16 | 1328,
            Usage::Sensor {
                usage: Sensor::PropertyTimeZoneOffsetfromUTC,
            } => 32 << 16 | 1329,
            Usage::Sensor {
                usage: Sensor::PropertyTimeZoneName,
            } => 32 << 16 | 1330,
            Usage::Sensor {
                usage: Sensor::PropertyDaylightSavingsTimeObserved,
            } => 32 << 16 | 1331,
            Usage::Sensor {
                usage: Sensor::PropertyTimeTrimAdjustment,
            } => 32 << 16 | 1332,
            Usage::Sensor {
                usage: Sensor::PropertyArmAlarm,
            } => 32 << 16 | 1333,
            Usage::Sensor {
                usage: Sensor::DataFieldCustom,
            } => 32 << 16 | 1344,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomUsage,
            } => 32 << 16 | 1345,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomBooleanArray,
            } => 32 << 16 | 1346,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue,
            } => 32 << 16 | 1347,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue1,
            } => 32 << 16 | 1348,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue2,
            } => 32 << 16 | 1349,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue3,
            } => 32 << 16 | 1350,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue4,
            } => 32 << 16 | 1351,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue5,
            } => 32 << 16 | 1352,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue6,
            } => 32 << 16 | 1353,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue7,
            } => 32 << 16 | 1354,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue8,
            } => 32 << 16 | 1355,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue9,
            } => 32 << 16 | 1356,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue10,
            } => 32 << 16 | 1357,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue11,
            } => 32 << 16 | 1358,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue12,
            } => 32 << 16 | 1359,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue13,
            } => 32 << 16 | 1360,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue14,
            } => 32 << 16 | 1361,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue15,
            } => 32 << 16 | 1362,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue16,
            } => 32 << 16 | 1363,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue17,
            } => 32 << 16 | 1364,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue18,
            } => 32 << 16 | 1365,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue19,
            } => 32 << 16 | 1366,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue20,
            } => 32 << 16 | 1367,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue21,
            } => 32 << 16 | 1368,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue22,
            } => 32 << 16 | 1369,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue23,
            } => 32 << 16 | 1370,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue24,
            } => 32 << 16 | 1371,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue25,
            } => 32 << 16 | 1372,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue26,
            } => 32 << 16 | 1373,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue27,
            } => 32 << 16 | 1374,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomValue28,
            } => 32 << 16 | 1375,
            Usage::Sensor {
                usage: Sensor::DataFieldGeneric,
            } => 32 << 16 | 1376,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericGUIDorPROPERTYKEY,
            } => 32 << 16 | 1377,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericCategoryGUID,
            } => 32 << 16 | 1378,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericTypeGUID,
            } => 32 << 16 | 1379,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericEventPROPERTYKEY,
            } => 32 << 16 | 1380,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericPropertyPROPERTYKEY,
            } => 32 << 16 | 1381,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericDataFieldPROPERTYKEY,
            } => 32 << 16 | 1382,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericEvent,
            } => 32 << 16 | 1383,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericProperty,
            } => 32 << 16 | 1384,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericDataField,
            } => 32 << 16 | 1385,
            Usage::Sensor {
                usage: Sensor::DataFieldEnumeratorTableRowIndex,
            } => 32 << 16 | 1386,
            Usage::Sensor {
                usage: Sensor::DataFieldEnumeratorTableRowCount,
            } => 32 << 16 | 1387,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericGUIDorPROPERTYKEYkind,
            } => 32 << 16 | 1388,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericGUID,
            } => 32 << 16 | 1389,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericPROPERTYKEY,
            } => 32 << 16 | 1390,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericTopLevelCollectionID,
            } => 32 << 16 | 1391,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericReportID,
            } => 32 << 16 | 1392,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericReportItemPositionIndex,
            } => 32 << 16 | 1393,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericFirmwareVARTYPE,
            } => 32 << 16 | 1394,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericUnitofMeasure,
            } => 32 << 16 | 1395,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericUnitExponent,
            } => 32 << 16 | 1396,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericReportSize,
            } => 32 << 16 | 1397,
            Usage::Sensor {
                usage: Sensor::DataFieldGenericReportCount,
            } => 32 << 16 | 1398,
            Usage::Sensor {
                usage: Sensor::PropertyGeneric,
            } => 32 << 16 | 1408,
            Usage::Sensor {
                usage: Sensor::PropertyEnumeratorTableRowIndex,
            } => 32 << 16 | 1409,
            Usage::Sensor {
                usage: Sensor::PropertyEnumeratorTableRowCount,
            } => 32 << 16 | 1410,
            Usage::Sensor {
                usage: Sensor::DataFieldPersonalActivity,
            } => 32 << 16 | 1424,
            Usage::Sensor {
                usage: Sensor::DataFieldActivityType,
            } => 32 << 16 | 1425,
            Usage::Sensor {
                usage: Sensor::DataFieldActivityState,
            } => 32 << 16 | 1426,
            Usage::Sensor {
                usage: Sensor::DataFieldDevicePosition,
            } => 32 << 16 | 1427,
            Usage::Sensor {
                usage: Sensor::DataFieldStepCount,
            } => 32 << 16 | 1428,
            Usage::Sensor {
                usage: Sensor::DataFieldStepCountReset,
            } => 32 << 16 | 1429,
            Usage::Sensor {
                usage: Sensor::DataFieldStepDuration,
            } => 32 << 16 | 1430,
            Usage::Sensor {
                usage: Sensor::DataFieldStepType,
            } => 32 << 16 | 1431,
            Usage::Sensor {
                usage: Sensor::PropertyMinimumActivityDetectionInterval,
            } => 32 << 16 | 1440,
            Usage::Sensor {
                usage: Sensor::PropertySupportedActivityTypes,
            } => 32 << 16 | 1441,
            Usage::Sensor {
                usage: Sensor::PropertySubscribedActivityTypes,
            } => 32 << 16 | 1442,
            Usage::Sensor {
                usage: Sensor::PropertySupportedStepTypes,
            } => 32 << 16 | 1443,
            Usage::Sensor {
                usage: Sensor::PropertySubscribedStepTypes,
            } => 32 << 16 | 1444,
            Usage::Sensor {
                usage: Sensor::PropertyFloorHeight,
            } => 32 << 16 | 1445,
            Usage::Sensor {
                usage: Sensor::DataFieldCustomTypeID,
            } => 32 << 16 | 1456,
            Usage::Sensor {
                usage: Sensor::SensorStateUndefined,
            } => 32 << 16 | 2048,
            Usage::Sensor {
                usage: Sensor::SensorStateReady,
            } => 32 << 16 | 2049,
            Usage::Sensor {
                usage: Sensor::SensorStateNotAvailable,
            } => 32 << 16 | 2050,
            Usage::Sensor {
                usage: Sensor::SensorStateNoDataSel,
            } => 32 << 16 | 2051,
            Usage::Sensor {
                usage: Sensor::SensorStateInitializing,
            } => 32 << 16 | 2052,
            Usage::Sensor {
                usage: Sensor::SensorStateAccessDenied,
            } => 32 << 16 | 2053,
            Usage::Sensor {
                usage: Sensor::SensorStateError,
            } => 32 << 16 | 2054,
            Usage::Sensor {
                usage: Sensor::SensorEventUnknown,
            } => 32 << 16 | 2064,
            Usage::Sensor {
                usage: Sensor::SensorEventStateChanged,
            } => 32 << 16 | 2065,
            Usage::Sensor {
                usage: Sensor::SensorEventPropertyChanged,
            } => 32 << 16 | 2066,
            Usage::Sensor {
                usage: Sensor::SensorEventDataUpdated,
            } => 32 << 16 | 2067,
            Usage::Sensor {
                usage: Sensor::SensorEventPollResponse,
            } => 32 << 16 | 2068,
            Usage::Sensor {
                usage: Sensor::SensorEventChangeSensitivity,
            } => 32 << 16 | 2069,
            Usage::Sensor {
                usage: Sensor::SensorEventRangeMaximumReached,
            } => 32 << 16 | 2070,
            Usage::Sensor {
                usage: Sensor::SensorEventRangeMinimumReached,
            } => 32 << 16 | 2071,
            Usage::Sensor {
                usage: Sensor::SensorEventHighThresholdCrossUpward,
            } => 32 << 16 | 2072,
            Usage::Sensor {
                usage: Sensor::SensorEventHighThresholdCrossDownward,
            } => 32 << 16 | 2073,
            Usage::Sensor {
                usage: Sensor::SensorEventLowThresholdCrossUpward,
            } => 32 << 16 | 2074,
            Usage::Sensor {
                usage: Sensor::SensorEventLowThresholdCrossDownward,
            } => 32 << 16 | 2075,
            Usage::Sensor {
                usage: Sensor::SensorEventZeroThresholdCrossUpward,
            } => 32 << 16 | 2076,
            Usage::Sensor {
                usage: Sensor::SensorEventZeroThresholdCrossDownward,
            } => 32 << 16 | 2077,
            Usage::Sensor {
                usage: Sensor::SensorEventPeriodExceeded,
            } => 32 << 16 | 2078,
            Usage::Sensor {
                usage: Sensor::SensorEventFrequencyExceeded,
            } => 32 << 16 | 2079,
            Usage::Sensor {
                usage: Sensor::SensorEventComplexTrigger,
            } => 32 << 16 | 2080,
            Usage::Sensor {
                usage: Sensor::ConnectionTypePCIntegrated,
            } => 32 << 16 | 2096,
            Usage::Sensor {
                usage: Sensor::ConnectionTypePCAttached,
            } => 32 << 16 | 2097,
            Usage::Sensor {
                usage: Sensor::ConnectionTypePCExternal,
            } => 32 << 16 | 2098,
            Usage::Sensor {
                usage: Sensor::ReportingStateReportNoEvents,
            } => 32 << 16 | 2112,
            Usage::Sensor {
                usage: Sensor::ReportingStateReportAllEvents,
            } => 32 << 16 | 2113,
            Usage::Sensor {
                usage: Sensor::ReportingStateReportThresholdEvents,
            } => 32 << 16 | 2114,
            Usage::Sensor {
                usage: Sensor::ReportingStateWakeOnNoEvents,
            } => 32 << 16 | 2115,
            Usage::Sensor {
                usage: Sensor::ReportingStateWakeOnAllEvents,
            } => 32 << 16 | 2116,
            Usage::Sensor {
                usage: Sensor::ReportingStateWakeOnThresholdEvents,
            } => 32 << 16 | 2117,
            Usage::Sensor {
                usage: Sensor::PropertySamplingRate,
            } => 32 << 16 | 791,
            Usage::Sensor {
                usage: Sensor::PropertyResponseCurve,
            } => 32 << 16 | 792,
            Usage::Sensor {
                usage: Sensor::PropertyPowerState,
            } => 32 << 16 | 793,
            Usage::Sensor {
                usage: Sensor::PowerStateUndefined,
            } => 32 << 16 | 2128,
            Usage::Sensor {
                usage: Sensor::PowerStateD0FullPower,
            } => 32 << 16 | 2129,
            Usage::Sensor {
                usage: Sensor::PowerStateD1LowPower,
            } => 32 << 16 | 2130,
            Usage::Sensor {
                usage: Sensor::PowerStateD2StandbyPowerwithWakeup,
            } => 32 << 16 | 2131,
            Usage::Sensor {
                usage: Sensor::PowerStateD3SleepwithWakeup,
            } => 32 << 16 | 2132,
            Usage::Sensor {
                usage: Sensor::PowerStateD4PowerOff,
            } => 32 << 16 | 2133,
            Usage::Sensor {
                usage: Sensor::AccuracyDefault,
            } => 32 << 16 | 2144,
            Usage::Sensor {
                usage: Sensor::AccuracyHigh,
            } => 32 << 16 | 2145,
            Usage::Sensor {
                usage: Sensor::AccuracyMedium,
            } => 32 << 16 | 2146,
            Usage::Sensor {
                usage: Sensor::AccuracyLow,
            } => 32 << 16 | 2147,
            Usage::Sensor {
                usage: Sensor::FixQualityNoFix,
            } => 32 << 16 | 2160,
            Usage::Sensor {
                usage: Sensor::FixQualityGPS,
            } => 32 << 16 | 2161,
            Usage::Sensor {
                usage: Sensor::FixQualityDGPS,
            } => 32 << 16 | 2162,
            Usage::Sensor {
                usage: Sensor::DataFieldFixTypeNAry110,
            } => 32 << 16 | 1035,
            Usage::Sensor {
                usage: Sensor::FixTypeNoFix,
            } => 32 << 16 | 2176,
            Usage::Sensor {
                usage: Sensor::FixTypeGPSSPSModeFixValid,
            } => 32 << 16 | 2177,
            Usage::Sensor {
                usage: Sensor::FixTypeDGPSSPSModeFixValid,
            } => 32 << 16 | 2178,
            Usage::Sensor {
                usage: Sensor::FixTypeGPSPPSModeFixValid,
            } => 32 << 16 | 2179,
            Usage::Sensor {
                usage: Sensor::FixTypeRealTimeKinematic,
            } => 32 << 16 | 2180,
            Usage::Sensor {
                usage: Sensor::FixTypeFloatRTK,
            } => 32 << 16 | 2181,
            Usage::Sensor {
                usage: Sensor::FixTypeEstimateddeadreckoned,
            } => 32 << 16 | 2182,
            Usage::Sensor {
                usage: Sensor::FixTypeManualInputMode,
            } => 32 << 16 | 2183,
            Usage::Sensor {
                usage: Sensor::FixTypeSimulatorMode,
            } => 32 << 16 | 2184,
            Usage::Sensor {
                usage: Sensor::GPSOperationModeManual,
            } => 32 << 16 | 2192,
            Usage::Sensor {
                usage: Sensor::GPSOperationModeAutomatic,
            } => 32 << 16 | 2193,
            Usage::Sensor {
                usage: Sensor::GPSSelectionModeAutonomous,
            } => 32 << 16 | 2208,
            Usage::Sensor {
                usage: Sensor::GPSSelectionModeDGPS,
            } => 32 << 16 | 2209,
            Usage::Sensor {
                usage: Sensor::GPSSelectionModeEstimateddeadreckoned,
            } => 32 << 16 | 2210,
            Usage::Sensor {
                usage: Sensor::GPSSelectionModeManualInput,
            } => 32 << 16 | 2211,
            Usage::Sensor {
                usage: Sensor::GPSSelectionModeSimulator,
            } => 32 << 16 | 2212,
            Usage::Sensor {
                usage: Sensor::GPSSelectionModeDataNotValid,
            } => 32 << 16 | 2213,
            Usage::Sensor {
                usage: Sensor::GPSStatusDataValid,
            } => 32 << 16 | 2224,
            Usage::Sensor {
                usage: Sensor::GPSStatusDataNotValid,
            } => 32 << 16 | 2225,
            Usage::Sensor {
                usage: Sensor::DayofWeekSunday,
            } => 32 << 16 | 2240,
            Usage::Sensor {
                usage: Sensor::DayofWeekMonday,
            } => 32 << 16 | 2241,
            Usage::Sensor {
                usage: Sensor::DayofWeekTuesday,
            } => 32 << 16 | 2242,
            Usage::Sensor {
                usage: Sensor::DayofWeekWednesday,
            } => 32 << 16 | 2243,
            Usage::Sensor {
                usage: Sensor::DayofWeekThursday,
            } => 32 << 16 | 2244,
            Usage::Sensor {
                usage: Sensor::DayofWeekFriday,
            } => 32 << 16 | 2245,
            Usage::Sensor {
                usage: Sensor::DayofWeekSaturday,
            } => 32 << 16 | 2246,
            Usage::Sensor {
                usage: Sensor::KindCategory,
            } => 32 << 16 | 2256,
            Usage::Sensor {
                usage: Sensor::KindType,
            } => 32 << 16 | 2257,
            Usage::Sensor {
                usage: Sensor::KindEvent,
            } => 32 << 16 | 2258,
            Usage::Sensor {
                usage: Sensor::KindProperty,
            } => 32 << 16 | 2259,
            Usage::Sensor {
                usage: Sensor::KindDataField,
            } => 32 << 16 | 2260,
            Usage::Sensor {
                usage: Sensor::MagnetometerAccuracyLow,
            } => 32 << 16 | 2272,
            Usage::Sensor {
                usage: Sensor::MagnetometerAccuracyMedium,
            } => 32 << 16 | 2273,
            Usage::Sensor {
                usage: Sensor::MagnetometerAccuracyHigh,
            } => 32 << 16 | 2274,
            Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionNotRotated,
            } => 32 << 16 | 2288,
            Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionRotated90Degrees,
            } => 32 << 16 | 2289,
            Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionRotated180Degrees,
            } => 32 << 16 | 2290,
            Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionRotated270Degrees,
            } => 32 << 16 | 2291,
            Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionFaceUp,
            } => 32 << 16 | 2292,
            Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionFaceDown,
            } => 32 << 16 | 2293,
            Usage::Sensor {
                usage: Sensor::VT_NULLEmpty,
            } => 32 << 16 | 2304,
            Usage::Sensor {
                usage: Sensor::VT_BOOLBoolean,
            } => 32 << 16 | 2305,
            Usage::Sensor {
                usage: Sensor::VT_UI1Byte,
            } => 32 << 16 | 2306,
            Usage::Sensor {
                usage: Sensor::VT_I1Character,
            } => 32 << 16 | 2307,
            Usage::Sensor {
                usage: Sensor::VT_UI2UnsignedShort,
            } => 32 << 16 | 2308,
            Usage::Sensor {
                usage: Sensor::VT_I2Short,
            } => 32 << 16 | 2309,
            Usage::Sensor {
                usage: Sensor::VT_UI4UnsignedLong,
            } => 32 << 16 | 2310,
            Usage::Sensor {
                usage: Sensor::VT_I4Long,
            } => 32 << 16 | 2311,
            Usage::Sensor {
                usage: Sensor::VT_UI8UnsignedLongLong,
            } => 32 << 16 | 2312,
            Usage::Sensor {
                usage: Sensor::VT_I8LongLong,
            } => 32 << 16 | 2313,
            Usage::Sensor {
                usage: Sensor::VT_R4Float,
            } => 32 << 16 | 2314,
            Usage::Sensor {
                usage: Sensor::VT_R8Double,
            } => 32 << 16 | 2315,
            Usage::Sensor {
                usage: Sensor::VT_WSTRWideString,
            } => 32 << 16 | 2316,
            Usage::Sensor {
                usage: Sensor::VT_STRNarrowString,
            } => 32 << 16 | 2317,
            Usage::Sensor {
                usage: Sensor::VT_CLSIDGuid,
            } => 32 << 16 | 2318,
            Usage::Sensor {
                usage: Sensor::VT_VECTORVT_UI1OpaqueStructure,
            } => 32 << 16 | 2319,
            Usage::Sensor {
                usage: Sensor::VT_F16E0HID16bitFloatwithUnitExponent0,
            } => 32 << 16 | 2320,
            Usage::Sensor {
                usage: Sensor::VT_F16E1HID16bitFloatwithUnitExponent1,
            } => 32 << 16 | 2321,
            Usage::Sensor {
                usage: Sensor::VT_F16E2HID16bitFloatwithUnitExponent2,
            } => 32 << 16 | 2322,
            Usage::Sensor {
                usage: Sensor::VT_F16E3HID16bitFloatwithUnitExponent3,
            } => 32 << 16 | 2323,
            Usage::Sensor {
                usage: Sensor::VT_F16E4HID16bitFloatwithUnitExponent4,
            } => 32 << 16 | 2324,
            Usage::Sensor {
                usage: Sensor::VT_F16E5HID16bitFloatwithUnitExponent5,
            } => 32 << 16 | 2325,
            Usage::Sensor {
                usage: Sensor::VT_F16E6HID16bitFloatwithUnitExponent6,
            } => 32 << 16 | 2326,
            Usage::Sensor {
                usage: Sensor::VT_F16E7HID16bitFloatwithUnitExponent7,
            } => 32 << 16 | 2327,
            Usage::Sensor {
                usage: Sensor::VT_F16E8HID16bitFloatwithUnitExponent8,
            } => 32 << 16 | 2328,
            Usage::Sensor {
                usage: Sensor::VT_F16E9HID16bitFloatwithUnitExponent9,
            } => 32 << 16 | 2329,
            Usage::Sensor {
                usage: Sensor::VT_F16EAHID16bitFloatwithUnitExponentA,
            } => 32 << 16 | 2330,
            Usage::Sensor {
                usage: Sensor::VT_F16EBHID16bitFloatwithUnitExponentB,
            } => 32 << 16 | 2331,
            Usage::Sensor {
                usage: Sensor::VT_F16ECHID16bitFloatwithUnitExponentC,
            } => 32 << 16 | 2332,
            Usage::Sensor {
                usage: Sensor::VT_F16EDHID16bitFloatwithUnitExponentD,
            } => 32 << 16 | 2333,
            Usage::Sensor {
                usage: Sensor::VT_F16EEHID16bitFloatwithUnitExponentE,
            } => 32 << 16 | 2334,
            Usage::Sensor {
                usage: Sensor::VT_F16EFHID16bitFloatwithUnitExponentF,
            } => 32 << 16 | 2335,
            Usage::Sensor {
                usage: Sensor::VT_F32E0HID32bitFloatwithUnitExponent0,
            } => 32 << 16 | 2336,
            Usage::Sensor {
                usage: Sensor::VT_F32E1HID32bitFloatwithUnitExponent1,
            } => 32 << 16 | 2337,
            Usage::Sensor {
                usage: Sensor::VT_F32E2HID32bitFloatwithUnitExponent2,
            } => 32 << 16 | 2338,
            Usage::Sensor {
                usage: Sensor::VT_F32E3HID32bitFloatwithUnitExponent3,
            } => 32 << 16 | 2339,
            Usage::Sensor {
                usage: Sensor::VT_F32E4HID32bitFloatwithUnitExponent4,
            } => 32 << 16 | 2340,
            Usage::Sensor {
                usage: Sensor::VT_F32E5HID32bitFloatwithUnitExponent5,
            } => 32 << 16 | 2341,
            Usage::Sensor {
                usage: Sensor::VT_F32E6HID32bitFloatwithUnitExponent6,
            } => 32 << 16 | 2342,
            Usage::Sensor {
                usage: Sensor::VT_F32E7HID32bitFloatwithUnitExponent7,
            } => 32 << 16 | 2343,
            Usage::Sensor {
                usage: Sensor::VT_F32E8HID32bitFloatwithUnitExponent8,
            } => 32 << 16 | 2344,
            Usage::Sensor {
                usage: Sensor::VT_F32E9HID32bitFloatwithUnitExponent9,
            } => 32 << 16 | 2345,
            Usage::Sensor {
                usage: Sensor::VT_F32EAHID32bitFloatwithUnitExponentA,
            } => 32 << 16 | 2346,
            Usage::Sensor {
                usage: Sensor::VT_F32EBHID32bitFloatwithUnitExponentB,
            } => 32 << 16 | 2347,
            Usage::Sensor {
                usage: Sensor::VT_F32ECHID32bitFloatwithUnitExponentC,
            } => 32 << 16 | 2348,
            Usage::Sensor {
                usage: Sensor::VT_F32EDHID32bitFloatwithUnitExponentD,
            } => 32 << 16 | 2349,
            Usage::Sensor {
                usage: Sensor::VT_F32EEHID32bitFloatwithUnitExponentE,
            } => 32 << 16 | 2350,
            Usage::Sensor {
                usage: Sensor::VT_F32EFHID32bitFloatwithUnitExponentF,
            } => 32 << 16 | 2351,
            Usage::Sensor {
                usage: Sensor::ActivityTypeUnknown,
            } => 32 << 16 | 2352,
            Usage::Sensor {
                usage: Sensor::ActivityTypeStationary,
            } => 32 << 16 | 2353,
            Usage::Sensor {
                usage: Sensor::ActivityTypeFidgeting,
            } => 32 << 16 | 2354,
            Usage::Sensor {
                usage: Sensor::ActivityTypeWalking,
            } => 32 << 16 | 2355,
            Usage::Sensor {
                usage: Sensor::ActivityTypeRunning,
            } => 32 << 16 | 2356,
            Usage::Sensor {
                usage: Sensor::ActivityTypeInVehicle,
            } => 32 << 16 | 2357,
            Usage::Sensor {
                usage: Sensor::ActivityTypeBiking,
            } => 32 << 16 | 2358,
            Usage::Sensor {
                usage: Sensor::ActivityTypeIdle,
            } => 32 << 16 | 2359,
            Usage::Sensor {
                usage: Sensor::UnitNotSpecified,
            } => 32 << 16 | 2368,
            Usage::Sensor {
                usage: Sensor::UnitLux,
            } => 32 << 16 | 2369,
            Usage::Sensor {
                usage: Sensor::UnitDegreesKelvin,
            } => 32 << 16 | 2370,
            Usage::Sensor {
                usage: Sensor::UnitDegreesCelsius,
            } => 32 << 16 | 2371,
            Usage::Sensor {
                usage: Sensor::UnitPascal,
            } => 32 << 16 | 2372,
            Usage::Sensor {
                usage: Sensor::UnitNewton,
            } => 32 << 16 | 2373,
            Usage::Sensor {
                usage: Sensor::UnitMetersSecond,
            } => 32 << 16 | 2374,
            Usage::Sensor {
                usage: Sensor::UnitKilogram,
            } => 32 << 16 | 2375,
            Usage::Sensor {
                usage: Sensor::UnitMeter,
            } => 32 << 16 | 2376,
            Usage::Sensor {
                usage: Sensor::UnitMetersSecondSecond,
            } => 32 << 16 | 2377,
            Usage::Sensor {
                usage: Sensor::UnitFarad,
            } => 32 << 16 | 2378,
            Usage::Sensor {
                usage: Sensor::UnitAmpere,
            } => 32 << 16 | 2379,
            Usage::Sensor {
                usage: Sensor::UnitWatt,
            } => 32 << 16 | 2380,
            Usage::Sensor {
                usage: Sensor::UnitHenry,
            } => 32 << 16 | 2381,
            Usage::Sensor {
                usage: Sensor::UnitOhm,
            } => 32 << 16 | 2382,
            Usage::Sensor {
                usage: Sensor::UnitVolt,
            } => 32 << 16 | 2383,
            Usage::Sensor {
                usage: Sensor::UnitHertz,
            } => 32 << 16 | 2384,
            Usage::Sensor {
                usage: Sensor::UnitBar,
            } => 32 << 16 | 2385,
            Usage::Sensor {
                usage: Sensor::UnitDegreesAnticlockwise,
            } => 32 << 16 | 2386,
            Usage::Sensor {
                usage: Sensor::UnitDegreesClockwise,
            } => 32 << 16 | 2387,
            Usage::Sensor {
                usage: Sensor::UnitDegrees,
            } => 32 << 16 | 2388,
            Usage::Sensor {
                usage: Sensor::UnitDegreesSecond,
            } => 32 << 16 | 2389,
            Usage::Sensor {
                usage: Sensor::UnitDegreesSecondSecond,
            } => 32 << 16 | 2390,
            Usage::Sensor {
                usage: Sensor::UnitKnot,
            } => 32 << 16 | 2391,
            Usage::Sensor {
                usage: Sensor::UnitPercent,
            } => 32 << 16 | 2392,
            Usage::Sensor {
                usage: Sensor::UnitSecond,
            } => 32 << 16 | 2393,
            Usage::Sensor {
                usage: Sensor::UnitMillisecond,
            } => 32 << 16 | 2394,
            Usage::Sensor {
                usage: Sensor::UnitG,
            } => 32 << 16 | 2395,
            Usage::Sensor {
                usage: Sensor::UnitBytes,
            } => 32 << 16 | 2396,
            Usage::Sensor {
                usage: Sensor::UnitMilligauss,
            } => 32 << 16 | 2397,
            Usage::Sensor {
                usage: Sensor::UnitBits,
            } => 32 << 16 | 2398,
            Usage::Sensor {
                usage: Sensor::ActivityStateNoStateChange,
            } => 32 << 16 | 2400,
            Usage::Sensor {
                usage: Sensor::ActivityStateStartActivity,
            } => 32 << 16 | 2401,
            Usage::Sensor {
                usage: Sensor::ActivityStateEndActivity,
            } => 32 << 16 | 2402,
            Usage::Sensor {
                usage: Sensor::Exponent01,
            } => 32 << 16 | 2416,
            Usage::Sensor {
                usage: Sensor::Exponent110,
            } => 32 << 16 | 2417,
            Usage::Sensor {
                usage: Sensor::Exponent2100,
            } => 32 << 16 | 2418,
            Usage::Sensor {
                usage: Sensor::Exponent31000,
            } => 32 << 16 | 2419,
            Usage::Sensor {
                usage: Sensor::Exponent410000,
            } => 32 << 16 | 2420,
            Usage::Sensor {
                usage: Sensor::Exponent5100000,
            } => 32 << 16 | 2421,
            Usage::Sensor {
                usage: Sensor::Exponent61000000,
            } => 32 << 16 | 2422,
            Usage::Sensor {
                usage: Sensor::Exponent710000000,
            } => 32 << 16 | 2423,
            Usage::Sensor {
                usage: Sensor::Exponent8000000001,
            } => 32 << 16 | 2424,
            Usage::Sensor {
                usage: Sensor::Exponent900000001,
            } => 32 << 16 | 2425,
            Usage::Sensor {
                usage: Sensor::ExponentA0000001,
            } => 32 << 16 | 2426,
            Usage::Sensor {
                usage: Sensor::ExponentB000001,
            } => 32 << 16 | 2427,
            Usage::Sensor {
                usage: Sensor::ExponentC00001,
            } => 32 << 16 | 2428,
            Usage::Sensor {
                usage: Sensor::ExponentD0001,
            } => 32 << 16 | 2429,
            Usage::Sensor {
                usage: Sensor::ExponentE001,
            } => 32 << 16 | 2430,
            Usage::Sensor {
                usage: Sensor::ExponentF01,
            } => 32 << 16 | 2431,
            Usage::Sensor {
                usage: Sensor::DevicePositionUnknown,
            } => 32 << 16 | 2432,
            Usage::Sensor {
                usage: Sensor::DevicePositionUnchanged,
            } => 32 << 16 | 2433,
            Usage::Sensor {
                usage: Sensor::DevicePositionOnDesk,
            } => 32 << 16 | 2434,
            Usage::Sensor {
                usage: Sensor::DevicePositionInHand,
            } => 32 << 16 | 2435,
            Usage::Sensor {
                usage: Sensor::DevicePositionMovinginBag,
            } => 32 << 16 | 2436,
            Usage::Sensor {
                usage: Sensor::DevicePositionStationaryinBag,
            } => 32 << 16 | 2437,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Undefined,
            } => 64 << 16 | 0,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::MedicalUltrasound,
            } => 64 << 16 | 1,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::VCRAcquisition,
            } => 64 << 16 | 32,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::FreezeThaw,
            } => 64 << 16 | 33,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::ClipStore,
            } => 64 << 16 | 34,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Update,
            } => 64 << 16 | 35,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Next,
            } => 64 << 16 | 36,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Save,
            } => 64 << 16 | 37,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Print,
            } => 64 << 16 | 38,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::MicrophoneEnable,
            } => 64 << 16 | 39,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Cine,
            } => 64 << 16 | 64,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::TransmitPower,
            } => 64 << 16 | 65,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Volume,
            } => 64 << 16 | 66,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Focus,
            } => 64 << 16 | 67,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::Depth,
            } => 64 << 16 | 68,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftStepPrimary,
            } => 64 << 16 | 96,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftStepSecondary,
            } => 64 << 16 | 97,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::DepthGainCompensation,
            } => 64 << 16 | 112,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::ZoomSelect,
            } => 64 << 16 | 128,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::ZoomAdjust,
            } => 64 << 16 | 129,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::SpectralDopplerModeSelect,
            } => 64 << 16 | 130,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::SpectralDopplerAdjust,
            } => 64 << 16 | 131,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::ColorDopplerModeSelect,
            } => 64 << 16 | 132,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::ColorDopplerAdjust,
            } => 64 << 16 | 133,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::MotionModeSelect,
            } => 64 << 16 | 134,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::MotionModeAdjust,
            } => 64 << 16 | 135,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::TwoDModeSelect,
            } => 64 << 16 | 136,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::TwoDModeAdjust,
            } => 64 << 16 | 137,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftControlSelect,
            } => 64 << 16 | 160,
            Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftControlAdjust,
            } => 64 << 16 | 161,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::Undefined,
            } => 65 << 16 | 0,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDisplay,
            } => 65 << 16 | 1,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRow,
            } => 65 << 16 | 2,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::EightDotBrailleCell,
            } => 65 << 16 | 3,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::SixDotBrailleCell,
            } => 65 << 16 | 4,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::NumberofBrailleCells,
            } => 65 << 16 | 5,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::ScreenReaderControl,
            } => 65 << 16 | 6,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::ScreenReaderIdentifier,
            } => 65 << 16 | 7,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterSet1,
            } => 65 << 16 | 250,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterSet2,
            } => 65 << 16 | 251,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterSet3,
            } => 65 << 16 | 252,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterButton,
            } => 65 << 16 | 256,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleButtons,
            } => 65 << 16 | 512,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot1,
            } => 65 << 16 | 513,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot2,
            } => 65 << 16 | 514,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot3,
            } => 65 << 16 | 515,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot4,
            } => 65 << 16 | 516,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot5,
            } => 65 << 16 | 517,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot6,
            } => 65 << 16 | 518,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot7,
            } => 65 << 16 | 519,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot8,
            } => 65 << 16 | 520,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardSpace,
            } => 65 << 16 | 521,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardLeftSpace,
            } => 65 << 16 | 522,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardRightSpace,
            } => 65 << 16 | 523,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleFaceControls,
            } => 65 << 16 | 524,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleLeftControls,
            } => 65 << 16 | 525,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRightControls,
            } => 65 << 16 | 526,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleTopControls,
            } => 65 << 16 | 527,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickCenter,
            } => 65 << 16 | 528,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickUp,
            } => 65 << 16 | 529,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickDown,
            } => 65 << 16 | 530,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickLeft,
            } => 65 << 16 | 531,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickRight,
            } => 65 << 16 | 548,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadCenter,
            } => 65 << 16 | 549,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadUp,
            } => 65 << 16 | 550,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadDown,
            } => 65 << 16 | 535,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadLeft,
            } => 65 << 16 | 536,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadRight,
            } => 65 << 16 | 537,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BraillePanLeft,
            } => 65 << 16 | 538,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BraillePanRight,
            } => 65 << 16 | 539,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRockerUp,
            } => 65 << 16 | 540,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRockerDown,
            } => 65 << 16 | 541,
            Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRockerPress,
            } => 65 << 16 | 542,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::Undefined,
            } => 89 << 16 | 0,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArray,
            } => 89 << 16 | 1,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArrayAttributesReport,
            } => 89 << 16 | 2,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampCount,
            } => 89 << 16 | 3,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::BoundingBoxWidthInMicrometers,
            } => 89 << 16 | 4,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::BoundingBoxHeightInMicrometers,
            } => 89 << 16 | 5,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::BoundingBoxDepthInMicrometers,
            } => 89 << 16 | 6,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArrayKind,
            } => 89 << 16 | 7,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::MinUpdateIntervalInMicroseconds,
            } => 89 << 16 | 8,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampAttributesRequestReport,
            } => 89 << 16 | 32,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampId,
            } => 89 << 16 | 33,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampAttributesResponseReport,
            } => 89 << 16 | 34,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::PositionXInMicrometers,
            } => 89 << 16 | 35,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::PositionYInMicrometers,
            } => 89 << 16 | 36,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::PositionZInMicrometers,
            } => 89 << 16 | 37,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampPurposes,
            } => 89 << 16 | 38,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::UpdateLatencyInMicroseconds,
            } => 89 << 16 | 39,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::RedLevelCount,
            } => 89 << 16 | 40,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::GreenLevelCount,
            } => 89 << 16 | 41,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::BlueLevelCount,
            } => 89 << 16 | 42,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::IntensityLevelCount,
            } => 89 << 16 | 43,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::IsProgrammable,
            } => 89 << 16 | 44,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::InputBinding,
            } => 89 << 16 | 45,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampMultiUpdateReport,
            } => 89 << 16 | 80,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::RedUpdateChannel,
            } => 89 << 16 | 81,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::GreenUpdateChannel,
            } => 89 << 16 | 82,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::BlueUpdateChannel,
            } => 89 << 16 | 83,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::IntensityUpdateChannel,
            } => 89 << 16 | 84,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampUpdateFlags,
            } => 89 << 16 | 85,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampRangeUpdateReport,
            } => 89 << 16 | 96,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampIdStart,
            } => 89 << 16 | 97,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampIdEnd,
            } => 89 << 16 | 98,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArrayControlReport,
            } => 89 << 16 | 112,
            Usage::LightingandIllumination {
                usage: LightingandIllumination::AutonomousMode,
            } => 89 << 16 | 113,
            Usage::Monitor {
                usage: Monitor::Undefined,
            } => 128 << 16 | 0,
            Usage::Monitor {
                usage: Monitor::MonitorControl,
            } => 128 << 16 | 1,
            Usage::Monitor {
                usage: Monitor::EDIDInformation,
            } => 128 << 16 | 2,
            Usage::Monitor {
                usage: Monitor::VDIFInformation,
            } => 128 << 16 | 3,
            Usage::Monitor {
                usage: Monitor::VESAVersion,
            } => 128 << 16 | 4,
            Usage::Monitor {
                usage: Monitor::OnScreenDisplay,
            } => 128 << 16 | 5,
            Usage::Monitor {
                usage: Monitor::AutoSizeCenter,
            } => 128 << 16 | 6,
            Usage::Monitor {
                usage: Monitor::PolarityHorzSynch,
            } => 128 << 16 | 7,
            Usage::Monitor {
                usage: Monitor::PolarityVertSynch,
            } => 128 << 16 | 8,
            Usage::Monitor {
                usage: Monitor::SyncType,
            } => 128 << 16 | 9,
            Usage::Monitor {
                usage: Monitor::ScreenPosition,
            } => 128 << 16 | 10,
            Usage::Monitor {
                usage: Monitor::HorizontalFrequency,
            } => 128 << 16 | 11,
            Usage::Monitor {
                usage: Monitor::VerticalFrequency,
            } => 128 << 16 | 12,
            Usage::MonitorEnumeratedValues {
                usage: MonitorEnumeratedValues::unassigned,
            } => 129 << 16 | 0,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Brightness,
            } => 130 << 16 | 16,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Contrast,
            } => 130 << 16 | 18,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoGainRed,
            } => 130 << 16 | 22,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoGainGreen,
            } => 130 << 16 | 24,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoGainBlue,
            } => 130 << 16 | 26,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Focus,
            } => 130 << 16 | 28,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalPosition,
            } => 130 << 16 | 32,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalSize,
            } => 130 << 16 | 34,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalPincushion,
            } => 130 << 16 | 36,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalPincushionBalance,
            } => 130 << 16 | 38,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalMisconvergence,
            } => 130 << 16 | 40,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalLinearity,
            } => 130 << 16 | 42,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalLinearityBalance,
            } => 130 << 16 | 44,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalPosition,
            } => 130 << 16 | 48,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalSize,
            } => 130 << 16 | 50,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalPincushion,
            } => 130 << 16 | 52,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalPincushionBalance,
            } => 130 << 16 | 54,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalMisconvergence,
            } => 130 << 16 | 56,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalLinearity,
            } => 130 << 16 | 58,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalLinearityBalance,
            } => 130 << 16 | 60,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::ParallelogramDistortion,
            } => 130 << 16 | 64,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::TrapezoidalDistortion,
            } => 130 << 16 | 66,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Tilt,
            } => 130 << 16 | 68,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::TopCornerDistortionControl,
            } => 130 << 16 | 70,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::TopCornerDistortionBalance,
            } => 130 << 16 | 72,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::BottomCornerDistortionControl,
            } => 130 << 16 | 74,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::BottomCornerDistortionBalance,
            } => 130 << 16 | 76,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::MoiréHorizontal,
            } => 130 << 16 | 86,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::MoiréVertical,
            } => 130 << 16 | 88,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::InputLevelSelect,
            } => 130 << 16 | 94,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::InputSourceSelect,
            } => 130 << 16 | 96,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::StereoMode,
            } => 130 << 16 | 98,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoBlackLevelRed,
            } => 130 << 16 | 108,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoBlackLevelGreen,
            } => 130 << 16 | 110,
            Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoBlackLevelBlue,
            } => 130 << 16 | 112,
            Usage::VESACommand {
                usage: VESACommand::Undefined,
            } => 131 << 16 | 0,
            Usage::VESACommand {
                usage: VESACommand::Settings,
            } => 131 << 16 | 1,
            Usage::VESACommand {
                usage: VESACommand::Degauss,
            } => 131 << 16 | 2,
            Usage::PowerDevice {
                usage: PowerDevice::PeripheralDevice,
            } => 132 << 16 | 6,
            Usage::BarCodeScanner {
                usage: BarCodeScanner::Undefined,
            } => 140 << 16 | 0,
            Usage::Scale {
                usage: Scale::Undefined,
            } => 141 << 16 | 0,
            Usage::MagneticStripeReading {
                usage: MagneticStripeReading::Undefined,
            } => 142 << 16 | 0,
            Usage::CameraControl {
                usage: CameraControl::Undefined,
            } => 144 << 16 | 0,
            Usage::CameraControl {
                usage: CameraControl::CameraAutofocus,
            } => 144 << 16 | 32,
            Usage::CameraControl {
                usage: CameraControl::CameraShutter,
            } => 144 << 16 | 33,
            Usage::ArcadePageOAAF {
                usage: ArcadePageOAAF::Undefined,
            } => 145 << 16 | 0,
            Usage::FIDOAlliance {
                usage: FIDOAlliance::Undefined,
            } => 61904 << 16 | 0,
            Usage::FIDOAlliance {
                usage: FIDOAlliance::U2FAuthenticatorDevice,
            } => 61904 << 16 | 1,
            Usage::FIDOAlliance {
                usage: FIDOAlliance::InputReportData,
            } => 61904 << 16 | 32,
            Usage::FIDOAlliance {
                usage: FIDOAlliance::OutputReportData,
            } => 61904 << 16 | 33,
            Usage::Wacom {
                usage: Wacom::WacomDigitizer,
            } => 65293 << 16 | 1,
            Usage::Wacom {
                usage: Wacom::WacomPen,
            } => 65293 << 16 | 2,
            Usage::Wacom {
                usage: Wacom::LightPen,
            } => 65293 << 16 | 3,
            Usage::Wacom {
                usage: Wacom::TouchScreen,
            } => 65293 << 16 | 4,
            Usage::Wacom {
                usage: Wacom::TouchPad,
            } => 65293 << 16 | 5,
            Usage::Wacom {
                usage: Wacom::WhiteBoard,
            } => 65293 << 16 | 6,
            Usage::Wacom {
                usage: Wacom::CoordinateMeasuringMachine,
            } => 65293 << 16 | 7,
            Usage::Wacom {
                usage: Wacom::ThreeDDigitizer,
            } => 65293 << 16 | 8,
            Usage::Wacom {
                usage: Wacom::StereoPlotter,
            } => 65293 << 16 | 9,
            Usage::Wacom {
                usage: Wacom::ArticulatedArm,
            } => 65293 << 16 | 10,
            Usage::Wacom {
                usage: Wacom::Armature,
            } => 65293 << 16 | 11,
            Usage::Wacom {
                usage: Wacom::MultiplePointDigitizer,
            } => 65293 << 16 | 12,
            Usage::Wacom {
                usage: Wacom::FreeSpaceWand,
            } => 65293 << 16 | 13,
            Usage::Wacom {
                usage: Wacom::DeviceConfiguration,
            } => 65293 << 16 | 14,
            Usage::Wacom {
                usage: Wacom::Stylus,
            } => 65293 << 16 | 32,
            Usage::Wacom { usage: Wacom::Puck } => 65293 << 16 | 33,
            Usage::Wacom {
                usage: Wacom::Finger,
            } => 65293 << 16 | 34,
            Usage::Wacom {
                usage: Wacom::DeviceSettings,
            } => 65293 << 16 | 35,
            Usage::Wacom {
                usage: Wacom::TipPressure,
            } => 65293 << 16 | 48,
            Usage::Wacom {
                usage: Wacom::BarrelPressure,
            } => 65293 << 16 | 49,
            Usage::Wacom {
                usage: Wacom::InRange,
            } => 65293 << 16 | 50,
            Usage::Wacom {
                usage: Wacom::Touch,
            } => 65293 << 16 | 51,
            Usage::Wacom {
                usage: Wacom::Untouch,
            } => 65293 << 16 | 52,
            Usage::Wacom { usage: Wacom::Tap } => 65293 << 16 | 53,
            Usage::Wacom {
                usage: Wacom::WacomSense,
            } => 65293 << 16 | 54,
            Usage::Wacom {
                usage: Wacom::DataValid,
            } => 65293 << 16 | 55,
            Usage::Wacom {
                usage: Wacom::TransducerIndex,
            } => 65293 << 16 | 56,
            Usage::Wacom {
                usage: Wacom::WacomDigitizerFnKeys,
            } => 65293 << 16 | 57,
            Usage::Wacom {
                usage: Wacom::ProgramChangeKeys,
            } => 65293 << 16 | 58,
            Usage::Wacom {
                usage: Wacom::BatteryStrength,
            } => 65293 << 16 | 59,
            Usage::Wacom {
                usage: Wacom::Invert,
            } => 65293 << 16 | 60,
            Usage::Wacom {
                usage: Wacom::XTilt,
            } => 65293 << 16 | 61,
            Usage::Wacom {
                usage: Wacom::YTilt,
            } => 65293 << 16 | 62,
            Usage::Wacom {
                usage: Wacom::Azimuth,
            } => 65293 << 16 | 63,
            Usage::Wacom {
                usage: Wacom::Altitude,
            } => 65293 << 16 | 64,
            Usage::Wacom {
                usage: Wacom::Twist,
            } => 65293 << 16 | 65,
            Usage::Wacom {
                usage: Wacom::TipSwitch,
            } => 65293 << 16 | 66,
            Usage::Wacom {
                usage: Wacom::SecondaryTipSwitch,
            } => 65293 << 16 | 67,
            Usage::Wacom {
                usage: Wacom::BarrelSwitch,
            } => 65293 << 16 | 68,
            Usage::Wacom {
                usage: Wacom::Eraser,
            } => 65293 << 16 | 69,
            Usage::Wacom {
                usage: Wacom::TabletPick,
            } => 65293 << 16 | 70,
            Usage::Wacom {
                usage: Wacom::Confidence,
            } => 65293 << 16 | 71,
            Usage::Wacom {
                usage: Wacom::Width,
            } => 65293 << 16 | 72,
            Usage::Wacom {
                usage: Wacom::Height,
            } => 65293 << 16 | 73,
            Usage::Wacom {
                usage: Wacom::ContactId,
            } => 65293 << 16 | 81,
            Usage::Wacom {
                usage: Wacom::Inputmode,
            } => 65293 << 16 | 82,
            Usage::Wacom {
                usage: Wacom::DeviceIndex,
            } => 65293 << 16 | 83,
            Usage::Wacom {
                usage: Wacom::ContactCount,
            } => 65293 << 16 | 84,
            Usage::Wacom {
                usage: Wacom::ContactMax,
            } => 65293 << 16 | 85,
            Usage::Wacom {
                usage: Wacom::ScanTime,
            } => 65293 << 16 | 86,
            Usage::Wacom {
                usage: Wacom::SurfaceSwitch,
            } => 65293 << 16 | 87,
            Usage::Wacom {
                usage: Wacom::ButtonSwitch,
            } => 65293 << 16 | 88,
            Usage::Wacom {
                usage: Wacom::ButtonType,
            } => 65293 << 16 | 89,
            Usage::Wacom {
                usage: Wacom::SecondaryBarrelSwitch,
            } => 65293 << 16 | 90,
            Usage::Wacom {
                usage: Wacom::TransducerSerialNumber,
            } => 65293 << 16 | 91,
            Usage::Wacom {
                usage: Wacom::WacomSerialHi,
            } => 65293 << 16 | 92,
            Usage::Wacom {
                usage: Wacom::PreferredColorisLocked,
            } => 65293 << 16 | 93,
            Usage::Wacom {
                usage: Wacom::PreferredLineWidth,
            } => 65293 << 16 | 94,
            Usage::Wacom {
                usage: Wacom::PreferredLineWidthisLocked,
            } => 65293 << 16 | 95,
            Usage::Wacom {
                usage: Wacom::PreferredLineStyle,
            } => 65293 << 16 | 112,
            Usage::Wacom {
                usage: Wacom::PreferredLineStyleisLocked,
            } => 65293 << 16 | 113,
            Usage::Wacom { usage: Wacom::Ink } => 65293 << 16 | 114,
            Usage::Wacom {
                usage: Wacom::Pencil,
            } => 65293 << 16 | 115,
            Usage::Wacom {
                usage: Wacom::Highlighter,
            } => 65293 << 16 | 116,
            Usage::Wacom {
                usage: Wacom::ChiselMarker,
            } => 65293 << 16 | 117,
            Usage::Wacom {
                usage: Wacom::Brush,
            } => 65293 << 16 | 118,
            Usage::Wacom {
                usage: Wacom::WacomToolType,
            } => 65293 << 16 | 119,
            Usage::Wacom {
                usage: Wacom::DigitizerDiagnostic,
            } => 65293 << 16 | 128,
            Usage::Wacom {
                usage: Wacom::DigitizerError,
            } => 65293 << 16 | 129,
            Usage::Wacom {
                usage: Wacom::ErrNormalStatus,
            } => 65293 << 16 | 130,
            Usage::Wacom {
                usage: Wacom::ErrTransducersExceeded,
            } => 65293 << 16 | 131,
            Usage::Wacom {
                usage: Wacom::ErrFullTransFeaturesUnavail,
            } => 65293 << 16 | 132,
            Usage::Wacom {
                usage: Wacom::ErrChargeLow,
            } => 65293 << 16 | 133,
            Usage::Wacom { usage: Wacom::X } => 65293 << 16 | 304,
            Usage::Wacom { usage: Wacom::Y } => 65293 << 16 | 305,
            Usage::Wacom {
                usage: Wacom::WacomDistance,
            } => 65293 << 16 | 306,
            Usage::Wacom {
                usage: Wacom::WacomTouchStrip,
            } => 65293 << 16 | 310,
            Usage::Wacom {
                usage: Wacom::WacomTouchStrip2,
            } => 65293 << 16 | 311,
            Usage::Wacom {
                usage: Wacom::WacomTouchRing,
            } => 65293 << 16 | 312,
            Usage::Wacom {
                usage: Wacom::WacomTouchRingStatus,
            } => 65293 << 16 | 313,
            Usage::Wacom {
                usage: Wacom::WacomAccelerometerX,
            } => 65293 << 16 | 1025,
            Usage::Wacom {
                usage: Wacom::WacomAccelerometerY,
            } => 65293 << 16 | 1026,
            Usage::Wacom {
                usage: Wacom::WacomAccelerometerZ,
            } => 65293 << 16 | 1027,
            Usage::Wacom {
                usage: Wacom::WacomBatteryCharging,
            } => 65293 << 16 | 1028,
            Usage::Wacom {
                usage: Wacom::WacomTouchOnOff,
            } => 65293 << 16 | 1108,
            Usage::Wacom {
                usage: Wacom::WacomBatteryLevel,
            } => 65293 << 16 | 1083,
            Usage::Wacom {
                usage: Wacom::WacomExpressKey00,
            } => 65293 << 16 | 2320,
            Usage::Wacom {
                usage: Wacom::WacomExpressKeyCap00,
            } => 65293 << 16 | 2384,
            Usage::Wacom {
                usage: Wacom::WacomModeChange,
            } => 65293 << 16 | 2432,
            Usage::Wacom {
                usage: Wacom::WacomButtonDesktopCenter,
            } => 65293 << 16 | 2433,
            Usage::Wacom {
                usage: Wacom::WacomButtonOnScreenKeyboard,
            } => 65293 << 16 | 2434,
            Usage::Wacom {
                usage: Wacom::WacomButtonDisplaySetting,
            } => 65293 << 16 | 2435,
            Usage::Wacom {
                usage: Wacom::WacomButtonTouchOnOff,
            } => 65293 << 16 | 2438,
            Usage::Wacom {
                usage: Wacom::WacomButtonHome,
            } => 65293 << 16 | 2448,
            Usage::Wacom {
                usage: Wacom::WacomButtonUp,
            } => 65293 << 16 | 2449,
            Usage::Wacom {
                usage: Wacom::WacomButtonDown,
            } => 65293 << 16 | 2450,
            Usage::Wacom {
                usage: Wacom::WacomButtonLeft,
            } => 65293 << 16 | 2451,
            Usage::Wacom {
                usage: Wacom::WacomButtonRight,
            } => 65293 << 16 | 2452,
            Usage::Wacom {
                usage: Wacom::WacomButtonCenter,
            } => 65293 << 16 | 2453,
            Usage::Wacom {
                usage: Wacom::WacomFingerWheel,
            } => 65293 << 16 | 3331,
            Usage::Wacom {
                usage: Wacom::WacomOffsetLeft,
            } => 65293 << 16 | 3376,
            Usage::Wacom {
                usage: Wacom::WacomOffsetTop,
            } => 65293 << 16 | 3377,
            Usage::Wacom {
                usage: Wacom::WacomOffsetRight,
            } => 65293 << 16 | 3378,
            Usage::Wacom {
                usage: Wacom::WacomOffsetBottom,
            } => 65293 << 16 | 3379,
            Usage::Wacom {
                usage: Wacom::WacomDataMode,
            } => 65293 << 16 | 4098,
            Usage::Wacom {
                usage: Wacom::WacomDigitizerInfo,
            } => 65293 << 16 | 4115,
            Usage::VendorDefinedPage1 {
                usage: VendorDefinedPage1::Undefined,
            } => 0xff000000,
            Usage::VendorDefinedPage1 {
                usage: VendorDefinedPage1::VendorUsage { usage_id },
            } => 0xff00000u32 | *usage_id as u32,
            _ => panic!("Unhandled usage {usage:?}"),
        }
    }
}

impl TryFrom<u32> for Usage {
    type Error = HutError;

    fn try_from(up: u32) -> Result<Usage> {
        match (up >> 16, up & 0xFFFF) {
            (0, 0) => Ok(Usage::Undefined {
                usage: Undefined::Undefined,
            }),
            (1, 0) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Undefined,
            }),
            (1, 1) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Pointer,
            }),
            (1, 2) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Mouse,
            }),
            (1, 4) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Joystick,
            }),
            (1, 5) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::GamePad,
            }),
            (1, 6) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Keyboard,
            }),
            (1, 7) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Keypad,
            }),
            (1, 8) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::MultiAxis,
            }),
            (1, 10) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::WaterCoolingDevice,
            }),
            (1, 11) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ComputerChassisDevice,
            }),
            (1, 12) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioControls,
            }),
            (1, 13) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::PortableDeviceControl,
            }),
            (1, 14) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMultiAxisController,
            }),
            (1, 15) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SpatialController,
            }),
            (1, 16) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::AssistiveControl,
            }),
            (1, 48) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::X,
            }),
            (1, 49) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Y,
            }),
            (1, 50) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Z,
            }),
            (1, 51) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Rx,
            }),
            (1, 52) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Ry,
            }),
            (1, 53) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Rz,
            }),
            (1, 54) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Slider,
            }),
            (1, 55) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Dial,
            }),
            (1, 56) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Wheel,
            }),
            (1, 57) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Hatswitch,
            }),
            (1, 58) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::CountedBuffer,
            }),
            (1, 59) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ByteCount,
            }),
            (1, 60) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Motion,
            }),
            (1, 61) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Start,
            }),
            (1, 62) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Select,
            }),
            (1, 64) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vx,
            }),
            (1, 65) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vy,
            }),
            (1, 66) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vz,
            }),
            (1, 67) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vbrx,
            }),
            (1, 68) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vbry,
            }),
            (1, 69) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vbrz,
            }),
            (1, 70) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Vno,
            }),
            (1, 71) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Feature,
            }),
            (1, 72) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ResolutionMultiplier,
            }),
            (1, 73) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Qx,
            }),
            (1, 74) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Qy,
            }),
            (1, 75) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Qz,
            }),
            (1, 76) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Qw,
            }),
            (1, 128) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemControl,
            }),
            (1, 129) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemPowerDown,
            }),
            (1, 130) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemSleep,
            }),
            (1, 131) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemWakeUp,
            }),
            (1, 132) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemContextMenu,
            }),
            (1, 133) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMainMenu,
            }),
            (1, 134) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemAppMenu,
            }),
            (1, 135) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemHelpMenu,
            }),
            (1, 136) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuExit,
            }),
            (1, 137) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuSelect,
            }),
            (1, 138) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuRight,
            }),
            (1, 139) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuLeft,
            }),
            (1, 140) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuUp,
            }),
            (1, 141) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemMenuDown,
            }),
            (1, 142) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemColdRestart,
            }),
            (1, 143) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemWarmRestart,
            }),
            (1, 144) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::DPadUp,
            }),
            (1, 145) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::DPadDown,
            }),
            (1, 146) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::DPadRight,
            }),
            (1, 147) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::DPadLeft,
            }),
            (1, 148) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::IndexTrigger,
            }),
            (1, 149) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::PalmTrigger,
            }),
            (1, 150) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::Thumbstick,
            }),
            (1, 151) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemFunctionShift,
            }),
            (1, 152) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemFunctionShiftLock,
            }),
            (1, 153) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemFunctionShiftLockIndicator,
            }),
            (1, 154) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDismissNotification,
            }),
            (1, 160) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDock,
            }),
            (1, 161) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemUnDock,
            }),
            (1, 162) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemSetup,
            }),
            (1, 163) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemBreak,
            }),
            (1, 164) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDebuggerBreak,
            }),
            (1, 165) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ApplicationBreak,
            }),
            (1, 166) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ApplicationDebuggerBreak,
            }),
            (1, 167) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemSpeakerMute,
            }),
            (1, 168) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemHibernate,
            }),
            (1, 176) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayInvert,
            }),
            (1, 177) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayInternal,
            }),
            (1, 178) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayExternal,
            }),
            (1, 179) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayBoth,
            }),
            (1, 180) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayDual,
            }),
            (1, 181) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayToggleInternalExternal,
            }),
            (1, 182) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplaySwapPrimarySecondary,
            }),
            (1, 183) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayLCDAutoScale,
            }),
            (1, 192) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SensorZone,
            }),
            (1, 193) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::RPM,
            }),
            (1, 194) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::CoolantLevel,
            }),
            (1, 195) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::CoolantCriticalLevel,
            }),
            (1, 196) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::CoolantPump,
            }),
            (1, 197) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ChassisEnclosure,
            }),
            (1, 198) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioButton,
            }),
            (1, 199) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioLED,
            }),
            (1, 200) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::WirelessRadioSliderSwitch,
            }),
            (1, 201) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayRotationLockButton,
            }),
            (1, 202) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::SystemDisplayRotationLockSliderSwitch,
            }),
            (1, 203) => Ok(Usage::GenericDesktop {
                usage: GenericDesktop::ControlEnable,
            }),
            (2, 0) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Undefined,
            }),
            (2, 1) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FlightSimulationDevice,
            }),
            (2, 2) => Ok(Usage::SimulationControls {
                usage: SimulationControls::AutomobileSimulationDevice,
            }),
            (2, 3) => Ok(Usage::SimulationControls {
                usage: SimulationControls::TankSimulationDevice,
            }),
            (2, 4) => Ok(Usage::SimulationControls {
                usage: SimulationControls::SpaceshipSimulationDevice,
            }),
            (2, 5) => Ok(Usage::SimulationControls {
                usage: SimulationControls::SubmarineSimulationDevice,
            }),
            (2, 6) => Ok(Usage::SimulationControls {
                usage: SimulationControls::SailingSimulationDevice,
            }),
            (2, 7) => Ok(Usage::SimulationControls {
                usage: SimulationControls::MotorcycleSimulationDevice,
            }),
            (2, 8) => Ok(Usage::SimulationControls {
                usage: SimulationControls::SportsSimulationDevice,
            }),
            (2, 9) => Ok(Usage::SimulationControls {
                usage: SimulationControls::AirplaneSimulationDevice,
            }),
            (2, 10) => Ok(Usage::SimulationControls {
                usage: SimulationControls::HelicopterSimulationDevice,
            }),
            (2, 11) => Ok(Usage::SimulationControls {
                usage: SimulationControls::MagicCarpetSimulationDevice,
            }),
            (2, 12) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Bicycle,
            }),
            (2, 32) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FlightControlStick,
            }),
            (2, 33) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FlightStick,
            }),
            (2, 34) => Ok(Usage::SimulationControls {
                usage: SimulationControls::CyclicControl,
            }),
            (2, 35) => Ok(Usage::SimulationControls {
                usage: SimulationControls::CyclicTrim,
            }),
            (2, 36) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FlightYoke,
            }),
            (2, 37) => Ok(Usage::SimulationControls {
                usage: SimulationControls::TrackControl,
            }),
            (2, 38) => Ok(Usage::SimulationControls {
                usage: SimulationControls::DrivingControl,
            }),
            (2, 176) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Aileron,
            }),
            (2, 177) => Ok(Usage::SimulationControls {
                usage: SimulationControls::AileronTrim,
            }),
            (2, 178) => Ok(Usage::SimulationControls {
                usage: SimulationControls::AntiTorqueControl,
            }),
            (2, 179) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Autopilotenable,
            }),
            (2, 180) => Ok(Usage::SimulationControls {
                usage: SimulationControls::ChaffRelease,
            }),
            (2, 181) => Ok(Usage::SimulationControls {
                usage: SimulationControls::CollectiveControl,
            }),
            (2, 182) => Ok(Usage::SimulationControls {
                usage: SimulationControls::DiveBrake,
            }),
            (2, 183) => Ok(Usage::SimulationControls {
                usage: SimulationControls::ElectronicCounterMeasures,
            }),
            (2, 184) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Elevator,
            }),
            (2, 185) => Ok(Usage::SimulationControls {
                usage: SimulationControls::ElevatorTrim,
            }),
            (2, 186) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Rudder,
            }),
            (2, 187) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Throttle,
            }),
            (2, 188) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FlightCommunication,
            }),
            (2, 189) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FlareRelease,
            }),
            (2, 190) => Ok(Usage::SimulationControls {
                usage: SimulationControls::LandingGear,
            }),
            (2, 191) => Ok(Usage::SimulationControls {
                usage: SimulationControls::ToeBrake,
            }),
            (2, 192) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Trigger,
            }),
            (2, 193) => Ok(Usage::SimulationControls {
                usage: SimulationControls::WeaponsArm,
            }),
            (2, 194) => Ok(Usage::SimulationControls {
                usage: SimulationControls::WeaponsSelect,
            }),
            (2, 195) => Ok(Usage::SimulationControls {
                usage: SimulationControls::WingFlaps,
            }),
            (2, 196) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Accelerator,
            }),
            (2, 197) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Brake,
            }),
            (2, 198) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Clutch,
            }),
            (2, 199) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Shifter,
            }),
            (2, 200) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Steering,
            }),
            (2, 201) => Ok(Usage::SimulationControls {
                usage: SimulationControls::TurretDirection,
            }),
            (2, 202) => Ok(Usage::SimulationControls {
                usage: SimulationControls::BarrelElevation,
            }),
            (2, 203) => Ok(Usage::SimulationControls {
                usage: SimulationControls::DivePlane,
            }),
            (2, 204) => Ok(Usage::SimulationControls {
                usage: SimulationControls::Ballast,
            }),
            (2, 205) => Ok(Usage::SimulationControls {
                usage: SimulationControls::BicycleCrank,
            }),
            (2, 206) => Ok(Usage::SimulationControls {
                usage: SimulationControls::HandleBars,
            }),
            (2, 207) => Ok(Usage::SimulationControls {
                usage: SimulationControls::FrontBrake,
            }),
            (2, 208) => Ok(Usage::SimulationControls {
                usage: SimulationControls::RearBrake,
            }),
            (3, 0) => Ok(Usage::VRControls {
                usage: VRControls::Unidentified,
            }),
            (3, 1) => Ok(Usage::VRControls {
                usage: VRControls::Belt,
            }),
            (3, 2) => Ok(Usage::VRControls {
                usage: VRControls::BodySuit,
            }),
            (3, 3) => Ok(Usage::VRControls {
                usage: VRControls::Flexor,
            }),
            (3, 4) => Ok(Usage::VRControls {
                usage: VRControls::Glove,
            }),
            (3, 5) => Ok(Usage::VRControls {
                usage: VRControls::HeadTracker,
            }),
            (3, 6) => Ok(Usage::VRControls {
                usage: VRControls::HeadMountedDisplay,
            }),
            (3, 7) => Ok(Usage::VRControls {
                usage: VRControls::HandTracker,
            }),
            (3, 8) => Ok(Usage::VRControls {
                usage: VRControls::Oculometer,
            }),
            (3, 9) => Ok(Usage::VRControls {
                usage: VRControls::Vest,
            }),
            (3, 10) => Ok(Usage::VRControls {
                usage: VRControls::AnimatronicDevice,
            }),
            (3, 32) => Ok(Usage::VRControls {
                usage: VRControls::StereoEnable,
            }),
            (3, 33) => Ok(Usage::VRControls {
                usage: VRControls::DisplayEnable,
            }),
            (4, 0) => Ok(Usage::SportsControls {
                usage: SportsControls::Unidentified,
            }),
            (4, 1) => Ok(Usage::SportsControls {
                usage: SportsControls::BaseballBat,
            }),
            (4, 2) => Ok(Usage::SportsControls {
                usage: SportsControls::GolfClub,
            }),
            (4, 3) => Ok(Usage::SportsControls {
                usage: SportsControls::RowingMachine,
            }),
            (4, 4) => Ok(Usage::SportsControls {
                usage: SportsControls::Treadmill,
            }),
            (4, 48) => Ok(Usage::SportsControls {
                usage: SportsControls::Oar,
            }),
            (4, 49) => Ok(Usage::SportsControls {
                usage: SportsControls::Slope,
            }),
            (4, 50) => Ok(Usage::SportsControls {
                usage: SportsControls::Rate,
            }),
            (4, 51) => Ok(Usage::SportsControls {
                usage: SportsControls::StickSpeed,
            }),
            (4, 52) => Ok(Usage::SportsControls {
                usage: SportsControls::StickFaceAngle,
            }),
            (4, 53) => Ok(Usage::SportsControls {
                usage: SportsControls::StickHeelToe,
            }),
            (4, 54) => Ok(Usage::SportsControls {
                usage: SportsControls::StickFollowThrough,
            }),
            (4, 55) => Ok(Usage::SportsControls {
                usage: SportsControls::StickTempo,
            }),
            (4, 56) => Ok(Usage::SportsControls {
                usage: SportsControls::StickType,
            }),
            (4, 57) => Ok(Usage::SportsControls {
                usage: SportsControls::StickHeight,
            }),
            (4, 80) => Ok(Usage::SportsControls {
                usage: SportsControls::Putter,
            }),
            (4, 81) => Ok(Usage::SportsControls {
                usage: SportsControls::OneIron,
            }),
            (4, 82) => Ok(Usage::SportsControls {
                usage: SportsControls::TwoIron,
            }),
            (4, 83) => Ok(Usage::SportsControls {
                usage: SportsControls::ThreeIron,
            }),
            (4, 84) => Ok(Usage::SportsControls {
                usage: SportsControls::FourIron,
            }),
            (4, 85) => Ok(Usage::SportsControls {
                usage: SportsControls::FiveIron,
            }),
            (4, 86) => Ok(Usage::SportsControls {
                usage: SportsControls::SixIron,
            }),
            (4, 87) => Ok(Usage::SportsControls {
                usage: SportsControls::SevenIron,
            }),
            (4, 88) => Ok(Usage::SportsControls {
                usage: SportsControls::EightIron,
            }),
            (4, 89) => Ok(Usage::SportsControls {
                usage: SportsControls::NineIron,
            }),
            (4, 90) => Ok(Usage::SportsControls {
                usage: SportsControls::One0Iron,
            }),
            (4, 91) => Ok(Usage::SportsControls {
                usage: SportsControls::One1Iron,
            }),
            (4, 92) => Ok(Usage::SportsControls {
                usage: SportsControls::SandWedge,
            }),
            (4, 93) => Ok(Usage::SportsControls {
                usage: SportsControls::LoftWedge,
            }),
            (4, 94) => Ok(Usage::SportsControls {
                usage: SportsControls::PowerWedge,
            }),
            (4, 95) => Ok(Usage::SportsControls {
                usage: SportsControls::OneWood,
            }),
            (4, 96) => Ok(Usage::SportsControls {
                usage: SportsControls::ThreeWood,
            }),
            (4, 97) => Ok(Usage::SportsControls {
                usage: SportsControls::FiveWood,
            }),
            (4, 98) => Ok(Usage::SportsControls {
                usage: SportsControls::SevenWood,
            }),
            (4, 99) => Ok(Usage::SportsControls {
                usage: SportsControls::NineWood,
            }),
            (5, 0) => Ok(Usage::GamingControls {
                usage: GamingControls::Undefined,
            }),
            (5, 1) => Ok(Usage::GamingControls {
                usage: GamingControls::ThreeDGameController,
            }),
            (5, 2) => Ok(Usage::GamingControls {
                usage: GamingControls::PinballDevice,
            }),
            (5, 3) => Ok(Usage::GamingControls {
                usage: GamingControls::GunDevice,
            }),
            (5, 32) => Ok(Usage::GamingControls {
                usage: GamingControls::PointofView,
            }),
            (5, 33) => Ok(Usage::GamingControls {
                usage: GamingControls::TurnRightLeft,
            }),
            (5, 34) => Ok(Usage::GamingControls {
                usage: GamingControls::PitchForwardBackward,
            }),
            (5, 35) => Ok(Usage::GamingControls {
                usage: GamingControls::RollRightLeft,
            }),
            (5, 36) => Ok(Usage::GamingControls {
                usage: GamingControls::MoveRightLeft,
            }),
            (5, 37) => Ok(Usage::GamingControls {
                usage: GamingControls::MoveForwardBackward,
            }),
            (5, 38) => Ok(Usage::GamingControls {
                usage: GamingControls::MoveUpDown,
            }),
            (5, 39) => Ok(Usage::GamingControls {
                usage: GamingControls::LeanRightLeft,
            }),
            (5, 40) => Ok(Usage::GamingControls {
                usage: GamingControls::LeanForwardBackward,
            }),
            (5, 41) => Ok(Usage::GamingControls {
                usage: GamingControls::HeightofPOV,
            }),
            (5, 42) => Ok(Usage::GamingControls {
                usage: GamingControls::Flipper,
            }),
            (5, 43) => Ok(Usage::GamingControls {
                usage: GamingControls::SecondaryFlipper,
            }),
            (5, 44) => Ok(Usage::GamingControls {
                usage: GamingControls::Bump,
            }),
            (5, 45) => Ok(Usage::GamingControls {
                usage: GamingControls::NewGame,
            }),
            (5, 46) => Ok(Usage::GamingControls {
                usage: GamingControls::ShootBall,
            }),
            (5, 47) => Ok(Usage::GamingControls {
                usage: GamingControls::Player,
            }),
            (5, 48) => Ok(Usage::GamingControls {
                usage: GamingControls::GunBolt,
            }),
            (5, 49) => Ok(Usage::GamingControls {
                usage: GamingControls::GunClip,
            }),
            (5, 50) => Ok(Usage::GamingControls {
                usage: GamingControls::GunSelector,
            }),
            (5, 51) => Ok(Usage::GamingControls {
                usage: GamingControls::GunSingleShot,
            }),
            (5, 52) => Ok(Usage::GamingControls {
                usage: GamingControls::GunBurst,
            }),
            (5, 53) => Ok(Usage::GamingControls {
                usage: GamingControls::GunAutomatic,
            }),
            (5, 54) => Ok(Usage::GamingControls {
                usage: GamingControls::GunSafety,
            }),
            (5, 55) => Ok(Usage::GamingControls {
                usage: GamingControls::GamepadFireJump,
            }),
            (5, 57) => Ok(Usage::GamingControls {
                usage: GamingControls::GamepadTrigger,
            }),
            (5, 58) => Ok(Usage::GamingControls {
                usage: GamingControls::Formfittinggamepad,
            }),
            (6, 0) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Unidentified,
            }),
            (6, 1) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::BackgroundControls,
            }),
            (6, 32) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::BatteryStrength,
            }),
            (6, 33) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::WirelessChannel,
            }),
            (6, 34) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::WirelessID,
            }),
            (6, 35) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::DiscoverWirelessControl,
            }),
            (6, 36) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SecurityCodeCharacterEntered,
            }),
            (6, 37) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SecurityCodeCharacterErased,
            }),
            (6, 38) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SecurityCodeCleared,
            }),
            (6, 39) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SequenceID,
            }),
            (6, 40) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SequenceIDReset,
            }),
            (6, 41) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::RFSignalStrength,
            }),
            (6, 42) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::SoftwareVersion,
            }),
            (6, 43) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::ProtocolVersion,
            }),
            (6, 44) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::HardwareVersion,
            }),
            (6, 45) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Major,
            }),
            (6, 46) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Minor,
            }),
            (6, 47) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Revision,
            }),
            (6, 48) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::Handedness,
            }),
            (6, 49) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::EitherHand,
            }),
            (6, 50) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::LeftHand,
            }),
            (6, 51) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::RightHand,
            }),
            (6, 52) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::BothHands,
            }),
            (6, 64) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::GripPoseOffset,
            }),
            (6, 65) => Ok(Usage::GenericDeviceControls {
                usage: GenericDeviceControls::PointerPoseOffset,
            }),
            (7, 1) => Ok(Usage::Keyboard {
                usage: Keyboard::ErrorRollOver,
            }),
            (7, 2) => Ok(Usage::Keyboard {
                usage: Keyboard::POSTFail,
            }),
            (7, 3) => Ok(Usage::Keyboard {
                usage: Keyboard::ErrorUndefine,
            }),
            (7, 4) => Ok(Usage::Keyboard {
                usage: Keyboard::aAndA,
            }),
            (7, 5) => Ok(Usage::Keyboard {
                usage: Keyboard::bAndB,
            }),
            (7, 6) => Ok(Usage::Keyboard {
                usage: Keyboard::cAndC,
            }),
            (7, 7) => Ok(Usage::Keyboard {
                usage: Keyboard::dAndD,
            }),
            (7, 8) => Ok(Usage::Keyboard {
                usage: Keyboard::eAndE,
            }),
            (7, 9) => Ok(Usage::Keyboard {
                usage: Keyboard::fAndF,
            }),
            (7, 10) => Ok(Usage::Keyboard {
                usage: Keyboard::gAndG,
            }),
            (7, 11) => Ok(Usage::Keyboard {
                usage: Keyboard::hAndH,
            }),
            (7, 12) => Ok(Usage::Keyboard {
                usage: Keyboard::iAndI,
            }),
            (7, 13) => Ok(Usage::Keyboard {
                usage: Keyboard::jAndJ,
            }),
            (7, 14) => Ok(Usage::Keyboard {
                usage: Keyboard::kAndK,
            }),
            (7, 15) => Ok(Usage::Keyboard {
                usage: Keyboard::lAndL,
            }),
            (7, 16) => Ok(Usage::Keyboard {
                usage: Keyboard::mAndM,
            }),
            (7, 17) => Ok(Usage::Keyboard {
                usage: Keyboard::nAndN,
            }),
            (7, 18) => Ok(Usage::Keyboard {
                usage: Keyboard::oAndO,
            }),
            (7, 19) => Ok(Usage::Keyboard {
                usage: Keyboard::pAndP,
            }),
            (7, 20) => Ok(Usage::Keyboard {
                usage: Keyboard::qAndQ,
            }),
            (7, 21) => Ok(Usage::Keyboard {
                usage: Keyboard::rAndR,
            }),
            (7, 22) => Ok(Usage::Keyboard {
                usage: Keyboard::sAndS,
            }),
            (7, 23) => Ok(Usage::Keyboard {
                usage: Keyboard::tAndT,
            }),
            (7, 24) => Ok(Usage::Keyboard {
                usage: Keyboard::uAndU,
            }),
            (7, 25) => Ok(Usage::Keyboard {
                usage: Keyboard::vAndV,
            }),
            (7, 26) => Ok(Usage::Keyboard {
                usage: Keyboard::wAndW,
            }),
            (7, 27) => Ok(Usage::Keyboard {
                usage: Keyboard::xAndX,
            }),
            (7, 28) => Ok(Usage::Keyboard {
                usage: Keyboard::yAndY,
            }),
            (7, 29) => Ok(Usage::Keyboard {
                usage: Keyboard::zAndZ,
            }),
            (7, 30) => Ok(Usage::Keyboard {
                usage: Keyboard::OneAndExclamationMark,
            }),
            (7, 31) => Ok(Usage::Keyboard {
                usage: Keyboard::TwoAndAt,
            }),
            (7, 32) => Ok(Usage::Keyboard {
                usage: Keyboard::ThreeAndHash,
            }),
            (7, 33) => Ok(Usage::Keyboard {
                usage: Keyboard::FourAndDollar,
            }),
            (7, 34) => Ok(Usage::Keyboard {
                usage: Keyboard::FiveAndPercent,
            }),
            (7, 35) => Ok(Usage::Keyboard {
                usage: Keyboard::SixAndCaret,
            }),
            (7, 36) => Ok(Usage::Keyboard {
                usage: Keyboard::SevenAndAmpersand,
            }),
            (7, 37) => Ok(Usage::Keyboard {
                usage: Keyboard::EightAndStar,
            }),
            (7, 38) => Ok(Usage::Keyboard {
                usage: Keyboard::NineAndOpenParenthesis,
            }),
            (7, 39) => Ok(Usage::Keyboard {
                usage: Keyboard::ZeroAndCloseParenthesis,
            }),
            (7, 40) => Ok(Usage::Keyboard {
                usage: Keyboard::ReturnOpenParenthesisENTERCloseParenthesis,
            }),
            (7, 41) => Ok(Usage::Keyboard {
                usage: Keyboard::ESCAPE,
            }),
            (7, 42) => Ok(Usage::Keyboard {
                usage: Keyboard::DELETEOpenParenthesisBackspaceCloseParenthesis,
            }),
            (7, 43) => Ok(Usage::Keyboard {
                usage: Keyboard::Tab,
            }),
            (7, 44) => Ok(Usage::Keyboard {
                usage: Keyboard::Spacebar,
            }),
            (7, 45) => Ok(Usage::Keyboard {
                usage: Keyboard::MinusAndOpenParenthesisunderscoreCloseParenthesis,
            }),
            (7, 46) => Ok(Usage::Keyboard {
                usage: Keyboard::EqualsAndPlus,
            }),
            (7, 47) => Ok(Usage::Keyboard {
                usage: Keyboard::OpenBracketAndOpenBrace,
            }),
            (7, 48) => Ok(Usage::Keyboard {
                usage: Keyboard::CloseBracketAndCloseBrace,
            }),
            (7, 49) => Ok(Usage::Keyboard {
                usage: Keyboard::BackslashAndPipe,
            }),
            (7, 50) => Ok(Usage::Keyboard {
                usage: Keyboard::NonMinusUSHashAndTilde,
            }),
            (7, 51) => Ok(Usage::Keyboard {
                usage: Keyboard::SemicolonAndColon,
            }),
            (7, 52) => Ok(Usage::Keyboard {
                usage: Keyboard::SingleQuoteAndDoubleQuote,
            }),
            (7, 53) => Ok(Usage::Keyboard {
                usage: Keyboard::GraveAccentAndTilde,
            }),
            (7, 54) => Ok(Usage::Keyboard {
                usage: Keyboard::KeyboardCommaAndLessThan,
            }),
            (7, 55) => Ok(Usage::Keyboard {
                usage: Keyboard::PeriodAndGreaterThan,
            }),
            (7, 56) => Ok(Usage::Keyboard {
                usage: Keyboard::SlashAndQuestionMark,
            }),
            (7, 57) => Ok(Usage::Keyboard {
                usage: Keyboard::CapsLock,
            }),
            (7, 58) => Ok(Usage::Keyboard {
                usage: Keyboard::F1,
            }),
            (7, 59) => Ok(Usage::Keyboard {
                usage: Keyboard::F2,
            }),
            (7, 60) => Ok(Usage::Keyboard {
                usage: Keyboard::F3,
            }),
            (7, 61) => Ok(Usage::Keyboard {
                usage: Keyboard::F4,
            }),
            (7, 62) => Ok(Usage::Keyboard {
                usage: Keyboard::F5,
            }),
            (7, 63) => Ok(Usage::Keyboard {
                usage: Keyboard::F6,
            }),
            (7, 64) => Ok(Usage::Keyboard {
                usage: Keyboard::F7,
            }),
            (7, 65) => Ok(Usage::Keyboard {
                usage: Keyboard::F8,
            }),
            (7, 66) => Ok(Usage::Keyboard {
                usage: Keyboard::F9,
            }),
            (7, 67) => Ok(Usage::Keyboard {
                usage: Keyboard::F10,
            }),
            (7, 68) => Ok(Usage::Keyboard {
                usage: Keyboard::F11,
            }),
            (7, 69) => Ok(Usage::Keyboard {
                usage: Keyboard::F12,
            }),
            (7, 70) => Ok(Usage::Keyboard {
                usage: Keyboard::PrintScreen,
            }),
            (7, 71) => Ok(Usage::Keyboard {
                usage: Keyboard::ScrollLock,
            }),
            (7, 72) => Ok(Usage::Keyboard {
                usage: Keyboard::Pause,
            }),
            (7, 73) => Ok(Usage::Keyboard {
                usage: Keyboard::Insert,
            }),
            (7, 74) => Ok(Usage::Keyboard {
                usage: Keyboard::Home,
            }),
            (7, 75) => Ok(Usage::Keyboard {
                usage: Keyboard::PageUp,
            }),
            (7, 76) => Ok(Usage::Keyboard {
                usage: Keyboard::DeleteForward,
            }),
            (7, 77) => Ok(Usage::Keyboard {
                usage: Keyboard::End,
            }),
            (7, 78) => Ok(Usage::Keyboard {
                usage: Keyboard::PageDown,
            }),
            (7, 79) => Ok(Usage::Keyboard {
                usage: Keyboard::RightArrow,
            }),
            (7, 80) => Ok(Usage::Keyboard {
                usage: Keyboard::LeftArrow,
            }),
            (7, 81) => Ok(Usage::Keyboard {
                usage: Keyboard::DownArrow,
            }),
            (7, 82) => Ok(Usage::Keyboard {
                usage: Keyboard::UpArrow,
            }),
            (7, 83) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadNumLockAndClear,
            }),
            (7, 84) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadSlash,
            }),
            (7, 85) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadStar,
            }),
            (7, 86) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadMinus,
            }),
            (7, 87) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadPlus,
            }),
            (7, 88) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadENTER,
            }),
            (7, 89) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad1AndEnd,
            }),
            (7, 90) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad2AndDownArrow,
            }),
            (7, 91) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad3AndPageDn,
            }),
            (7, 92) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad4AndLeftArrow,
            }),
            (7, 93) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad5,
            }),
            (7, 94) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad6AndRightArrow,
            }),
            (7, 95) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad7AndHome,
            }),
            (7, 96) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad8AndUpArrow,
            }),
            (7, 97) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad9AndPageUp,
            }),
            (7, 98) => Ok(Usage::Keyboard {
                usage: Keyboard::Keypad0AndInsert,
            }),
            (7, 99) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadPeriodAndDelete,
            }),
            (7, 100) => Ok(Usage::Keyboard {
                usage: Keyboard::NonMinusUSBackslashAndPipe,
            }),
            (7, 101) => Ok(Usage::Keyboard {
                usage: Keyboard::Application,
            }),
            (7, 102) => Ok(Usage::Keyboard {
                usage: Keyboard::Power,
            }),
            (7, 103) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadEquals,
            }),
            (7, 104) => Ok(Usage::Keyboard {
                usage: Keyboard::F13,
            }),
            (7, 105) => Ok(Usage::Keyboard {
                usage: Keyboard::F14,
            }),
            (7, 106) => Ok(Usage::Keyboard {
                usage: Keyboard::F15,
            }),
            (7, 107) => Ok(Usage::Keyboard {
                usage: Keyboard::F16,
            }),
            (7, 108) => Ok(Usage::Keyboard {
                usage: Keyboard::F17,
            }),
            (7, 109) => Ok(Usage::Keyboard {
                usage: Keyboard::F18,
            }),
            (7, 110) => Ok(Usage::Keyboard {
                usage: Keyboard::F19,
            }),
            (7, 111) => Ok(Usage::Keyboard {
                usage: Keyboard::F20,
            }),
            (7, 112) => Ok(Usage::Keyboard {
                usage: Keyboard::F21,
            }),
            (7, 113) => Ok(Usage::Keyboard {
                usage: Keyboard::F22,
            }),
            (7, 114) => Ok(Usage::Keyboard {
                usage: Keyboard::F23,
            }),
            (7, 115) => Ok(Usage::Keyboard {
                usage: Keyboard::F24,
            }),
            (7, 116) => Ok(Usage::Keyboard {
                usage: Keyboard::Execute,
            }),
            (7, 117) => Ok(Usage::Keyboard {
                usage: Keyboard::Help,
            }),
            (7, 118) => Ok(Usage::Keyboard {
                usage: Keyboard::Menu,
            }),
            (7, 119) => Ok(Usage::Keyboard {
                usage: Keyboard::Select,
            }),
            (7, 120) => Ok(Usage::Keyboard {
                usage: Keyboard::Stop,
            }),
            (7, 121) => Ok(Usage::Keyboard {
                usage: Keyboard::Again,
            }),
            (7, 122) => Ok(Usage::Keyboard {
                usage: Keyboard::Undo,
            }),
            (7, 123) => Ok(Usage::Keyboard {
                usage: Keyboard::Cut,
            }),
            (7, 124) => Ok(Usage::Keyboard {
                usage: Keyboard::Copy,
            }),
            (7, 125) => Ok(Usage::Keyboard {
                usage: Keyboard::Paste,
            }),
            (7, 126) => Ok(Usage::Keyboard {
                usage: Keyboard::Find,
            }),
            (7, 127) => Ok(Usage::Keyboard {
                usage: Keyboard::Mute,
            }),
            (7, 128) => Ok(Usage::Keyboard {
                usage: Keyboard::VolumeUp,
            }),
            (7, 129) => Ok(Usage::Keyboard {
                usage: Keyboard::VolumeDown,
            }),
            (7, 130) => Ok(Usage::Keyboard {
                usage: Keyboard::LockingCapsLock,
            }),
            (7, 131) => Ok(Usage::Keyboard {
                usage: Keyboard::LockingNumLock,
            }),
            (7, 132) => Ok(Usage::Keyboard {
                usage: Keyboard::LockingScrollLock,
            }),
            (7, 133) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadComma,
            }),
            (7, 134) => Ok(Usage::Keyboard {
                usage: Keyboard::KeypadEqualSign,
            }),
            (7, 135) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji1,
            }),
            (7, 136) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji2,
            }),
            (7, 137) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji3,
            }),
            (7, 138) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji4,
            }),
            (7, 139) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji5,
            }),
            (7, 140) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji6,
            }),
            (7, 141) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji7,
            }),
            (7, 142) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji8,
            }),
            (7, 143) => Ok(Usage::Keyboard {
                usage: Keyboard::Kanji9,
            }),
            (7, 144) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG1,
            }),
            (7, 145) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG2,
            }),
            (7, 146) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG3,
            }),
            (7, 147) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG4,
            }),
            (7, 148) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG5,
            }),
            (7, 149) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG6,
            }),
            (7, 150) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG7,
            }),
            (7, 151) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG8,
            }),
            (7, 152) => Ok(Usage::Keyboard {
                usage: Keyboard::LANG9,
            }),
            (7, 153) => Ok(Usage::Keyboard {
                usage: Keyboard::AlternateErase,
            }),
            (7, 154) => Ok(Usage::Keyboard {
                usage: Keyboard::SysReqSlashAttention,
            }),
            (7, 155) => Ok(Usage::Keyboard {
                usage: Keyboard::Cancel,
            }),
            (7, 156) => Ok(Usage::Keyboard {
                usage: Keyboard::Clear,
            }),
            (7, 157) => Ok(Usage::Keyboard {
                usage: Keyboard::Prior,
            }),
            (7, 158) => Ok(Usage::Keyboard {
                usage: Keyboard::Return,
            }),
            (7, 159) => Ok(Usage::Keyboard {
                usage: Keyboard::Separator,
            }),
            (7, 160) => Ok(Usage::Keyboard {
                usage: Keyboard::Out,
            }),
            (7, 161) => Ok(Usage::Keyboard {
                usage: Keyboard::Oper,
            }),
            (7, 162) => Ok(Usage::Keyboard {
                usage: Keyboard::ClearSlashAgain,
            }),
            (7, 163) => Ok(Usage::Keyboard {
                usage: Keyboard::CrSelSlashProps,
            }),
            (7, 164) => Ok(Usage::Keyboard {
                usage: Keyboard::ExSel,
            }),
            (7, 224) => Ok(Usage::Keyboard {
                usage: Keyboard::LeftControl,
            }),
            (7, 225) => Ok(Usage::Keyboard {
                usage: Keyboard::LeftShift,
            }),
            (7, 226) => Ok(Usage::Keyboard {
                usage: Keyboard::LeftAlt,
            }),
            (7, 227) => Ok(Usage::Keyboard {
                usage: Keyboard::LeftGUI,
            }),
            (7, 228) => Ok(Usage::Keyboard {
                usage: Keyboard::RightControl,
            }),
            (7, 229) => Ok(Usage::Keyboard {
                usage: Keyboard::RightShift,
            }),
            (7, 230) => Ok(Usage::Keyboard {
                usage: Keyboard::RightAlt,
            }),
            (7, 231) => Ok(Usage::Keyboard {
                usage: Keyboard::RightGUI,
            }),
            (8, 0) => Ok(Usage::LEDs {
                usage: LEDs::Undefined,
            }),
            (8, 1) => Ok(Usage::LEDs {
                usage: LEDs::NumLock,
            }),
            (8, 2) => Ok(Usage::LEDs {
                usage: LEDs::CapsLock,
            }),
            (8, 3) => Ok(Usage::LEDs {
                usage: LEDs::ScrollLock,
            }),
            (8, 4) => Ok(Usage::LEDs {
                usage: LEDs::Compose,
            }),
            (8, 5) => Ok(Usage::LEDs { usage: LEDs::Kana }),
            (8, 6) => Ok(Usage::LEDs { usage: LEDs::Power }),
            (8, 7) => Ok(Usage::LEDs { usage: LEDs::Shift }),
            (8, 8) => Ok(Usage::LEDs {
                usage: LEDs::DoNotDisturb,
            }),
            (8, 9) => Ok(Usage::LEDs { usage: LEDs::Mute }),
            (8, 10) => Ok(Usage::LEDs {
                usage: LEDs::ToneEnable,
            }),
            (8, 11) => Ok(Usage::LEDs {
                usage: LEDs::HighCutFilter,
            }),
            (8, 12) => Ok(Usage::LEDs {
                usage: LEDs::LowCutFilter,
            }),
            (8, 13) => Ok(Usage::LEDs {
                usage: LEDs::EqualizerEnable,
            }),
            (8, 14) => Ok(Usage::LEDs {
                usage: LEDs::SoundFieldOn,
            }),
            (8, 15) => Ok(Usage::LEDs {
                usage: LEDs::SurroundfieldOn,
            }),
            (8, 16) => Ok(Usage::LEDs {
                usage: LEDs::Repeat,
            }),
            (8, 17) => Ok(Usage::LEDs {
                usage: LEDs::Stereo,
            }),
            (8, 18) => Ok(Usage::LEDs {
                usage: LEDs::SamplingRateDetect,
            }),
            (8, 19) => Ok(Usage::LEDs {
                usage: LEDs::Spinning,
            }),
            (8, 20) => Ok(Usage::LEDs { usage: LEDs::CAV }),
            (8, 21) => Ok(Usage::LEDs { usage: LEDs::CLV }),
            (8, 22) => Ok(Usage::LEDs {
                usage: LEDs::RecordingFormatDetect,
            }),
            (8, 23) => Ok(Usage::LEDs {
                usage: LEDs::OffHook,
            }),
            (8, 24) => Ok(Usage::LEDs { usage: LEDs::Ring }),
            (8, 25) => Ok(Usage::LEDs {
                usage: LEDs::MessageWaiting,
            }),
            (8, 26) => Ok(Usage::LEDs {
                usage: LEDs::DataMode,
            }),
            (8, 27) => Ok(Usage::LEDs {
                usage: LEDs::BatteryOperation,
            }),
            (8, 28) => Ok(Usage::LEDs {
                usage: LEDs::BatteryOK,
            }),
            (8, 29) => Ok(Usage::LEDs {
                usage: LEDs::BatteryLow,
            }),
            (8, 30) => Ok(Usage::LEDs {
                usage: LEDs::Speaker,
            }),
            (8, 31) => Ok(Usage::LEDs {
                usage: LEDs::HeadSet,
            }),
            (8, 32) => Ok(Usage::LEDs { usage: LEDs::Hold }),
            (8, 33) => Ok(Usage::LEDs {
                usage: LEDs::Microphone,
            }),
            (8, 34) => Ok(Usage::LEDs {
                usage: LEDs::Coverage,
            }),
            (8, 35) => Ok(Usage::LEDs {
                usage: LEDs::NightMode,
            }),
            (8, 36) => Ok(Usage::LEDs {
                usage: LEDs::SendCalls,
            }),
            (8, 37) => Ok(Usage::LEDs {
                usage: LEDs::CallPickup,
            }),
            (8, 38) => Ok(Usage::LEDs {
                usage: LEDs::Conference,
            }),
            (8, 39) => Ok(Usage::LEDs {
                usage: LEDs::Standby,
            }),
            (8, 40) => Ok(Usage::LEDs {
                usage: LEDs::CameraOn,
            }),
            (8, 41) => Ok(Usage::LEDs {
                usage: LEDs::CameraOff,
            }),
            (8, 42) => Ok(Usage::LEDs {
                usage: LEDs::OnLine,
            }),
            (8, 43) => Ok(Usage::LEDs {
                usage: LEDs::OffLine,
            }),
            (8, 44) => Ok(Usage::LEDs { usage: LEDs::Busy }),
            (8, 45) => Ok(Usage::LEDs { usage: LEDs::Ready }),
            (8, 46) => Ok(Usage::LEDs {
                usage: LEDs::PaperOut,
            }),
            (8, 47) => Ok(Usage::LEDs {
                usage: LEDs::PaperJam,
            }),
            (8, 48) => Ok(Usage::LEDs {
                usage: LEDs::Remote,
            }),
            (8, 49) => Ok(Usage::LEDs {
                usage: LEDs::Forward,
            }),
            (8, 50) => Ok(Usage::LEDs {
                usage: LEDs::Reverse,
            }),
            (8, 51) => Ok(Usage::LEDs { usage: LEDs::Stop }),
            (8, 52) => Ok(Usage::LEDs {
                usage: LEDs::Rewind,
            }),
            (8, 53) => Ok(Usage::LEDs {
                usage: LEDs::FastForward,
            }),
            (8, 54) => Ok(Usage::LEDs { usage: LEDs::Play }),
            (8, 55) => Ok(Usage::LEDs { usage: LEDs::Pause }),
            (8, 56) => Ok(Usage::LEDs {
                usage: LEDs::Record,
            }),
            (8, 57) => Ok(Usage::LEDs { usage: LEDs::Error }),
            (8, 58) => Ok(Usage::LEDs {
                usage: LEDs::UsageSelectedIndicator,
            }),
            (8, 59) => Ok(Usage::LEDs {
                usage: LEDs::UsageInUseIndicator,
            }),
            (8, 60) => Ok(Usage::LEDs {
                usage: LEDs::UsageMultiModeIndicator,
            }),
            (8, 61) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorOn,
            }),
            (8, 62) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorFlash,
            }),
            (8, 63) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorSlowBlink,
            }),
            (8, 64) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorFastBlink,
            }),
            (8, 65) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorOff,
            }),
            (8, 66) => Ok(Usage::LEDs {
                usage: LEDs::FlashOnTime,
            }),
            (8, 67) => Ok(Usage::LEDs {
                usage: LEDs::SlowBlinkOnTime,
            }),
            (8, 68) => Ok(Usage::LEDs {
                usage: LEDs::SlowBlinkOffTime,
            }),
            (8, 69) => Ok(Usage::LEDs {
                usage: LEDs::FastBlinkOnTime,
            }),
            (8, 70) => Ok(Usage::LEDs {
                usage: LEDs::FastBlinkOffTime,
            }),
            (8, 71) => Ok(Usage::LEDs {
                usage: LEDs::UsageIndicatorColor,
            }),
            (8, 72) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorRed,
            }),
            (8, 73) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorGreen,
            }),
            (8, 74) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorAmber,
            }),
            (8, 75) => Ok(Usage::LEDs {
                usage: LEDs::GenericIndicator,
            }),
            (8, 76) => Ok(Usage::LEDs {
                usage: LEDs::SystemSuspend,
            }),
            (8, 77) => Ok(Usage::LEDs {
                usage: LEDs::ExternalPowerConnected,
            }),
            (8, 78) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorBlue,
            }),
            (8, 79) => Ok(Usage::LEDs {
                usage: LEDs::IndicatorOrange,
            }),
            (8, 80) => Ok(Usage::LEDs {
                usage: LEDs::GoodStatus,
            }),
            (8, 81) => Ok(Usage::LEDs {
                usage: LEDs::WarningStatus,
            }),
            (8, 82) => Ok(Usage::LEDs {
                usage: LEDs::RGBLED,
            }),
            (8, 83) => Ok(Usage::LEDs {
                usage: LEDs::RedLEDChannel,
            }),
            (8, 84) => Ok(Usage::LEDs {
                usage: LEDs::GreedLEDChannel,
            }),
            (8, 85) => Ok(Usage::LEDs {
                usage: LEDs::BlueLEDChannel,
            }),
            (8, 86) => Ok(Usage::LEDs {
                usage: LEDs::LEDIntensity,
            }),
            (8, 96) => Ok(Usage::LEDs {
                usage: LEDs::PlayerIndicator,
            }),
            (8, 97) => Ok(Usage::LEDs {
                usage: LEDs::Player1,
            }),
            (8, 98) => Ok(Usage::LEDs {
                usage: LEDs::Player2,
            }),
            (8, 99) => Ok(Usage::LEDs {
                usage: LEDs::Player3,
            }),
            (8, 100) => Ok(Usage::LEDs {
                usage: LEDs::Player4,
            }),
            (8, 101) => Ok(Usage::LEDs {
                usage: LEDs::Player5,
            }),
            (8, 102) => Ok(Usage::LEDs {
                usage: LEDs::Player6,
            }),
            (8, 103) => Ok(Usage::LEDs {
                usage: LEDs::Player7,
            }),
            (8, 104) => Ok(Usage::LEDs {
                usage: LEDs::Player8,
            }),
            (9, 0) => Ok(Usage::Button {
                usage: Button::NoButtonsPressed,
            }),
            (10, 0) => Ok(Usage::Ordinals {
                usage: Ordinals::Unused,
            }),
            (11, 0) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Unassigned,
            }),
            (11, 1) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Phone,
            }),
            (11, 2) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AnsweringMachine,
            }),
            (11, 3) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::MessageControls,
            }),
            (11, 4) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Handset,
            }),
            (11, 5) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Headset,
            }),
            (11, 6) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::TelephonyKeyPad,
            }),
            (11, 7) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ProgrammableButton,
            }),
            (11, 32) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::HookSwitch,
            }),
            (11, 33) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Flash,
            }),
            (11, 34) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Feature,
            }),
            (11, 35) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Hold,
            }),
            (11, 36) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Redial,
            }),
            (11, 37) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Transfer,
            }),
            (11, 38) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Drop,
            }),
            (11, 39) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Park,
            }),
            (11, 40) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ForwardCalls,
            }),
            (11, 41) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AlternateFunction,
            }),
            (11, 42) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::LineOSC,
            }),
            (11, 43) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::SpeakerPhone,
            }),
            (11, 44) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Conference,
            }),
            (11, 45) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::RingEnable,
            }),
            (11, 46) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::RingSelect,
            }),
            (11, 47) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneMute,
            }),
            (11, 48) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::CallerID,
            }),
            (11, 49) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Send,
            }),
            (11, 80) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::SpeedDial,
            }),
            (11, 81) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::StoreNumber,
            }),
            (11, 82) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::RecallNumber,
            }),
            (11, 83) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDirectory,
            }),
            (11, 112) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::VoiceMail,
            }),
            (11, 113) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ScreenCalls,
            }),
            (11, 114) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::DoNotDisturb,
            }),
            (11, 115) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Message,
            }),
            (11, 116) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AnswerOnOff,
            }),
            (11, 144) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::InsideDialTone,
            }),
            (11, 145) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::OutsideDialTone,
            }),
            (11, 146) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::InsideRingTone,
            }),
            (11, 147) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::OutsideRingTone,
            }),
            (11, 148) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PriorityRingTone,
            }),
            (11, 149) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::InsideRingback,
            }),
            (11, 150) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PriorityRingback,
            }),
            (11, 151) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::LineBusyTone,
            }),
            (11, 152) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ReorderTone,
            }),
            (11, 153) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::CallWaitingTone,
            }),
            (11, 154) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ConfirmationTone1,
            }),
            (11, 155) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ConfirmationTone2,
            }),
            (11, 156) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::TonesOff,
            }),
            (11, 157) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::OutsideRingback,
            }),
            (11, 158) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::Ringer,
            }),
            (11, 176) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey0,
            }),
            (11, 177) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey1,
            }),
            (11, 178) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey2,
            }),
            (11, 179) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey3,
            }),
            (11, 180) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey4,
            }),
            (11, 181) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey5,
            }),
            (11, 182) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey6,
            }),
            (11, 183) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey7,
            }),
            (11, 184) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey8,
            }),
            (11, 185) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKey9,
            }),
            (11, 186) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyStar,
            }),
            (11, 187) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyPound,
            }),
            (11, 188) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyA,
            }),
            (11, 189) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyB,
            }),
            (11, 190) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyC,
            }),
            (11, 191) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneKeyD,
            }),
            (11, 192) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneCallHistoryKey,
            }),
            (11, 193) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneCallerIDKey,
            }),
            (11, 194) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneSettingsKey,
            }),
            (11, 240) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::HostControl,
            }),
            (11, 241) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::HostAvailable,
            }),
            (11, 242) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::HostCallActive,
            }),
            (11, 243) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ActivateHandsetAudio,
            }),
            (11, 244) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::RingType,
            }),
            (11, 245) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::RedialablePhoneNumber,
            }),
            (11, 248) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::StopRingTone,
            }),
            (11, 249) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PSTNRingTone,
            }),
            (11, 250) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::HostRingTone,
            }),
            (11, 251) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AlertSoundError,
            }),
            (11, 252) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AlertSoundConfirm,
            }),
            (11, 253) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AlertSoundNotification,
            }),
            (11, 254) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::SilentRing,
            }),
            (11, 264) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::EmailMessageWaiting,
            }),
            (11, 265) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::oicemailMessageWaiting,
            }),
            (11, 266) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::ostHold,
            }),
            (11, 272) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::IncomingCallHistoryCount,
            }),
            (11, 273) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::OutgoingCallHistoryCount,
            }),
            (11, 274) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::IncomingCallHistory,
            }),
            (11, 275) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::OutgoingCallHistory,
            }),
            (11, 276) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneLocale,
            }),
            (11, 320) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneTimeSecond,
            }),
            (11, 321) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneTimeMinute,
            }),
            (11, 322) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneTimeHour,
            }),
            (11, 323) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDateDay,
            }),
            (11, 324) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDateMonth,
            }),
            (11, 325) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::PhoneDateYear,
            }),
            (11, 326) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::HandsetNickname,
            }),
            (11, 327) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::AddressBookID,
            }),
            (11, 330) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::CallDuration,
            }),
            (11, 331) => Ok(Usage::TelephonyDevices {
                usage: TelephonyDevices::DualModePhone,
            }),
            (12, 1) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ConsumerControl,
            }),
            (12, 2) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::NumericKeyPad,
            }),
            (12, 3) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ProgrammableButtons,
            }),
            (12, 4) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Microphone,
            }),
            (12, 5) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Headphone,
            }),
            (12, 6) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::GraphicEqualizer,
            }),
            (12, 32) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Plus10,
            }),
            (12, 33) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Plus100,
            }),
            (12, 34) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::AMPM,
            }),
            (12, 48) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Power,
            }),
            (12, 49) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Reset,
            }),
            (12, 50) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Sleep,
            }),
            (12, 51) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SleepAfter,
            }),
            (12, 52) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SleepMode,
            }),
            (12, 53) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Illumination,
            }),
            (12, 54) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FunctionButtons,
            }),
            (12, 64) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Menu,
            }),
            (12, 65) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuPick,
            }),
            (12, 66) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuUp,
            }),
            (12, 67) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuDown,
            }),
            (12, 68) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuLeft,
            }),
            (12, 69) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuRight,
            }),
            (12, 70) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuEscape,
            }),
            (12, 71) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuValueIncrease,
            }),
            (12, 72) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MenuValueDecrease,
            }),
            (12, 96) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DataOnScreen,
            }),
            (12, 97) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ClosedCaption,
            }),
            (12, 98) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ClosedCaptionSelect,
            }),
            (12, 99) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::VCRTV,
            }),
            (12, 100) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BroadcastMode,
            }),
            (12, 101) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Snapshot,
            }),
            (12, 102) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Still,
            }),
            (12, 103) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::PictureinPictureToggle,
            }),
            (12, 104) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::PictureinPictureSwap,
            }),
            (12, 105) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::RedMenuButton,
            }),
            (12, 106) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::GreenMenuButton,
            }),
            (12, 107) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BlueMenuButton,
            }),
            (12, 108) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::YellowMenuButton,
            }),
            (12, 109) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Aspect,
            }),
            (12, 110) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ThreeDModeSelect,
            }),
            (12, 111) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBrightnessIncrement,
            }),
            (12, 112) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBrightnessDecrement,
            }),
            (12, 113) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBrightness,
            }),
            (12, 114) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplayBacklightToggle,
            }),
            (12, 115) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplaySetBrightnesstoMinimum,
            }),
            (12, 116) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplaySetBrightnesstoMaximum,
            }),
            (12, 117) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DisplaySetAutoBrightness,
            }),
            (12, 118) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::CameraAccessEnabled,
            }),
            (12, 119) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::CameraAccessDisabled,
            }),
            (12, 120) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::CameraAccessToggle,
            }),
            (12, 121) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBrightnessIncrement,
            }),
            (12, 122) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBrightnessDecrement,
            }),
            (12, 123) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightSetLevel,
            }),
            (12, 124) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightOOC,
            }),
            (12, 125) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightSetMinimum,
            }),
            (12, 126) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightSetMaximum,
            }),
            (12, 127) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardBacklightAuto,
            }),
            (12, 128) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Selection,
            }),
            (12, 129) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::AssignSelection,
            }),
            (12, 130) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ModeStep,
            }),
            (12, 131) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::RecallLast,
            }),
            (12, 132) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::EnterChannel,
            }),
            (12, 133) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::OrderMovie,
            }),
            (12, 134) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Channel,
            }),
            (12, 135) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelection,
            }),
            (12, 136) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectComputer,
            }),
            (12, 137) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTV,
            }),
            (12, 138) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectWWW,
            }),
            (12, 139) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectDVD,
            }),
            (12, 140) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTelephone,
            }),
            (12, 141) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectProgramGuide,
            }),
            (12, 142) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectVideoPhone,
            }),
            (12, 143) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectGames,
            }),
            (12, 144) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectMessages,
            }),
            (12, 145) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectCD,
            }),
            (12, 146) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectVCR,
            }),
            (12, 147) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTuner,
            }),
            (12, 148) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Quit,
            }),
            (12, 149) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Help,
            }),
            (12, 150) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectTape,
            }),
            (12, 151) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectCable,
            }),
            (12, 152) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectSatellite,
            }),
            (12, 153) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectSecurity,
            }),
            (12, 154) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectHome,
            }),
            (12, 155) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectCall,
            }),
            (12, 156) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelIncrement,
            }),
            (12, 157) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelDecrement,
            }),
            (12, 158) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MediaSelectSAP,
            }),
            (12, 160) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::VCRPlus,
            }),
            (12, 161) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Once,
            }),
            (12, 162) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Daily,
            }),
            (12, 163) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Weekly,
            }),
            (12, 164) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Monthly,
            }),
            (12, 176) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Play,
            }),
            (12, 177) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Pause,
            }),
            (12, 178) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Record,
            }),
            (12, 179) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FastForward,
            }),
            (12, 180) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Rewind,
            }),
            (12, 181) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ScanNextTrack,
            }),
            (12, 182) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ScanPreviousTrack,
            }),
            (12, 183) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Stop,
            }),
            (12, 184) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Eject,
            }),
            (12, 185) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::RandomPlay,
            }),
            (12, 186) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SelectDisc,
            }),
            (12, 187) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::EnterDisc,
            }),
            (12, 188) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Repeat,
            }),
            (12, 189) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Tracking,
            }),
            (12, 190) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::TrackNormal,
            }),
            (12, 191) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SlowTracking,
            }),
            (12, 192) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FrameForward,
            }),
            (12, 193) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FrameBack,
            }),
            (12, 194) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Mark,
            }),
            (12, 195) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ClearMark,
            }),
            (12, 196) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::RepeatFromMark,
            }),
            (12, 197) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ReturnToMark,
            }),
            (12, 198) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SearchMarkForward,
            }),
            (12, 199) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SearchMarkBackwards,
            }),
            (12, 200) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::CounterReset,
            }),
            (12, 201) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ShowCounter,
            }),
            (12, 202) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::TrackingIncrement,
            }),
            (12, 203) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::TrackingDecrement,
            }),
            (12, 204) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::StopEject,
            }),
            (12, 205) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::PlayPause,
            }),
            (12, 206) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::PlaySkip,
            }),
            (12, 207) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::VoiceCommand,
            }),
            (12, 208) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::InvokeCaptureInterface,
            }),
            (12, 209) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopGameRecording,
            }),
            (12, 210) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::HistoricalGameCapture,
            }),
            (12, 211) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::CaptureGameScreenshot,
            }),
            (12, 212) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ShoworHideRecordingIndicator,
            }),
            (12, 213) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopMicrophoneCapture,
            }),
            (12, 214) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopCameraCapture,
            }),
            (12, 215) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::StartorStopGameBroadcast,
            }),
            (12, 224) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Volume,
            }),
            (12, 225) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Balance,
            }),
            (12, 226) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Mute,
            }),
            (12, 227) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Bass,
            }),
            (12, 228) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Treble,
            }),
            (12, 229) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BassBoost,
            }),
            (12, 230) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SurroundMode,
            }),
            (12, 231) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Loudness,
            }),
            (12, 232) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MPX,
            }),
            (12, 233) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::VolumeUp,
            }),
            (12, 234) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::VolumeDown,
            }),
            (12, 240) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SpeedSelect,
            }),
            (12, 241) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::PlaybackSpeed,
            }),
            (12, 242) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::StandardPlay,
            }),
            (12, 243) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::LongPlay,
            }),
            (12, 244) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ExtendedPlay,
            }),
            (12, 245) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Slow,
            }),
            (12, 256) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FanEnable,
            }),
            (12, 257) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FanSpeed,
            }),
            (12, 258) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::LightEnable,
            }),
            (12, 259) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::LightIlluminationLevel,
            }),
            (12, 260) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ClimateControlEnable,
            }),
            (12, 261) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::RoomTemperature,
            }),
            (12, 262) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SecurityEnable,
            }),
            (12, 263) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::FireAlarm,
            }),
            (12, 264) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::PoliceAlarm,
            }),
            (12, 265) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Proximity,
            }),
            (12, 266) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Motion,
            }),
            (12, 267) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::DuressAlarm,
            }),
            (12, 268) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::HoldupAlarm,
            }),
            (12, 269) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::MedicalAlarm,
            }),
            (12, 336) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BalanceRight,
            }),
            (12, 337) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BalanceLeft,
            }),
            (12, 338) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BassIncrement,
            }),
            (12, 339) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::BassDecrement,
            }),
            (12, 340) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::TrebleIncrement,
            }),
            (12, 341) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::TrebleDecrement,
            }),
            (12, 352) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SpeakerSystem,
            }),
            (12, 353) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelLeft,
            }),
            (12, 354) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelRight,
            }),
            (12, 355) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelCenter,
            }),
            (12, 356) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelFront,
            }),
            (12, 357) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelCenterFront,
            }),
            (12, 358) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelSide,
            }),
            (12, 359) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelSurround,
            }),
            (12, 360) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelLowFreqEnhancement,
            }),
            (12, 361) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelTop,
            }),
            (12, 362) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ChannelUnknown,
            }),
            (12, 368) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::Subchannel,
            }),
            (12, 369) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SubchannelIncrement,
            }),
            (12, 370) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::SubchannelDecrement,
            }),
            (12, 371) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::AlternateAudioIncrement,
            }),
            (12, 372) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::AlternateAudioDecrement,
            }),
            (12, 384) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ApplicationLaunchButtons,
            }),
            (12, 385) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLaunchButtonConfigTool,
            }),
            (12, 386) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALProgrammableButtonConfig,
            }),
            (12, 387) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALConsumerControlConfig,
            }),
            (12, 388) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALWordProcessor,
            }),
            (12, 389) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTextEditor,
            }),
            (12, 390) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSpreadsheet,
            }),
            (12, 391) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALGraphicsEditor,
            }),
            (12, 392) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPresentationApp,
            }),
            (12, 393) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDatabaseApp,
            }),
            (12, 394) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALEmailReader,
            }),
            (12, 395) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNewsreader,
            }),
            (12, 396) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALVoicemail,
            }),
            (12, 397) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALContactsAddressBook,
            }),
            (12, 398) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCalendarSchedule,
            }),
            (12, 399) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTaskProjectManager,
            }),
            (12, 400) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogJournalTimecard,
            }),
            (12, 401) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCheckbookFinance,
            }),
            (12, 402) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCalculator,
            }),
            (12, 403) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAVCapturePlayback,
            }),
            (12, 404) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLocalMachineBrowser,
            }),
            (12, 405) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLANWANBrowser,
            }),
            (12, 406) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALInternetBrowser,
            }),
            (12, 407) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALRemoteNetworkingISPConnect,
            }),
            (12, 408) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNetworkConference,
            }),
            (12, 409) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNetworkChat,
            }),
            (12, 410) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTelephonyDialer,
            }),
            (12, 411) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogon,
            }),
            (12, 412) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogoff,
            }),
            (12, 413) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALLogonLogoff,
            }),
            (12, 414) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALTerminalLockScreensaver,
            }),
            (12, 415) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALControlPanel,
            }),
            (12, 416) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCommandLineProcessorRun,
            }),
            (12, 417) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALProcessTaskManager,
            }),
            (12, 418) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSelectTaskApplication,
            }),
            (12, 419) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALNextTaskApplication,
            }),
            (12, 420) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPreviousTaskApplication,
            }),
            (12, 421) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPreemptHaltTaskApplication,
            }),
            (12, 422) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALIntegratedHelpCenter,
            }),
            (12, 423) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDocuments,
            }),
            (12, 424) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALThesaurus,
            }),
            (12, 425) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDictionary,
            }),
            (12, 426) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDesktop,
            }),
            (12, 427) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSpellCheck,
            }),
            (12, 428) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALGrammarCheck,
            }),
            (12, 429) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALWirelessStatus,
            }),
            (12, 430) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALKeyboardLayout,
            }),
            (12, 431) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALVirusProtection,
            }),
            (12, 432) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALEncryption,
            }),
            (12, 433) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALScreenSaver,
            }),
            (12, 434) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAlarms,
            }),
            (12, 435) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALClock,
            }),
            (12, 436) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALFileBrowser,
            }),
            (12, 437) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALPowerStatus,
            }),
            (12, 438) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALImageBrowser,
            }),
            (12, 439) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAudioBrowser,
            }),
            (12, 440) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALMovieBrowser,
            }),
            (12, 441) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDigitalRightsManager,
            }),
            (12, 442) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALDigitalWallet,
            }),
            (12, 444) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALInstantMessaging,
            }),
            (12, 445) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOEMFeaturesTipsTutoBrowser,
            }),
            (12, 446) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOEMHelp,
            }),
            (12, 447) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOnlineCommunity,
            }),
            (12, 448) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALEntertainmentContentBrowser,
            }),
            (12, 449) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOnlineShoppingBrowser,
            }),
            (12, 450) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALSmartCardInformationHelp,
            }),
            (12, 451) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALMarketMonitorFinanceBrowser,
            }),
            (12, 452) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALCustomizedCorpNewsBrowser,
            }),
            (12, 453) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALOnlineActivityBrowser,
            }),
            (12, 454) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALResearchSearchBrowser,
            }),
            (12, 455) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALAudioPlayer,
            }),
            (12, 456) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALMessageStatus,
            }),
            (12, 457) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ALContactSync,
            }),
            (12, 512) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::GenericGUIApplicationControls,
            }),
            (12, 513) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNew,
            }),
            (12, 514) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACOpen,
            }),
            (12, 515) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACClose,
            }),
            (12, 516) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACExit,
            }),
            (12, 517) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMaximize,
            }),
            (12, 518) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMinimize,
            }),
            (12, 519) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSave,
            }),
            (12, 520) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPrint,
            }),
            (12, 521) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACProperties,
            }),
            (12, 538) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUndo,
            }),
            (12, 539) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCopy,
            }),
            (12, 540) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCut,
            }),
            (12, 541) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPaste,
            }),
            (12, 542) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectAll,
            }),
            (12, 543) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFind,
            }),
            (12, 544) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFindandReplace,
            }),
            (12, 545) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSearch,
            }),
            (12, 546) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACGoTo,
            }),
            (12, 547) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACHome,
            }),
            (12, 548) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBack,
            }),
            (12, 549) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACForward,
            }),
            (12, 550) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACStop,
            }),
            (12, 551) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRefresh,
            }),
            (12, 552) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPreviousLink,
            }),
            (12, 553) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNextLink,
            }),
            (12, 554) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBookmarks,
            }),
            (12, 555) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACHistory,
            }),
            (12, 556) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSubscriptions,
            }),
            (12, 557) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACZoomIn,
            }),
            (12, 558) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACZoomOut,
            }),
            (12, 559) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACZoom,
            }),
            (12, 560) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFullScreenView,
            }),
            (12, 561) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNormalView,
            }),
            (12, 562) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACViewToggle,
            }),
            (12, 563) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACScrollUp,
            }),
            (12, 564) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACScrollDown,
            }),
            (12, 565) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACScroll,
            }),
            (12, 566) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPanLeft,
            }),
            (12, 567) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPanRight,
            }),
            (12, 568) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPan,
            }),
            (12, 569) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNewWindow,
            }),
            (12, 570) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACTileHorizontally,
            }),
            (12, 571) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACTileVertically,
            }),
            (12, 572) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFormat,
            }),
            (12, 573) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACEdit,
            }),
            (12, 574) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBold,
            }),
            (12, 575) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACItalics,
            }),
            (12, 576) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUnderline,
            }),
            (12, 577) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACStrikethrough,
            }),
            (12, 578) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSubscript,
            }),
            (12, 579) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSuperscript,
            }),
            (12, 580) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAllCaps,
            }),
            (12, 581) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRotate,
            }),
            (12, 582) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACResize,
            }),
            (12, 583) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFliphorizontal,
            }),
            (12, 584) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFlipVertical,
            }),
            (12, 585) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMirrorHorizontal,
            }),
            (12, 586) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMirrorVertical,
            }),
            (12, 587) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFontSelect,
            }),
            (12, 588) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFontColor,
            }),
            (12, 589) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFontSize,
            }),
            (12, 590) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyLeft,
            }),
            (12, 591) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyCenterH,
            }),
            (12, 592) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyRight,
            }),
            (12, 593) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyBlockH,
            }),
            (12, 594) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyTop,
            }),
            (12, 595) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyCenterV,
            }),
            (12, 596) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyBottom,
            }),
            (12, 597) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACJustifyBlockV,
            }),
            (12, 598) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACIndentDecrease,
            }),
            (12, 599) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACIndentIncrease,
            }),
            (12, 600) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNumberedList,
            }),
            (12, 601) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRestartNumbering,
            }),
            (12, 602) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBulletedList,
            }),
            (12, 603) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPromote,
            }),
            (12, 604) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDemote,
            }),
            (12, 605) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACYes,
            }),
            (12, 606) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNo,
            }),
            (12, 607) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCancel,
            }),
            (12, 608) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCatalog,
            }),
            (12, 609) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACBuyCheckout,
            }),
            (12, 610) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAddtoCart,
            }),
            (12, 611) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACExpand,
            }),
            (12, 612) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACExpandAll,
            }),
            (12, 613) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCollapse,
            }),
            (12, 614) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACCollapseAll,
            }),
            (12, 615) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPrintPreview,
            }),
            (12, 616) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACPasteSpecial,
            }),
            (12, 617) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertMode,
            }),
            (12, 618) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDelete,
            }),
            (12, 619) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACLock,
            }),
            (12, 620) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUnlock,
            }),
            (12, 621) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACProtect,
            }),
            (12, 622) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUnprotect,
            }),
            (12, 623) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAttachComment,
            }),
            (12, 624) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDeleteComment,
            }),
            (12, 625) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACViewComment,
            }),
            (12, 626) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectWord,
            }),
            (12, 627) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectSentence,
            }),
            (12, 628) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectParagraph,
            }),
            (12, 629) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectColumn,
            }),
            (12, 630) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectRow,
            }),
            (12, 631) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectTable,
            }),
            (12, 632) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectObject,
            }),
            (12, 633) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRedoRepeat,
            }),
            (12, 634) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSort,
            }),
            (12, 635) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSortAscending,
            }),
            (12, 636) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSortDescending,
            }),
            (12, 637) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACFilter,
            }),
            (12, 638) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSetClock,
            }),
            (12, 639) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACViewClock,
            }),
            (12, 640) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSelectTimeZone,
            }),
            (12, 641) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACEditTimeZones,
            }),
            (12, 642) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSetAlarm,
            }),
            (12, 643) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACClearAlarm,
            }),
            (12, 644) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSnoozeAlarm,
            }),
            (12, 645) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACResetAlarm,
            }),
            (12, 646) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSynchronize,
            }),
            (12, 647) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSendReceive,
            }),
            (12, 648) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSendTo,
            }),
            (12, 649) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACReply,
            }),
            (12, 650) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACReplyAll,
            }),
            (12, 651) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACForwardMsg,
            }),
            (12, 652) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSend,
            }),
            (12, 653) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACAttachFile,
            }),
            (12, 654) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACUpload,
            }),
            (12, 655) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDownloadSaveTargetAs,
            }),
            (12, 656) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSetBorders,
            }),
            (12, 657) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertRow,
            }),
            (12, 658) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertColumn,
            }),
            (12, 659) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertFile,
            }),
            (12, 660) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertPicture,
            }),
            (12, 661) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertObject,
            }),
            (12, 662) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACInsertSymbol,
            }),
            (12, 663) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSaveandClose,
            }),
            (12, 664) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACRename,
            }),
            (12, 665) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACMerge,
            }),
            (12, 666) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSplit,
            }),
            (12, 667) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDisributeHorizontally,
            }),
            (12, 668) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDistributeVertically,
            }),
            (12, 669) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNextKeyboardLayoutSelect,
            }),
            (12, 670) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACNavigationGuidance,
            }),
            (12, 671) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACDesktopShowAllWindows,
            }),
            (12, 672) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSoftKeyLeft,
            }),
            (12, 673) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACSoftKeyRight,
            }),
            (12, 688) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ACIdleKeepAlive,
            }),
            (12, 704) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ExtendedKeyboardAttributesCollection,
            }),
            (12, 705) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardFormFactor,
            }),
            (12, 706) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardKeyType,
            }),
            (12, 707) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardPhysicalLayout,
            }),
            (12, 708) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::VendorSpecificKeyboardPhysicalLayout,
            }),
            (12, 709) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardIETFLanguageTagIndex,
            }),
            (12, 710) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ImplementedKeyboardInputAssistControls,
            }),
            (12, 711) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistPrevious,
            }),
            (12, 712) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistNextS,
            }),
            (12, 713) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistPreviousGroup,
            }),
            (12, 714) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistNextGroup,
            }),
            (12, 715) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistAccept,
            }),
            (12, 716) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::KeyboardInputAssistCancel,
            }),
            (12, 1280) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEdited,
            }),
            (12, 1281) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactAdded,
            }),
            (12, 1282) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactRecordActive,
            }),
            (12, 1283) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactIndex,
            }),
            (12, 1284) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactNickname,
            }),
            (12, 1285) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactFirstName,
            }),
            (12, 1286) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactLastName,
            }),
            (12, 1287) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactFullName,
            }),
            (12, 1288) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberPersonal,
            }),
            (12, 1289) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberBusiness,
            }),
            (12, 1290) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberMobile,
            }),
            (12, 1291) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberPager,
            }),
            (12, 1292) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberFax,
            }),
            (12, 1293) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactPhoneNumberOther,
            }),
            (12, 1294) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailPersonal,
            }),
            (12, 1295) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailBusiness,
            }),
            (12, 1296) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailOther,
            }),
            (12, 1297) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactEmailMain,
            }),
            (12, 1298) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactSpeedDialNumber,
            }),
            (12, 1299) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactStatusFlag,
            }),
            (12, 1300) => Ok(Usage::ConsumerDevices {
                usage: ConsumerDevices::ContactMisc,
            }),
            (13, 0) => Ok(Usage::Digitizers {
                usage: Digitizers::Undefined,
            }),
            (13, 1) => Ok(Usage::Digitizers {
                usage: Digitizers::Digitizer,
            }),
            (13, 2) => Ok(Usage::Digitizers {
                usage: Digitizers::Pen,
            }),
            (13, 3) => Ok(Usage::Digitizers {
                usage: Digitizers::LightPen,
            }),
            (13, 4) => Ok(Usage::Digitizers {
                usage: Digitizers::TouchScreen,
            }),
            (13, 5) => Ok(Usage::Digitizers {
                usage: Digitizers::TouchPad,
            }),
            (13, 6) => Ok(Usage::Digitizers {
                usage: Digitizers::WhiteBoard,
            }),
            (13, 7) => Ok(Usage::Digitizers {
                usage: Digitizers::CoordinateMeasuringMachine,
            }),
            (13, 8) => Ok(Usage::Digitizers {
                usage: Digitizers::ThreeDDigitizer,
            }),
            (13, 9) => Ok(Usage::Digitizers {
                usage: Digitizers::StereoPlotter,
            }),
            (13, 10) => Ok(Usage::Digitizers {
                usage: Digitizers::ArticulatedArm,
            }),
            (13, 11) => Ok(Usage::Digitizers {
                usage: Digitizers::Armature,
            }),
            (13, 12) => Ok(Usage::Digitizers {
                usage: Digitizers::MultiplePointDigitizer,
            }),
            (13, 13) => Ok(Usage::Digitizers {
                usage: Digitizers::FreeSpaceWand,
            }),
            (13, 14) => Ok(Usage::Digitizers {
                usage: Digitizers::DeviceConfiguration,
            }),
            (13, 15) => Ok(Usage::Digitizers {
                usage: Digitizers::CapacitiveHeatMapDigitizer,
            }),
            (13, 32) => Ok(Usage::Digitizers {
                usage: Digitizers::Stylus,
            }),
            (13, 33) => Ok(Usage::Digitizers {
                usage: Digitizers::Puck,
            }),
            (13, 34) => Ok(Usage::Digitizers {
                usage: Digitizers::Finger,
            }),
            (13, 35) => Ok(Usage::Digitizers {
                usage: Digitizers::DeviceSettings,
            }),
            (13, 36) => Ok(Usage::Digitizers {
                usage: Digitizers::CharacterGesture,
            }),
            (13, 48) => Ok(Usage::Digitizers {
                usage: Digitizers::TipPressure,
            }),
            (13, 49) => Ok(Usage::Digitizers {
                usage: Digitizers::BarrelPressure,
            }),
            (13, 50) => Ok(Usage::Digitizers {
                usage: Digitizers::InRange,
            }),
            (13, 51) => Ok(Usage::Digitizers {
                usage: Digitizers::Touch,
            }),
            (13, 52) => Ok(Usage::Digitizers {
                usage: Digitizers::Untouch,
            }),
            (13, 53) => Ok(Usage::Digitizers {
                usage: Digitizers::Tap,
            }),
            (13, 54) => Ok(Usage::Digitizers {
                usage: Digitizers::Quality,
            }),
            (13, 55) => Ok(Usage::Digitizers {
                usage: Digitizers::DataValid,
            }),
            (13, 56) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerIndex,
            }),
            (13, 57) => Ok(Usage::Digitizers {
                usage: Digitizers::TabletFunctionKeys,
            }),
            (13, 58) => Ok(Usage::Digitizers {
                usage: Digitizers::ProgramChangeKeys,
            }),
            (13, 59) => Ok(Usage::Digitizers {
                usage: Digitizers::BatteryStrength,
            }),
            (13, 60) => Ok(Usage::Digitizers {
                usage: Digitizers::Invert,
            }),
            (13, 61) => Ok(Usage::Digitizers {
                usage: Digitizers::XTilt,
            }),
            (13, 62) => Ok(Usage::Digitizers {
                usage: Digitizers::YTilt,
            }),
            (13, 63) => Ok(Usage::Digitizers {
                usage: Digitizers::Azimuth,
            }),
            (13, 64) => Ok(Usage::Digitizers {
                usage: Digitizers::Altitude,
            }),
            (13, 65) => Ok(Usage::Digitizers {
                usage: Digitizers::Twist,
            }),
            (13, 66) => Ok(Usage::Digitizers {
                usage: Digitizers::TipSwitch,
            }),
            (13, 67) => Ok(Usage::Digitizers {
                usage: Digitizers::SecondaryTipSwitch,
            }),
            (13, 68) => Ok(Usage::Digitizers {
                usage: Digitizers::BarrelSwitch,
            }),
            (13, 69) => Ok(Usage::Digitizers {
                usage: Digitizers::Eraser,
            }),
            (13, 70) => Ok(Usage::Digitizers {
                usage: Digitizers::TabletPick,
            }),
            (13, 71) => Ok(Usage::Digitizers {
                usage: Digitizers::Confidence,
            }),
            (13, 72) => Ok(Usage::Digitizers {
                usage: Digitizers::Width,
            }),
            (13, 73) => Ok(Usage::Digitizers {
                usage: Digitizers::Height,
            }),
            (13, 81) => Ok(Usage::Digitizers {
                usage: Digitizers::ContactId,
            }),
            (13, 82) => Ok(Usage::Digitizers {
                usage: Digitizers::Inputmode,
            }),
            (13, 83) => Ok(Usage::Digitizers {
                usage: Digitizers::DeviceIndex,
            }),
            (13, 84) => Ok(Usage::Digitizers {
                usage: Digitizers::ContactCount,
            }),
            (13, 85) => Ok(Usage::Digitizers {
                usage: Digitizers::ContactMax,
            }),
            (13, 86) => Ok(Usage::Digitizers {
                usage: Digitizers::ScanTime,
            }),
            (13, 87) => Ok(Usage::Digitizers {
                usage: Digitizers::SurfaceSwitch,
            }),
            (13, 88) => Ok(Usage::Digitizers {
                usage: Digitizers::ButtonSwitch,
            }),
            (13, 89) => Ok(Usage::Digitizers {
                usage: Digitizers::ButtonType,
            }),
            (13, 90) => Ok(Usage::Digitizers {
                usage: Digitizers::SecondaryBarrelSwitch,
            }),
            (13, 91) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerSerialNumber,
            }),
            (13, 92) => Ok(Usage::Digitizers {
                usage: Digitizers::PreferredInkingColor,
            }),
            (13, 93) => Ok(Usage::Digitizers {
                usage: Digitizers::PreferredColorisLocked,
            }),
            (13, 94) => Ok(Usage::Digitizers {
                usage: Digitizers::PreferredLineWidth,
            }),
            (13, 95) => Ok(Usage::Digitizers {
                usage: Digitizers::PreferredLineWidthisLocked,
            }),
            (13, 97) => Ok(Usage::Digitizers {
                usage: Digitizers::GestureCharacterQuality,
            }),
            (13, 98) => Ok(Usage::Digitizers {
                usage: Digitizers::CharacterGestureDataLength,
            }),
            (13, 99) => Ok(Usage::Digitizers {
                usage: Digitizers::CharacterGestureData,
            }),
            (13, 100) => Ok(Usage::Digitizers {
                usage: Digitizers::GestureCharacterEncoding,
            }),
            (13, 101) => Ok(Usage::Digitizers {
                usage: Digitizers::UTF8CharacterGestureEncodingSel,
            }),
            (13, 102) => Ok(Usage::Digitizers {
                usage: Digitizers::UTF16LittleEndianCharacterGestureEncodingSel,
            }),
            (13, 103) => Ok(Usage::Digitizers {
                usage: Digitizers::UTF16BigEndianCharacterGestureEncodingSel,
            }),
            (13, 104) => Ok(Usage::Digitizers {
                usage: Digitizers::UTF32LittleEndianCharacterGestureEncoding,
            }),
            (13, 105) => Ok(Usage::Digitizers {
                usage: Digitizers::UTF32BigEndianCharacterGestureEncoding,
            }),
            (13, 106) => Ok(Usage::Digitizers {
                usage: Digitizers::GestureCharacterEnable,
            }),
            (13, 107) => Ok(Usage::Digitizers {
                usage: Digitizers::CapacitiveHeatMapProtocolVersion,
            }),
            (13, 108) => Ok(Usage::Digitizers {
                usage: Digitizers::CapacitiveHeatMapFrameData,
            }),
            (13, 112) => Ok(Usage::Digitizers {
                usage: Digitizers::PreferredLineStyle,
            }),
            (13, 113) => Ok(Usage::Digitizers {
                usage: Digitizers::PreferredLineStyleisLocked,
            }),
            (13, 114) => Ok(Usage::Digitizers {
                usage: Digitizers::Ink,
            }),
            (13, 115) => Ok(Usage::Digitizers {
                usage: Digitizers::Pencil,
            }),
            (13, 116) => Ok(Usage::Digitizers {
                usage: Digitizers::Highlighter,
            }),
            (13, 117) => Ok(Usage::Digitizers {
                usage: Digitizers::ChiselMarker,
            }),
            (13, 118) => Ok(Usage::Digitizers {
                usage: Digitizers::Brush,
            }),
            (13, 119) => Ok(Usage::Digitizers {
                usage: Digitizers::Nopreference,
            }),
            (13, 128) => Ok(Usage::Digitizers {
                usage: Digitizers::DigitizerDiagnostic,
            }),
            (13, 129) => Ok(Usage::Digitizers {
                usage: Digitizers::DigitizerError,
            }),
            (13, 130) => Ok(Usage::Digitizers {
                usage: Digitizers::ErrNormalStatus,
            }),
            (13, 131) => Ok(Usage::Digitizers {
                usage: Digitizers::ErrTransducersExceeded,
            }),
            (13, 132) => Ok(Usage::Digitizers {
                usage: Digitizers::ErrFullTransFeaturesUnavail,
            }),
            (13, 133) => Ok(Usage::Digitizers {
                usage: Digitizers::ErrChargeLow,
            }),
            (13, 144) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerSoftwareInfo,
            }),
            (13, 145) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerVendorID,
            }),
            (13, 146) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerProductID,
            }),
            (13, 147) => Ok(Usage::Digitizers {
                usage: Digitizers::DeviceSupportedProtocols,
            }),
            (13, 148) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerSupportedProtocols,
            }),
            (13, 149) => Ok(Usage::Digitizers {
                usage: Digitizers::NoProtocol,
            }),
            (13, 150) => Ok(Usage::Digitizers {
                usage: Digitizers::WacomAESProtocol,
            }),
            (13, 151) => Ok(Usage::Digitizers {
                usage: Digitizers::USIProtocol,
            }),
            (13, 152) => Ok(Usage::Digitizers {
                usage: Digitizers::MicrosoftPenProtocol,
            }),
            (13, 160) => Ok(Usage::Digitizers {
                usage: Digitizers::SupportedReportRates,
            }),
            (13, 161) => Ok(Usage::Digitizers {
                usage: Digitizers::ReportRate,
            }),
            (13, 162) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerConnected,
            }),
            (13, 163) => Ok(Usage::Digitizers {
                usage: Digitizers::SwitchDisabled,
            }),
            (13, 164) => Ok(Usage::Digitizers {
                usage: Digitizers::SwitchUnimplemented,
            }),
            (13, 165) => Ok(Usage::Digitizers {
                usage: Digitizers::TransducerSwitches,
            }),
            (14, 1) => Ok(Usage::Haptic {
                usage: Haptic::SimpleHapticController,
            }),
            (14, 16) => Ok(Usage::Haptic {
                usage: Haptic::Waveform,
            }),
            (14, 17) => Ok(Usage::Haptic {
                usage: Haptic::Duration,
            }),
            (14, 32) => Ok(Usage::Haptic {
                usage: Haptic::AutoTrigger,
            }),
            (14, 33) => Ok(Usage::Haptic {
                usage: Haptic::ManualTrigger,
            }),
            (14, 34) => Ok(Usage::Haptic {
                usage: Haptic::AutoTriggerAssociatedControl,
            }),
            (14, 35) => Ok(Usage::Haptic {
                usage: Haptic::Intensity,
            }),
            (14, 36) => Ok(Usage::Haptic {
                usage: Haptic::RepeatCount,
            }),
            (14, 37) => Ok(Usage::Haptic {
                usage: Haptic::RetriggerPeriod,
            }),
            (14, 38) => Ok(Usage::Haptic {
                usage: Haptic::WaveformVendorPage,
            }),
            (14, 39) => Ok(Usage::Haptic {
                usage: Haptic::WaveformVendorID,
            }),
            (14, 40) => Ok(Usage::Haptic {
                usage: Haptic::WaveformCutoffTime,
            }),
            (14, 4097) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_NONE,
            }),
            (14, 4098) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_STOP,
            }),
            (14, 4099) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_CLICK,
            }),
            (14, 4100) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_BUZZ_CONTINUOUS,
            }),
            (14, 4101) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_RUMBLE_CONTINUOUS,
            }),
            (14, 4102) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_PRESS,
            }),
            (14, 4103) => Ok(Usage::Haptic {
                usage: Haptic::WAVEFORM_RELEASE,
            }),
            (18, 1) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::EyeTracker,
            }),
            (18, 2) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::HeadTracker,
            }),
            (18, 16) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::TrackingData,
            }),
            (18, 17) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Capabilities,
            }),
            (18, 18) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Configuration,
            }),
            (18, 19) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Status,
            }),
            (18, 20) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::Control,
            }),
            (18, 32) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::SensorTimestamp,
            }),
            (18, 33) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::PositionX,
            }),
            (18, 34) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::PositionY,
            }),
            (18, 35) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::PositionZ,
            }),
            (18, 36) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::GazePoint,
            }),
            (18, 37) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::LeftEyePosition,
            }),
            (18, 38) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RightEyePosition,
            }),
            (18, 39) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::HeadPosition,
            }),
            (18, 40) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::HeadDirectionPoint,
            }),
            (18, 41) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RotationaboutXaxis,
            }),
            (18, 42) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RotationaboutYaxis,
            }),
            (18, 43) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::RotationaboutZaxis,
            }),
            (18, 256) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::TrackerQuality,
            }),
            (18, 257) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MinimumTrackingDistance,
            }),
            (18, 258) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::OptimumTrackingDistance,
            }),
            (18, 259) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MaximumTrackingDistance,
            }),
            (18, 260) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MaximumScreenPlaneWidth,
            }),
            (18, 261) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::MaximumScreenPlaneHeight,
            }),
            (18, 512) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplayManufacturerID,
            }),
            (18, 513) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplayProductID,
            }),
            (18, 514) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplaySerialNumber,
            }),
            (18, 515) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DisplayManufacturerDate,
            }),
            (18, 516) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::CalibratedScreenWidth,
            }),
            (18, 517) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::CalibratedScreenHeight,
            }),
            (18, 768) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::SamplingFrequency,
            }),
            (18, 769) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::ConfigurationStatus,
            }),
            (18, 1024) => Ok(Usage::EyeandHeadTrackers {
                usage: EyeandHeadTrackers::DeviceModeRequest,
            }),
            (20, 0) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Undefined,
            }),
            (20, 1) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AlphanumericDisplay,
            }),
            (20, 2) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AuxiliaryDisplay,
            }),
            (20, 32) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayAttributesReport,
            }),
            (20, 33) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ASCIICharacterSet,
            }),
            (20, 34) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DataReadBack,
            }),
            (20, 35) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::FontReadBack,
            }),
            (20, 36) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayControlReport,
            }),
            (20, 37) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ClearDisplay,
            }),
            (20, 38) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayEnable,
            }),
            (20, 39) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ScreenSaverDelay,
            }),
            (20, 40) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ScreenSaverEnable,
            }),
            (20, 41) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::VerticalScroll,
            }),
            (20, 42) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::HorizontalScroll,
            }),
            (20, 43) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterReport,
            }),
            (20, 44) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayData,
            }),
            (20, 45) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayStatus,
            }),
            (20, 46) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::StatNotReady,
            }),
            (20, 47) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::StatReady,
            }),
            (20, 48) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ErrNotaloadablecharacter,
            }),
            (20, 49) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::ErrFontdatacannotberead,
            }),
            (20, 50) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorPositionReport,
            }),
            (20, 51) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Row,
            }),
            (20, 52) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Column,
            }),
            (20, 53) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Rows,
            }),
            (20, 54) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Columns,
            }),
            (20, 55) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorPixelPositioning,
            }),
            (20, 56) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorMode,
            }),
            (20, 57) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorEnable,
            }),
            (20, 58) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CursorBlink,
            }),
            (20, 59) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::FontReport,
            }),
            (20, 60) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::FontData,
            }),
            (20, 61) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterWidth,
            }),
            (20, 62) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterHeight,
            }),
            (20, 63) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterSpacingHorizontal,
            }),
            (20, 64) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterSpacingVertical,
            }),
            (20, 65) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::UnicodeCharacterSet,
            }),
            (20, 66) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Font7Segment,
            }),
            (20, 67) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SevenSegmentDirectMap,
            }),
            (20, 68) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::Font14Segment,
            }),
            (20, 69) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::One4SegmentDirectMap,
            }),
            (20, 70) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayBrightness,
            }),
            (20, 71) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayContrast,
            }),
            (20, 72) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterAttribute,
            }),
            (20, 73) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AttributeReadback,
            }),
            (20, 74) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::AttributeData,
            }),
            (20, 75) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharAttrEnhance,
            }),
            (20, 76) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharAttrUnderline,
            }),
            (20, 77) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharAttrBlink,
            }),
            (20, 128) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BitmapSizeX,
            }),
            (20, 129) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BitmapSizeY,
            }),
            (20, 130) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::MaxBlitSize,
            }),
            (20, 131) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BitDepthFormat,
            }),
            (20, 132) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayOrientation,
            }),
            (20, 133) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteReport,
            }),
            (20, 134) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteDataSize,
            }),
            (20, 135) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteDataOffset,
            }),
            (20, 136) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::PaletteData,
            }),
            (20, 138) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitReport,
            }),
            (20, 139) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleX1,
            }),
            (20, 140) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleY1,
            }),
            (20, 141) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleX2,
            }),
            (20, 142) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitRectangleY2,
            }),
            (20, 143) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::BlitData,
            }),
            (20, 144) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButton,
            }),
            (20, 145) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonID,
            }),
            (20, 146) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonSide,
            }),
            (20, 147) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonOffset1,
            }),
            (20, 148) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonOffset2,
            }),
            (20, 149) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftButtonReport,
            }),
            (20, 194) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::SoftKeys,
            }),
            (20, 204) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::DisplayDataExtensions,
            }),
            (20, 207) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterMapping,
            }),
            (20, 221) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::UnicodeEquivalent,
            }),
            (20, 223) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::CharacterPageMapping,
            }),
            (20, 255) => Ok(Usage::AuxiliaryDisplay {
                usage: AuxiliaryDisplay::RequestReport,
            }),
            (32, 0) => Ok(Usage::Sensor {
                usage: Sensor::Undefined,
            }),
            (32, 1) => Ok(Usage::Sensor {
                usage: Sensor::Sensor,
            }),
            (32, 16) => Ok(Usage::Sensor {
                usage: Sensor::Biometric,
            }),
            (32, 17) => Ok(Usage::Sensor {
                usage: Sensor::BiometricHumanPresence,
            }),
            (32, 18) => Ok(Usage::Sensor {
                usage: Sensor::BiometricHumanProximity,
            }),
            (32, 19) => Ok(Usage::Sensor {
                usage: Sensor::BiometricHumanTouch,
            }),
            (32, 20) => Ok(Usage::Sensor {
                usage: Sensor::BiometricBloodPressure,
            }),
            (32, 21) => Ok(Usage::Sensor {
                usage: Sensor::BiometricBodyTemperature,
            }),
            (32, 22) => Ok(Usage::Sensor {
                usage: Sensor::BiometricHeartRate,
            }),
            (32, 23) => Ok(Usage::Sensor {
                usage: Sensor::BiometricHeartRateVariability,
            }),
            (32, 24) => Ok(Usage::Sensor {
                usage: Sensor::BiometricPeripheralOxygenSaturation,
            }),
            (32, 25) => Ok(Usage::Sensor {
                usage: Sensor::BiometricRespiratoryRate,
            }),
            (32, 32) => Ok(Usage::Sensor {
                usage: Sensor::Electrical,
            }),
            (32, 33) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalCapacitance,
            }),
            (32, 34) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalCurrent,
            }),
            (32, 35) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalPower,
            }),
            (32, 36) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalInductance,
            }),
            (32, 37) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalResistance,
            }),
            (32, 38) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalVoltage,
            }),
            (32, 39) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalPotentiometer,
            }),
            (32, 40) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalFrequency,
            }),
            (32, 41) => Ok(Usage::Sensor {
                usage: Sensor::ElectricalPeriod,
            }),
            (32, 48) => Ok(Usage::Sensor {
                usage: Sensor::Environmental,
            }),
            (32, 49) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalAtmosphericPressure,
            }),
            (32, 50) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalHumidity,
            }),
            (32, 51) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalTemperature,
            }),
            (32, 52) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalWindDirection,
            }),
            (32, 53) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalWindSpeed,
            }),
            (32, 54) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalAirQuality,
            }),
            (32, 55) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalHeatIndex,
            }),
            (32, 56) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalSurfaceTemperature,
            }),
            (32, 57) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalVolatileOrganicCompounds,
            }),
            (32, 58) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalObjectPresence,
            }),
            (32, 59) => Ok(Usage::Sensor {
                usage: Sensor::EnvironmentalObjectProximity,
            }),
            (32, 64) => Ok(Usage::Sensor {
                usage: Sensor::Light,
            }),
            (32, 65) => Ok(Usage::Sensor {
                usage: Sensor::LightAmbientLight,
            }),
            (32, 66) => Ok(Usage::Sensor {
                usage: Sensor::LightConsumerInfrared,
            }),
            (32, 67) => Ok(Usage::Sensor {
                usage: Sensor::LightInfraredLight,
            }),
            (32, 68) => Ok(Usage::Sensor {
                usage: Sensor::LightVisibleLight,
            }),
            (32, 69) => Ok(Usage::Sensor {
                usage: Sensor::LightUltravioletLight,
            }),
            (32, 80) => Ok(Usage::Sensor {
                usage: Sensor::Location,
            }),
            (32, 81) => Ok(Usage::Sensor {
                usage: Sensor::LocationBroadcast,
            }),
            (32, 82) => Ok(Usage::Sensor {
                usage: Sensor::LocationDeadReckoning,
            }),
            (32, 83) => Ok(Usage::Sensor {
                usage: Sensor::LocationGPS,
            }),
            (32, 84) => Ok(Usage::Sensor {
                usage: Sensor::LocationLookup,
            }),
            (32, 85) => Ok(Usage::Sensor {
                usage: Sensor::LocationOther,
            }),
            (32, 86) => Ok(Usage::Sensor {
                usage: Sensor::LocationStatic,
            }),
            (32, 87) => Ok(Usage::Sensor {
                usage: Sensor::LocationTriangulation,
            }),
            (32, 96) => Ok(Usage::Sensor {
                usage: Sensor::Mechanical,
            }),
            (32, 97) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalBooleanSwitch,
            }),
            (32, 98) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalBooleanSwitchArray,
            }),
            (32, 99) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalMultivalueSwitch,
            }),
            (32, 100) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalForce,
            }),
            (32, 101) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalPressure,
            }),
            (32, 102) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalStrain,
            }),
            (32, 103) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalWeight,
            }),
            (32, 104) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalHapticVibrator,
            }),
            (32, 105) => Ok(Usage::Sensor {
                usage: Sensor::MechanicalHallEffectSwitch,
            }),
            (32, 112) => Ok(Usage::Sensor {
                usage: Sensor::Motion,
            }),
            (32, 113) => Ok(Usage::Sensor {
                usage: Sensor::MotionAccelerometer1D,
            }),
            (32, 114) => Ok(Usage::Sensor {
                usage: Sensor::MotionAccelerometer2D,
            }),
            (32, 115) => Ok(Usage::Sensor {
                usage: Sensor::MotionAccelerometer3D,
            }),
            (32, 116) => Ok(Usage::Sensor {
                usage: Sensor::MotionGyrometer1D,
            }),
            (32, 117) => Ok(Usage::Sensor {
                usage: Sensor::MotionGyrometer2D,
            }),
            (32, 118) => Ok(Usage::Sensor {
                usage: Sensor::MotionGyrometer3D,
            }),
            (32, 119) => Ok(Usage::Sensor {
                usage: Sensor::MotionMotionDetector,
            }),
            (32, 120) => Ok(Usage::Sensor {
                usage: Sensor::MotionSpeedometer,
            }),
            (32, 121) => Ok(Usage::Sensor {
                usage: Sensor::MotionAccelerometer,
            }),
            (32, 122) => Ok(Usage::Sensor {
                usage: Sensor::MotionGyrometer,
            }),
            (32, 123) => Ok(Usage::Sensor {
                usage: Sensor::MotionGravityVector,
            }),
            (32, 124) => Ok(Usage::Sensor {
                usage: Sensor::MotionLinearAccelerometer,
            }),
            (32, 128) => Ok(Usage::Sensor {
                usage: Sensor::Orientation,
            }),
            (32, 129) => Ok(Usage::Sensor {
                usage: Sensor::OrientationCompass1D,
            }),
            (32, 130) => Ok(Usage::Sensor {
                usage: Sensor::OrientationCompass2D,
            }),
            (32, 131) => Ok(Usage::Sensor {
                usage: Sensor::OrientationCompass3D,
            }),
            (32, 132) => Ok(Usage::Sensor {
                usage: Sensor::OrientationInclinometer1D,
            }),
            (32, 133) => Ok(Usage::Sensor {
                usage: Sensor::OrientationInclinometer2D,
            }),
            (32, 134) => Ok(Usage::Sensor {
                usage: Sensor::OrientationInclinometer3D,
            }),
            (32, 135) => Ok(Usage::Sensor {
                usage: Sensor::OrientationDistance1D,
            }),
            (32, 136) => Ok(Usage::Sensor {
                usage: Sensor::OrientationDistance2D,
            }),
            (32, 137) => Ok(Usage::Sensor {
                usage: Sensor::OrientationDistance3D,
            }),
            (32, 138) => Ok(Usage::Sensor {
                usage: Sensor::OrientationDeviceOrientation,
            }),
            (32, 139) => Ok(Usage::Sensor {
                usage: Sensor::OrientationCompass,
            }),
            (32, 140) => Ok(Usage::Sensor {
                usage: Sensor::OrientationInclinometer,
            }),
            (32, 141) => Ok(Usage::Sensor {
                usage: Sensor::OrientationDistance,
            }),
            (32, 142) => Ok(Usage::Sensor {
                usage: Sensor::OrientationRelativeOrientation,
            }),
            (32, 143) => Ok(Usage::Sensor {
                usage: Sensor::OrientationSimpleOrientation,
            }),
            (32, 144) => Ok(Usage::Sensor {
                usage: Sensor::Scanner,
            }),
            (32, 145) => Ok(Usage::Sensor {
                usage: Sensor::ScannerBarcode,
            }),
            (32, 146) => Ok(Usage::Sensor {
                usage: Sensor::ScannerRFID,
            }),
            (32, 147) => Ok(Usage::Sensor {
                usage: Sensor::ScannerNFC,
            }),
            (32, 160) => Ok(Usage::Sensor {
                usage: Sensor::Time,
            }),
            (32, 161) => Ok(Usage::Sensor {
                usage: Sensor::TimeAlarmTimer,
            }),
            (32, 162) => Ok(Usage::Sensor {
                usage: Sensor::TimeRealTimeClock,
            }),
            (32, 176) => Ok(Usage::Sensor {
                usage: Sensor::PersonalActivity,
            }),
            (32, 177) => Ok(Usage::Sensor {
                usage: Sensor::PersonalActivityActivityDetection,
            }),
            (32, 178) => Ok(Usage::Sensor {
                usage: Sensor::PersonalActivityDevicePosition,
            }),
            (32, 179) => Ok(Usage::Sensor {
                usage: Sensor::PersonalActivityPedometer,
            }),
            (32, 180) => Ok(Usage::Sensor {
                usage: Sensor::PersonalActivityStepDetection,
            }),
            (32, 192) => Ok(Usage::Sensor {
                usage: Sensor::OrientationExtended,
            }),
            (32, 193) => Ok(Usage::Sensor {
                usage: Sensor::OrientationExtendedGeomagneticOrientation,
            }),
            (32, 194) => Ok(Usage::Sensor {
                usage: Sensor::OrientationExtendedMagnetometer,
            }),
            (32, 224) => Ok(Usage::Sensor {
                usage: Sensor::Other,
            }),
            (32, 225) => Ok(Usage::Sensor {
                usage: Sensor::OtherCustom,
            }),
            (32, 226) => Ok(Usage::Sensor {
                usage: Sensor::OtherGeneric,
            }),
            (32, 227) => Ok(Usage::Sensor {
                usage: Sensor::OtherGenericEnumerator,
            }),
            (32, 512) => Ok(Usage::Sensor {
                usage: Sensor::Event,
            }),
            (32, 513) => Ok(Usage::Sensor {
                usage: Sensor::EventSensorState,
            }),
            (32, 514) => Ok(Usage::Sensor {
                usage: Sensor::EventSensorEvent,
            }),
            (32, 768) => Ok(Usage::Sensor {
                usage: Sensor::Property,
            }),
            (32, 769) => Ok(Usage::Sensor {
                usage: Sensor::PropertyFriendlyName,
            }),
            (32, 770) => Ok(Usage::Sensor {
                usage: Sensor::PropertyPersistentUniqueID,
            }),
            (32, 771) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorStatus,
            }),
            (32, 772) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMinimumReportInterval,
            }),
            (32, 773) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorManufacturer,
            }),
            (32, 774) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorModel,
            }),
            (32, 775) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorSerialNumber,
            }),
            (32, 776) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorDescription,
            }),
            (32, 777) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorConnectionType,
            }),
            (32, 778) => Ok(Usage::Sensor {
                usage: Sensor::PropertySensorDevicePath,
            }),
            (32, 779) => Ok(Usage::Sensor {
                usage: Sensor::PropertyHardwareRevision,
            }),
            (32, 780) => Ok(Usage::Sensor {
                usage: Sensor::PropertyFirmwareVersion,
            }),
            (32, 781) => Ok(Usage::Sensor {
                usage: Sensor::PropertyReleaseDate,
            }),
            (32, 782) => Ok(Usage::Sensor {
                usage: Sensor::PropertyReportInterval,
            }),
            (32, 783) => Ok(Usage::Sensor {
                usage: Sensor::PropertyChangeSensitivityAbsolute,
            }),
            (32, 784) => Ok(Usage::Sensor {
                usage: Sensor::PropertyChangeSensitivityPercentofRange,
            }),
            (32, 785) => Ok(Usage::Sensor {
                usage: Sensor::PropertyChangeSensitivityPercentRelative,
            }),
            (32, 786) => Ok(Usage::Sensor {
                usage: Sensor::PropertyAccuracy,
            }),
            (32, 787) => Ok(Usage::Sensor {
                usage: Sensor::PropertyResolution,
            }),
            (32, 788) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMaximum,
            }),
            (32, 789) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMinimum,
            }),
            (32, 790) => Ok(Usage::Sensor {
                usage: Sensor::PropertyReportingState,
            }),
            (32, 794) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMaximumFIFOEvents,
            }),
            (32, 795) => Ok(Usage::Sensor {
                usage: Sensor::PropertyReportLatency,
            }),
            (32, 796) => Ok(Usage::Sensor {
                usage: Sensor::PropertyFlushFIFOEvents,
            }),
            (32, 797) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMaximumPowerConsumption,
            }),
            (32, 1024) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldLocation,
            }),
            (32, 1026) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAltitudeAntennaSeaLevel,
            }),
            (32, 1027) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDifferentialReferenceStationID,
            }),
            (32, 1028) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAltitudeEllipsoidError,
            }),
            (32, 1029) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAltitudeEllipsoid,
            }),
            (32, 1030) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAltitudeSeaLevelError,
            }),
            (32, 1031) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAltitudeSeaLevel,
            }),
            (32, 1032) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDifferentialGPSDataAge,
            }),
            (32, 1033) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldErrorRadius,
            }),
            (32, 1034) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldFixQuality,
            }),
            (32, 1035) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldFixType,
            }),
            (32, 1036) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGeoidalSeparation,
            }),
            (32, 1037) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGPSOperationMode,
            }),
            (32, 1038) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGPSSelectionMode,
            }),
            (32, 1039) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGPSStatus,
            }),
            (32, 1040) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldPositionDilutionofPrecision,
            }),
            (32, 1041) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHorizontalDilutionofPrecision,
            }),
            (32, 1042) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldVerticalDilutionofPrecision,
            }),
            (32, 1043) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldLatitude,
            }),
            (32, 1044) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldLongitude,
            }),
            (32, 1045) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTrueHeading,
            }),
            (32, 1046) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagneticHeading,
            }),
            (32, 1047) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagneticVariation,
            }),
            (32, 1048) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSpeed,
            }),
            (32, 1049) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinView,
            }),
            (32, 1050) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewAzimuth,
            }),
            (32, 1051) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewElevation,
            }),
            (32, 1052) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewIDs,
            }),
            (32, 1053) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewPRNs,
            }),
            (32, 1054) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesinViewSNRatios,
            }),
            (32, 1055) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesUsedCount,
            }),
            (32, 1056) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSatellitesUsedPRNs,
            }),
            (32, 1057) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldNMEASentence,
            }),
            (32, 1058) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAddressLine1,
            }),
            (32, 1059) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAddressLine2,
            }),
            (32, 1060) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCity,
            }),
            (32, 1061) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldStateorProvince,
            }),
            (32, 1062) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCountryorRegion,
            }),
            (32, 1063) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldPostalCode,
            }),
            (32, 1066) => Ok(Usage::Sensor {
                usage: Sensor::PropertyLocation,
            }),
            (32, 1067) => Ok(Usage::Sensor {
                usage: Sensor::PropertyLocationDesiredAccuracy,
            }),
            (32, 1072) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldEnvironmental,
            }),
            (32, 1073) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAtmosphericPressure,
            }),
            (32, 1075) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldRelativeHumidity,
            }),
            (32, 1076) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTemperature,
            }),
            (32, 1077) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldWindDirection,
            }),
            (32, 1078) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldWindSpeed,
            }),
            (32, 1079) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAirQualityIndex,
            }),
            (32, 1080) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldEquivalentCO2,
            }),
            (32, 1081) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldVolatileOrganicCompoundConcentration,
            }),
            (32, 1082) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldObjectPresence,
            }),
            (32, 1083) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldObjectProximityRange,
            }),
            (32, 1084) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldObjectProximityOutofRange,
            }),
            (32, 1088) => Ok(Usage::Sensor {
                usage: Sensor::PropertyEnvironmental,
            }),
            (32, 1089) => Ok(Usage::Sensor {
                usage: Sensor::PropertyReferencePressure,
            }),
            (32, 1104) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMotion,
            }),
            (32, 1105) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMotionState,
            }),
            (32, 1106) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAcceleration,
            }),
            (32, 1107) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAccelerationAxisX,
            }),
            (32, 1108) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAccelerationAxisY,
            }),
            (32, 1109) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAccelerationAxisZ,
            }),
            (32, 1110) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocity,
            }),
            (32, 1111) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocityaboutXAxis,
            }),
            (32, 1112) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocityaboutYAxis,
            }),
            (32, 1113) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularVelocityaboutZAxis,
            }),
            (32, 1114) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularPosition,
            }),
            (32, 1115) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularPositionaboutXAxis,
            }),
            (32, 1116) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularPositionaboutYAxis,
            }),
            (32, 1117) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAngularPositionaboutZAxis,
            }),
            (32, 1118) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMotionSpeed,
            }),
            (32, 1119) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMotionIntensity,
            }),
            (32, 1136) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldOrientation,
            }),
            (32, 1137) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeading,
            }),
            (32, 1138) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingXAxis,
            }),
            (32, 16499) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingYAxis,
            }),
            (32, 1140) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingZAxis,
            }),
            (32, 1141) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingCompensatedMagneticNorth,
            }),
            (32, 1142) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingCompensatedTrueNorth,
            }),
            (32, 1143) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingMagneticNorth,
            }),
            (32, 1144) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeadingTrueNorth,
            }),
            (32, 1145) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDistance,
            }),
            (32, 1146) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDistanceXAxis,
            }),
            (32, 1147) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDistanceYAxis,
            }),
            (32, 1148) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDistanceZAxis,
            }),
            (32, 1149) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDistanceOutofRange,
            }),
            (32, 1150) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTilt,
            }),
            (32, 1151) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTiltXAxis,
            }),
            (32, 1152) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTiltYAxis,
            }),
            (32, 1153) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTiltZAxis,
            }),
            (32, 1154) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldRotationMatrix,
            }),
            (32, 1155) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldQuaternion,
            }),
            (32, 1156) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagneticFlux,
            }),
            (32, 1157) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagneticFluxXAxis,
            }),
            (32, 1158) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagneticFluxYAxis,
            }),
            (32, 1159) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagneticFluxZAxis,
            }),
            (32, 1160) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMagnetometerAccuracy,
            }),
            (32, 1161) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSimpleOrientationDirection,
            }),
            (32, 1168) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMechanical,
            }),
            (32, 1169) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBooleanSwitchState,
            }),
            (32, 1170) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBooleanSwitchArrayStates,
            }),
            (32, 1171) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMultivalueSwitchValue,
            }),
            (32, 1172) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldForce,
            }),
            (32, 1173) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldAbsolutePressure,
            }),
            (32, 1174) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGaugePressure,
            }),
            (32, 1175) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldStrain,
            }),
            (32, 1176) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldWeight,
            }),
            (32, 1184) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMechanical,
            }),
            (32, 1185) => Ok(Usage::Sensor {
                usage: Sensor::PropertyVibrationState,
            }),
            (32, 1186) => Ok(Usage::Sensor {
                usage: Sensor::PropertyForwardVibrationSpeed,
            }),
            (32, 1187) => Ok(Usage::Sensor {
                usage: Sensor::PropertyBackwardVibrationSpeed,
            }),
            (32, 1200) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBiometric,
            }),
            (32, 1201) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHumanPresence,
            }),
            (32, 1202) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHumanProximityRange,
            }),
            (32, 1203) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHumanProximityOutofRange,
            }),
            (32, 1204) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHumanTouchState,
            }),
            (32, 1205) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBloodPressure,
            }),
            (32, 1206) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBloodPressureDiastolic,
            }),
            (32, 1207) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBloodPressureSystolic,
            }),
            (32, 1208) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeartRate,
            }),
            (32, 1209) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldRestingHeartRate,
            }),
            (32, 1210) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHeartbeatInterval,
            }),
            (32, 1211) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldRespiratoryRate,
            }),
            (32, 1212) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSpO2,
            }),
            (32, 1232) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldLight,
            }),
            (32, 1233) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldIlluminance,
            }),
            (32, 1234) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldColorTemperature,
            }),
            (32, 1235) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldChromaticity,
            }),
            (32, 1236) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldChromaticityX,
            }),
            (32, 1237) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldChromaticityY,
            }),
            (32, 1238) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldConsumerIRSentenceReceive,
            }),
            (32, 1239) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldInfraredLight,
            }),
            (32, 1240) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldRedLight,
            }),
            (32, 1241) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGreenLight,
            }),
            (32, 1242) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldBlueLight,
            }),
            (32, 1243) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldUltravioletALight,
            }),
            (32, 1244) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldUltravioletBLight,
            }),
            (32, 1245) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldUltravioletIndex,
            }),
            (32, 1248) => Ok(Usage::Sensor {
                usage: Sensor::PropertyLight,
            }),
            (32, 1249) => Ok(Usage::Sensor {
                usage: Sensor::PropertyConsumerIRSentenceSend,
            }),
            (32, 1264) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldScanner,
            }),
            (32, 1265) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldRFIDTag40Bit,
            }),
            (32, 1266) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldNFCSentenceReceive,
            }),
            (32, 1272) => Ok(Usage::Sensor {
                usage: Sensor::PropertyScanner,
            }),
            (32, 1273) => Ok(Usage::Sensor {
                usage: Sensor::PropertyNFCSentenceSend,
            }),
            (32, 1280) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldElectrical,
            }),
            (32, 1281) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCapacitance,
            }),
            (32, 1282) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCurrent,
            }),
            (32, 1283) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldElectricalPower,
            }),
            (32, 1284) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldInductance,
            }),
            (32, 1285) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldResistance,
            }),
            (32, 1286) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldVoltage,
            }),
            (32, 1287) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldFrequency,
            }),
            (32, 1288) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldPeriod,
            }),
            (32, 1289) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldPercentofRange,
            }),
            (32, 1312) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTime,
            }),
            (32, 1313) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldYear,
            }),
            (32, 1314) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMonth,
            }),
            (32, 1315) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDay,
            }),
            (32, 1316) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDayofWeek,
            }),
            (32, 1317) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldHour,
            }),
            (32, 1318) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMinute,
            }),
            (32, 1319) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldSecond,
            }),
            (32, 1320) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldMillisecond,
            }),
            (32, 1321) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTimestamp,
            }),
            (32, 1322) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldJulianDayofYear,
            }),
            (32, 1323) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldTimeSinceSystemBoot,
            }),
            (32, 1328) => Ok(Usage::Sensor {
                usage: Sensor::PropertyTime,
            }),
            (32, 1329) => Ok(Usage::Sensor {
                usage: Sensor::PropertyTimeZoneOffsetfromUTC,
            }),
            (32, 1330) => Ok(Usage::Sensor {
                usage: Sensor::PropertyTimeZoneName,
            }),
            (32, 1331) => Ok(Usage::Sensor {
                usage: Sensor::PropertyDaylightSavingsTimeObserved,
            }),
            (32, 1332) => Ok(Usage::Sensor {
                usage: Sensor::PropertyTimeTrimAdjustment,
            }),
            (32, 1333) => Ok(Usage::Sensor {
                usage: Sensor::PropertyArmAlarm,
            }),
            (32, 1344) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustom,
            }),
            (32, 1345) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomUsage,
            }),
            (32, 1346) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomBooleanArray,
            }),
            (32, 1347) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue,
            }),
            (32, 1348) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue1,
            }),
            (32, 1349) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue2,
            }),
            (32, 1350) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue3,
            }),
            (32, 1351) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue4,
            }),
            (32, 1352) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue5,
            }),
            (32, 1353) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue6,
            }),
            (32, 1354) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue7,
            }),
            (32, 1355) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue8,
            }),
            (32, 1356) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue9,
            }),
            (32, 1357) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue10,
            }),
            (32, 1358) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue11,
            }),
            (32, 1359) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue12,
            }),
            (32, 1360) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue13,
            }),
            (32, 1361) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue14,
            }),
            (32, 1362) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue15,
            }),
            (32, 1363) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue16,
            }),
            (32, 1364) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue17,
            }),
            (32, 1365) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue18,
            }),
            (32, 1366) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue19,
            }),
            (32, 1367) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue20,
            }),
            (32, 1368) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue21,
            }),
            (32, 1369) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue22,
            }),
            (32, 1370) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue23,
            }),
            (32, 1371) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue24,
            }),
            (32, 1372) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue25,
            }),
            (32, 1373) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue26,
            }),
            (32, 1374) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue27,
            }),
            (32, 1375) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomValue28,
            }),
            (32, 1376) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGeneric,
            }),
            (32, 1377) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericGUIDorPROPERTYKEY,
            }),
            (32, 1378) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericCategoryGUID,
            }),
            (32, 1379) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericTypeGUID,
            }),
            (32, 1380) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericEventPROPERTYKEY,
            }),
            (32, 1381) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericPropertyPROPERTYKEY,
            }),
            (32, 1382) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericDataFieldPROPERTYKEY,
            }),
            (32, 1383) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericEvent,
            }),
            (32, 1384) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericProperty,
            }),
            (32, 1385) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericDataField,
            }),
            (32, 1386) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldEnumeratorTableRowIndex,
            }),
            (32, 1387) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldEnumeratorTableRowCount,
            }),
            (32, 1388) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericGUIDorPROPERTYKEYkind,
            }),
            (32, 1389) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericGUID,
            }),
            (32, 1390) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericPROPERTYKEY,
            }),
            (32, 1391) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericTopLevelCollectionID,
            }),
            (32, 1392) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericReportID,
            }),
            (32, 1393) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericReportItemPositionIndex,
            }),
            (32, 1394) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericFirmwareVARTYPE,
            }),
            (32, 1395) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericUnitofMeasure,
            }),
            (32, 1396) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericUnitExponent,
            }),
            (32, 1397) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericReportSize,
            }),
            (32, 1398) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldGenericReportCount,
            }),
            (32, 1408) => Ok(Usage::Sensor {
                usage: Sensor::PropertyGeneric,
            }),
            (32, 1409) => Ok(Usage::Sensor {
                usage: Sensor::PropertyEnumeratorTableRowIndex,
            }),
            (32, 1410) => Ok(Usage::Sensor {
                usage: Sensor::PropertyEnumeratorTableRowCount,
            }),
            (32, 1424) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldPersonalActivity,
            }),
            (32, 1425) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldActivityType,
            }),
            (32, 1426) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldActivityState,
            }),
            (32, 1427) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldDevicePosition,
            }),
            (32, 1428) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldStepCount,
            }),
            (32, 1429) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldStepCountReset,
            }),
            (32, 1430) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldStepDuration,
            }),
            (32, 1431) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldStepType,
            }),
            (32, 1440) => Ok(Usage::Sensor {
                usage: Sensor::PropertyMinimumActivityDetectionInterval,
            }),
            (32, 1441) => Ok(Usage::Sensor {
                usage: Sensor::PropertySupportedActivityTypes,
            }),
            (32, 1442) => Ok(Usage::Sensor {
                usage: Sensor::PropertySubscribedActivityTypes,
            }),
            (32, 1443) => Ok(Usage::Sensor {
                usage: Sensor::PropertySupportedStepTypes,
            }),
            (32, 1444) => Ok(Usage::Sensor {
                usage: Sensor::PropertySubscribedStepTypes,
            }),
            (32, 1445) => Ok(Usage::Sensor {
                usage: Sensor::PropertyFloorHeight,
            }),
            (32, 1456) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldCustomTypeID,
            }),
            (32, 2048) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateUndefined,
            }),
            (32, 2049) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateReady,
            }),
            (32, 2050) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateNotAvailable,
            }),
            (32, 2051) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateNoDataSel,
            }),
            (32, 2052) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateInitializing,
            }),
            (32, 2053) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateAccessDenied,
            }),
            (32, 2054) => Ok(Usage::Sensor {
                usage: Sensor::SensorStateError,
            }),
            (32, 2064) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventUnknown,
            }),
            (32, 2065) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventStateChanged,
            }),
            (32, 2066) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventPropertyChanged,
            }),
            (32, 2067) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventDataUpdated,
            }),
            (32, 2068) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventPollResponse,
            }),
            (32, 2069) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventChangeSensitivity,
            }),
            (32, 2070) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventRangeMaximumReached,
            }),
            (32, 2071) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventRangeMinimumReached,
            }),
            (32, 2072) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventHighThresholdCrossUpward,
            }),
            (32, 2073) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventHighThresholdCrossDownward,
            }),
            (32, 2074) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventLowThresholdCrossUpward,
            }),
            (32, 2075) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventLowThresholdCrossDownward,
            }),
            (32, 2076) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventZeroThresholdCrossUpward,
            }),
            (32, 2077) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventZeroThresholdCrossDownward,
            }),
            (32, 2078) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventPeriodExceeded,
            }),
            (32, 2079) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventFrequencyExceeded,
            }),
            (32, 2080) => Ok(Usage::Sensor {
                usage: Sensor::SensorEventComplexTrigger,
            }),
            (32, 2096) => Ok(Usage::Sensor {
                usage: Sensor::ConnectionTypePCIntegrated,
            }),
            (32, 2097) => Ok(Usage::Sensor {
                usage: Sensor::ConnectionTypePCAttached,
            }),
            (32, 2098) => Ok(Usage::Sensor {
                usage: Sensor::ConnectionTypePCExternal,
            }),
            (32, 2112) => Ok(Usage::Sensor {
                usage: Sensor::ReportingStateReportNoEvents,
            }),
            (32, 2113) => Ok(Usage::Sensor {
                usage: Sensor::ReportingStateReportAllEvents,
            }),
            (32, 2114) => Ok(Usage::Sensor {
                usage: Sensor::ReportingStateReportThresholdEvents,
            }),
            (32, 2115) => Ok(Usage::Sensor {
                usage: Sensor::ReportingStateWakeOnNoEvents,
            }),
            (32, 2116) => Ok(Usage::Sensor {
                usage: Sensor::ReportingStateWakeOnAllEvents,
            }),
            (32, 2117) => Ok(Usage::Sensor {
                usage: Sensor::ReportingStateWakeOnThresholdEvents,
            }),
            (32, 791) => Ok(Usage::Sensor {
                usage: Sensor::PropertySamplingRate,
            }),
            (32, 792) => Ok(Usage::Sensor {
                usage: Sensor::PropertyResponseCurve,
            }),
            (32, 793) => Ok(Usage::Sensor {
                usage: Sensor::PropertyPowerState,
            }),
            (32, 2128) => Ok(Usage::Sensor {
                usage: Sensor::PowerStateUndefined,
            }),
            (32, 2129) => Ok(Usage::Sensor {
                usage: Sensor::PowerStateD0FullPower,
            }),
            (32, 2130) => Ok(Usage::Sensor {
                usage: Sensor::PowerStateD1LowPower,
            }),
            (32, 2131) => Ok(Usage::Sensor {
                usage: Sensor::PowerStateD2StandbyPowerwithWakeup,
            }),
            (32, 2132) => Ok(Usage::Sensor {
                usage: Sensor::PowerStateD3SleepwithWakeup,
            }),
            (32, 2133) => Ok(Usage::Sensor {
                usage: Sensor::PowerStateD4PowerOff,
            }),
            (32, 2144) => Ok(Usage::Sensor {
                usage: Sensor::AccuracyDefault,
            }),
            (32, 2145) => Ok(Usage::Sensor {
                usage: Sensor::AccuracyHigh,
            }),
            (32, 2146) => Ok(Usage::Sensor {
                usage: Sensor::AccuracyMedium,
            }),
            (32, 2147) => Ok(Usage::Sensor {
                usage: Sensor::AccuracyLow,
            }),
            (32, 2160) => Ok(Usage::Sensor {
                usage: Sensor::FixQualityNoFix,
            }),
            (32, 2161) => Ok(Usage::Sensor {
                usage: Sensor::FixQualityGPS,
            }),
            (32, 2162) => Ok(Usage::Sensor {
                usage: Sensor::FixQualityDGPS,
            }),
            (32, 1035) => Ok(Usage::Sensor {
                usage: Sensor::DataFieldFixTypeNAry110,
            }),
            (32, 2176) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeNoFix,
            }),
            (32, 2177) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeGPSSPSModeFixValid,
            }),
            (32, 2178) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeDGPSSPSModeFixValid,
            }),
            (32, 2179) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeGPSPPSModeFixValid,
            }),
            (32, 2180) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeRealTimeKinematic,
            }),
            (32, 2181) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeFloatRTK,
            }),
            (32, 2182) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeEstimateddeadreckoned,
            }),
            (32, 2183) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeManualInputMode,
            }),
            (32, 2184) => Ok(Usage::Sensor {
                usage: Sensor::FixTypeSimulatorMode,
            }),
            (32, 2192) => Ok(Usage::Sensor {
                usage: Sensor::GPSOperationModeManual,
            }),
            (32, 2193) => Ok(Usage::Sensor {
                usage: Sensor::GPSOperationModeAutomatic,
            }),
            (32, 2208) => Ok(Usage::Sensor {
                usage: Sensor::GPSSelectionModeAutonomous,
            }),
            (32, 2209) => Ok(Usage::Sensor {
                usage: Sensor::GPSSelectionModeDGPS,
            }),
            (32, 2210) => Ok(Usage::Sensor {
                usage: Sensor::GPSSelectionModeEstimateddeadreckoned,
            }),
            (32, 2211) => Ok(Usage::Sensor {
                usage: Sensor::GPSSelectionModeManualInput,
            }),
            (32, 2212) => Ok(Usage::Sensor {
                usage: Sensor::GPSSelectionModeSimulator,
            }),
            (32, 2213) => Ok(Usage::Sensor {
                usage: Sensor::GPSSelectionModeDataNotValid,
            }),
            (32, 2224) => Ok(Usage::Sensor {
                usage: Sensor::GPSStatusDataValid,
            }),
            (32, 2225) => Ok(Usage::Sensor {
                usage: Sensor::GPSStatusDataNotValid,
            }),
            (32, 2240) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekSunday,
            }),
            (32, 2241) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekMonday,
            }),
            (32, 2242) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekTuesday,
            }),
            (32, 2243) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekWednesday,
            }),
            (32, 2244) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekThursday,
            }),
            (32, 2245) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekFriday,
            }),
            (32, 2246) => Ok(Usage::Sensor {
                usage: Sensor::DayofWeekSaturday,
            }),
            (32, 2256) => Ok(Usage::Sensor {
                usage: Sensor::KindCategory,
            }),
            (32, 2257) => Ok(Usage::Sensor {
                usage: Sensor::KindType,
            }),
            (32, 2258) => Ok(Usage::Sensor {
                usage: Sensor::KindEvent,
            }),
            (32, 2259) => Ok(Usage::Sensor {
                usage: Sensor::KindProperty,
            }),
            (32, 2260) => Ok(Usage::Sensor {
                usage: Sensor::KindDataField,
            }),
            (32, 2272) => Ok(Usage::Sensor {
                usage: Sensor::MagnetometerAccuracyLow,
            }),
            (32, 2273) => Ok(Usage::Sensor {
                usage: Sensor::MagnetometerAccuracyMedium,
            }),
            (32, 2274) => Ok(Usage::Sensor {
                usage: Sensor::MagnetometerAccuracyHigh,
            }),
            (32, 2288) => Ok(Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionNotRotated,
            }),
            (32, 2289) => Ok(Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionRotated90Degrees,
            }),
            (32, 2290) => Ok(Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionRotated180Degrees,
            }),
            (32, 2291) => Ok(Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionRotated270Degrees,
            }),
            (32, 2292) => Ok(Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionFaceUp,
            }),
            (32, 2293) => Ok(Usage::Sensor {
                usage: Sensor::SimpleOrientationDirectionFaceDown,
            }),
            (32, 2304) => Ok(Usage::Sensor {
                usage: Sensor::VT_NULLEmpty,
            }),
            (32, 2305) => Ok(Usage::Sensor {
                usage: Sensor::VT_BOOLBoolean,
            }),
            (32, 2306) => Ok(Usage::Sensor {
                usage: Sensor::VT_UI1Byte,
            }),
            (32, 2307) => Ok(Usage::Sensor {
                usage: Sensor::VT_I1Character,
            }),
            (32, 2308) => Ok(Usage::Sensor {
                usage: Sensor::VT_UI2UnsignedShort,
            }),
            (32, 2309) => Ok(Usage::Sensor {
                usage: Sensor::VT_I2Short,
            }),
            (32, 2310) => Ok(Usage::Sensor {
                usage: Sensor::VT_UI4UnsignedLong,
            }),
            (32, 2311) => Ok(Usage::Sensor {
                usage: Sensor::VT_I4Long,
            }),
            (32, 2312) => Ok(Usage::Sensor {
                usage: Sensor::VT_UI8UnsignedLongLong,
            }),
            (32, 2313) => Ok(Usage::Sensor {
                usage: Sensor::VT_I8LongLong,
            }),
            (32, 2314) => Ok(Usage::Sensor {
                usage: Sensor::VT_R4Float,
            }),
            (32, 2315) => Ok(Usage::Sensor {
                usage: Sensor::VT_R8Double,
            }),
            (32, 2316) => Ok(Usage::Sensor {
                usage: Sensor::VT_WSTRWideString,
            }),
            (32, 2317) => Ok(Usage::Sensor {
                usage: Sensor::VT_STRNarrowString,
            }),
            (32, 2318) => Ok(Usage::Sensor {
                usage: Sensor::VT_CLSIDGuid,
            }),
            (32, 2319) => Ok(Usage::Sensor {
                usage: Sensor::VT_VECTORVT_UI1OpaqueStructure,
            }),
            (32, 2320) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E0HID16bitFloatwithUnitExponent0,
            }),
            (32, 2321) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E1HID16bitFloatwithUnitExponent1,
            }),
            (32, 2322) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E2HID16bitFloatwithUnitExponent2,
            }),
            (32, 2323) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E3HID16bitFloatwithUnitExponent3,
            }),
            (32, 2324) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E4HID16bitFloatwithUnitExponent4,
            }),
            (32, 2325) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E5HID16bitFloatwithUnitExponent5,
            }),
            (32, 2326) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E6HID16bitFloatwithUnitExponent6,
            }),
            (32, 2327) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E7HID16bitFloatwithUnitExponent7,
            }),
            (32, 2328) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E8HID16bitFloatwithUnitExponent8,
            }),
            (32, 2329) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16E9HID16bitFloatwithUnitExponent9,
            }),
            (32, 2330) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16EAHID16bitFloatwithUnitExponentA,
            }),
            (32, 2331) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16EBHID16bitFloatwithUnitExponentB,
            }),
            (32, 2332) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16ECHID16bitFloatwithUnitExponentC,
            }),
            (32, 2333) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16EDHID16bitFloatwithUnitExponentD,
            }),
            (32, 2334) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16EEHID16bitFloatwithUnitExponentE,
            }),
            (32, 2335) => Ok(Usage::Sensor {
                usage: Sensor::VT_F16EFHID16bitFloatwithUnitExponentF,
            }),
            (32, 2336) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E0HID32bitFloatwithUnitExponent0,
            }),
            (32, 2337) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E1HID32bitFloatwithUnitExponent1,
            }),
            (32, 2338) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E2HID32bitFloatwithUnitExponent2,
            }),
            (32, 2339) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E3HID32bitFloatwithUnitExponent3,
            }),
            (32, 2340) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E4HID32bitFloatwithUnitExponent4,
            }),
            (32, 2341) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E5HID32bitFloatwithUnitExponent5,
            }),
            (32, 2342) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E6HID32bitFloatwithUnitExponent6,
            }),
            (32, 2343) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E7HID32bitFloatwithUnitExponent7,
            }),
            (32, 2344) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E8HID32bitFloatwithUnitExponent8,
            }),
            (32, 2345) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32E9HID32bitFloatwithUnitExponent9,
            }),
            (32, 2346) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32EAHID32bitFloatwithUnitExponentA,
            }),
            (32, 2347) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32EBHID32bitFloatwithUnitExponentB,
            }),
            (32, 2348) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32ECHID32bitFloatwithUnitExponentC,
            }),
            (32, 2349) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32EDHID32bitFloatwithUnitExponentD,
            }),
            (32, 2350) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32EEHID32bitFloatwithUnitExponentE,
            }),
            (32, 2351) => Ok(Usage::Sensor {
                usage: Sensor::VT_F32EFHID32bitFloatwithUnitExponentF,
            }),
            (32, 2352) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeUnknown,
            }),
            (32, 2353) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeStationary,
            }),
            (32, 2354) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeFidgeting,
            }),
            (32, 2355) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeWalking,
            }),
            (32, 2356) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeRunning,
            }),
            (32, 2357) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeInVehicle,
            }),
            (32, 2358) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeBiking,
            }),
            (32, 2359) => Ok(Usage::Sensor {
                usage: Sensor::ActivityTypeIdle,
            }),
            (32, 2368) => Ok(Usage::Sensor {
                usage: Sensor::UnitNotSpecified,
            }),
            (32, 2369) => Ok(Usage::Sensor {
                usage: Sensor::UnitLux,
            }),
            (32, 2370) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegreesKelvin,
            }),
            (32, 2371) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegreesCelsius,
            }),
            (32, 2372) => Ok(Usage::Sensor {
                usage: Sensor::UnitPascal,
            }),
            (32, 2373) => Ok(Usage::Sensor {
                usage: Sensor::UnitNewton,
            }),
            (32, 2374) => Ok(Usage::Sensor {
                usage: Sensor::UnitMetersSecond,
            }),
            (32, 2375) => Ok(Usage::Sensor {
                usage: Sensor::UnitKilogram,
            }),
            (32, 2376) => Ok(Usage::Sensor {
                usage: Sensor::UnitMeter,
            }),
            (32, 2377) => Ok(Usage::Sensor {
                usage: Sensor::UnitMetersSecondSecond,
            }),
            (32, 2378) => Ok(Usage::Sensor {
                usage: Sensor::UnitFarad,
            }),
            (32, 2379) => Ok(Usage::Sensor {
                usage: Sensor::UnitAmpere,
            }),
            (32, 2380) => Ok(Usage::Sensor {
                usage: Sensor::UnitWatt,
            }),
            (32, 2381) => Ok(Usage::Sensor {
                usage: Sensor::UnitHenry,
            }),
            (32, 2382) => Ok(Usage::Sensor {
                usage: Sensor::UnitOhm,
            }),
            (32, 2383) => Ok(Usage::Sensor {
                usage: Sensor::UnitVolt,
            }),
            (32, 2384) => Ok(Usage::Sensor {
                usage: Sensor::UnitHertz,
            }),
            (32, 2385) => Ok(Usage::Sensor {
                usage: Sensor::UnitBar,
            }),
            (32, 2386) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegreesAnticlockwise,
            }),
            (32, 2387) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegreesClockwise,
            }),
            (32, 2388) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegrees,
            }),
            (32, 2389) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegreesSecond,
            }),
            (32, 2390) => Ok(Usage::Sensor {
                usage: Sensor::UnitDegreesSecondSecond,
            }),
            (32, 2391) => Ok(Usage::Sensor {
                usage: Sensor::UnitKnot,
            }),
            (32, 2392) => Ok(Usage::Sensor {
                usage: Sensor::UnitPercent,
            }),
            (32, 2393) => Ok(Usage::Sensor {
                usage: Sensor::UnitSecond,
            }),
            (32, 2394) => Ok(Usage::Sensor {
                usage: Sensor::UnitMillisecond,
            }),
            (32, 2395) => Ok(Usage::Sensor {
                usage: Sensor::UnitG,
            }),
            (32, 2396) => Ok(Usage::Sensor {
                usage: Sensor::UnitBytes,
            }),
            (32, 2397) => Ok(Usage::Sensor {
                usage: Sensor::UnitMilligauss,
            }),
            (32, 2398) => Ok(Usage::Sensor {
                usage: Sensor::UnitBits,
            }),
            (32, 2400) => Ok(Usage::Sensor {
                usage: Sensor::ActivityStateNoStateChange,
            }),
            (32, 2401) => Ok(Usage::Sensor {
                usage: Sensor::ActivityStateStartActivity,
            }),
            (32, 2402) => Ok(Usage::Sensor {
                usage: Sensor::ActivityStateEndActivity,
            }),
            (32, 2416) => Ok(Usage::Sensor {
                usage: Sensor::Exponent01,
            }),
            (32, 2417) => Ok(Usage::Sensor {
                usage: Sensor::Exponent110,
            }),
            (32, 2418) => Ok(Usage::Sensor {
                usage: Sensor::Exponent2100,
            }),
            (32, 2419) => Ok(Usage::Sensor {
                usage: Sensor::Exponent31000,
            }),
            (32, 2420) => Ok(Usage::Sensor {
                usage: Sensor::Exponent410000,
            }),
            (32, 2421) => Ok(Usage::Sensor {
                usage: Sensor::Exponent5100000,
            }),
            (32, 2422) => Ok(Usage::Sensor {
                usage: Sensor::Exponent61000000,
            }),
            (32, 2423) => Ok(Usage::Sensor {
                usage: Sensor::Exponent710000000,
            }),
            (32, 2424) => Ok(Usage::Sensor {
                usage: Sensor::Exponent8000000001,
            }),
            (32, 2425) => Ok(Usage::Sensor {
                usage: Sensor::Exponent900000001,
            }),
            (32, 2426) => Ok(Usage::Sensor {
                usage: Sensor::ExponentA0000001,
            }),
            (32, 2427) => Ok(Usage::Sensor {
                usage: Sensor::ExponentB000001,
            }),
            (32, 2428) => Ok(Usage::Sensor {
                usage: Sensor::ExponentC00001,
            }),
            (32, 2429) => Ok(Usage::Sensor {
                usage: Sensor::ExponentD0001,
            }),
            (32, 2430) => Ok(Usage::Sensor {
                usage: Sensor::ExponentE001,
            }),
            (32, 2431) => Ok(Usage::Sensor {
                usage: Sensor::ExponentF01,
            }),
            (32, 2432) => Ok(Usage::Sensor {
                usage: Sensor::DevicePositionUnknown,
            }),
            (32, 2433) => Ok(Usage::Sensor {
                usage: Sensor::DevicePositionUnchanged,
            }),
            (32, 2434) => Ok(Usage::Sensor {
                usage: Sensor::DevicePositionOnDesk,
            }),
            (32, 2435) => Ok(Usage::Sensor {
                usage: Sensor::DevicePositionInHand,
            }),
            (32, 2436) => Ok(Usage::Sensor {
                usage: Sensor::DevicePositionMovinginBag,
            }),
            (32, 2437) => Ok(Usage::Sensor {
                usage: Sensor::DevicePositionStationaryinBag,
            }),
            (64, 0) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Undefined,
            }),
            (64, 1) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::MedicalUltrasound,
            }),
            (64, 32) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::VCRAcquisition,
            }),
            (64, 33) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::FreezeThaw,
            }),
            (64, 34) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::ClipStore,
            }),
            (64, 35) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Update,
            }),
            (64, 36) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Next,
            }),
            (64, 37) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Save,
            }),
            (64, 38) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Print,
            }),
            (64, 39) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::MicrophoneEnable,
            }),
            (64, 64) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Cine,
            }),
            (64, 65) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::TransmitPower,
            }),
            (64, 66) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Volume,
            }),
            (64, 67) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Focus,
            }),
            (64, 68) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::Depth,
            }),
            (64, 96) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftStepPrimary,
            }),
            (64, 97) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftStepSecondary,
            }),
            (64, 112) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::DepthGainCompensation,
            }),
            (64, 128) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::ZoomSelect,
            }),
            (64, 129) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::ZoomAdjust,
            }),
            (64, 130) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::SpectralDopplerModeSelect,
            }),
            (64, 131) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::SpectralDopplerAdjust,
            }),
            (64, 132) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::ColorDopplerModeSelect,
            }),
            (64, 133) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::ColorDopplerAdjust,
            }),
            (64, 134) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::MotionModeSelect,
            }),
            (64, 135) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::MotionModeAdjust,
            }),
            (64, 136) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::TwoDModeSelect,
            }),
            (64, 137) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::TwoDModeAdjust,
            }),
            (64, 160) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftControlSelect,
            }),
            (64, 161) => Ok(Usage::MedicalInstruments {
                usage: MedicalInstruments::SoftControlAdjust,
            }),
            (65, 0) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::Undefined,
            }),
            (65, 1) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDisplay,
            }),
            (65, 2) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRow,
            }),
            (65, 3) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::EightDotBrailleCell,
            }),
            (65, 4) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::SixDotBrailleCell,
            }),
            (65, 5) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::NumberofBrailleCells,
            }),
            (65, 6) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::ScreenReaderControl,
            }),
            (65, 7) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::ScreenReaderIdentifier,
            }),
            (65, 250) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterSet1,
            }),
            (65, 251) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterSet2,
            }),
            (65, 252) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterSet3,
            }),
            (65, 256) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::RouterButton,
            }),
            (65, 512) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleButtons,
            }),
            (65, 513) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot1,
            }),
            (65, 514) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot2,
            }),
            (65, 515) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot3,
            }),
            (65, 516) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot4,
            }),
            (65, 517) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot5,
            }),
            (65, 518) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot6,
            }),
            (65, 519) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot7,
            }),
            (65, 520) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardDot8,
            }),
            (65, 521) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardSpace,
            }),
            (65, 522) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardLeftSpace,
            }),
            (65, 523) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleKeyboardRightSpace,
            }),
            (65, 524) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleFaceControls,
            }),
            (65, 525) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleLeftControls,
            }),
            (65, 526) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRightControls,
            }),
            (65, 527) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleTopControls,
            }),
            (65, 528) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickCenter,
            }),
            (65, 529) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickUp,
            }),
            (65, 530) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickDown,
            }),
            (65, 531) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickLeft,
            }),
            (65, 548) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleJoystickRight,
            }),
            (65, 549) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadCenter,
            }),
            (65, 550) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadUp,
            }),
            (65, 535) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadDown,
            }),
            (65, 536) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadLeft,
            }),
            (65, 537) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleDPadRight,
            }),
            (65, 538) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BraillePanLeft,
            }),
            (65, 539) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BraillePanRight,
            }),
            (65, 540) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRockerUp,
            }),
            (65, 541) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRockerDown,
            }),
            (65, 542) => Ok(Usage::BrailleDisplay {
                usage: BrailleDisplay::BrailleRockerPress,
            }),
            (89, 0) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::Undefined,
            }),
            (89, 1) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArray,
            }),
            (89, 2) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArrayAttributesReport,
            }),
            (89, 3) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampCount,
            }),
            (89, 4) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::BoundingBoxWidthInMicrometers,
            }),
            (89, 5) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::BoundingBoxHeightInMicrometers,
            }),
            (89, 6) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::BoundingBoxDepthInMicrometers,
            }),
            (89, 7) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArrayKind,
            }),
            (89, 8) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::MinUpdateIntervalInMicroseconds,
            }),
            (89, 32) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampAttributesRequestReport,
            }),
            (89, 33) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampId,
            }),
            (89, 34) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampAttributesResponseReport,
            }),
            (89, 35) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::PositionXInMicrometers,
            }),
            (89, 36) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::PositionYInMicrometers,
            }),
            (89, 37) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::PositionZInMicrometers,
            }),
            (89, 38) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampPurposes,
            }),
            (89, 39) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::UpdateLatencyInMicroseconds,
            }),
            (89, 40) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::RedLevelCount,
            }),
            (89, 41) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::GreenLevelCount,
            }),
            (89, 42) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::BlueLevelCount,
            }),
            (89, 43) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::IntensityLevelCount,
            }),
            (89, 44) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::IsProgrammable,
            }),
            (89, 45) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::InputBinding,
            }),
            (89, 80) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampMultiUpdateReport,
            }),
            (89, 81) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::RedUpdateChannel,
            }),
            (89, 82) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::GreenUpdateChannel,
            }),
            (89, 83) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::BlueUpdateChannel,
            }),
            (89, 84) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::IntensityUpdateChannel,
            }),
            (89, 85) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampUpdateFlags,
            }),
            (89, 96) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampRangeUpdateReport,
            }),
            (89, 97) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampIdStart,
            }),
            (89, 98) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampIdEnd,
            }),
            (89, 112) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::LampArrayControlReport,
            }),
            (89, 113) => Ok(Usage::LightingandIllumination {
                usage: LightingandIllumination::AutonomousMode,
            }),
            (128, 0) => Ok(Usage::Monitor {
                usage: Monitor::Undefined,
            }),
            (128, 1) => Ok(Usage::Monitor {
                usage: Monitor::MonitorControl,
            }),
            (128, 2) => Ok(Usage::Monitor {
                usage: Monitor::EDIDInformation,
            }),
            (128, 3) => Ok(Usage::Monitor {
                usage: Monitor::VDIFInformation,
            }),
            (128, 4) => Ok(Usage::Monitor {
                usage: Monitor::VESAVersion,
            }),
            (128, 5) => Ok(Usage::Monitor {
                usage: Monitor::OnScreenDisplay,
            }),
            (128, 6) => Ok(Usage::Monitor {
                usage: Monitor::AutoSizeCenter,
            }),
            (128, 7) => Ok(Usage::Monitor {
                usage: Monitor::PolarityHorzSynch,
            }),
            (128, 8) => Ok(Usage::Monitor {
                usage: Monitor::PolarityVertSynch,
            }),
            (128, 9) => Ok(Usage::Monitor {
                usage: Monitor::SyncType,
            }),
            (128, 10) => Ok(Usage::Monitor {
                usage: Monitor::ScreenPosition,
            }),
            (128, 11) => Ok(Usage::Monitor {
                usage: Monitor::HorizontalFrequency,
            }),
            (128, 12) => Ok(Usage::Monitor {
                usage: Monitor::VerticalFrequency,
            }),
            (129, 0) => Ok(Usage::MonitorEnumeratedValues {
                usage: MonitorEnumeratedValues::unassigned,
            }),
            (130, 16) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Brightness,
            }),
            (130, 18) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Contrast,
            }),
            (130, 22) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoGainRed,
            }),
            (130, 24) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoGainGreen,
            }),
            (130, 26) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoGainBlue,
            }),
            (130, 28) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Focus,
            }),
            (130, 32) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalPosition,
            }),
            (130, 34) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalSize,
            }),
            (130, 36) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalPincushion,
            }),
            (130, 38) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalPincushionBalance,
            }),
            (130, 40) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalMisconvergence,
            }),
            (130, 42) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalLinearity,
            }),
            (130, 44) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::HorizontalLinearityBalance,
            }),
            (130, 48) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalPosition,
            }),
            (130, 50) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalSize,
            }),
            (130, 52) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalPincushion,
            }),
            (130, 54) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalPincushionBalance,
            }),
            (130, 56) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalMisconvergence,
            }),
            (130, 58) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalLinearity,
            }),
            (130, 60) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VerticalLinearityBalance,
            }),
            (130, 64) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::ParallelogramDistortion,
            }),
            (130, 66) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::TrapezoidalDistortion,
            }),
            (130, 68) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::Tilt,
            }),
            (130, 70) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::TopCornerDistortionControl,
            }),
            (130, 72) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::TopCornerDistortionBalance,
            }),
            (130, 74) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::BottomCornerDistortionControl,
            }),
            (130, 76) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::BottomCornerDistortionBalance,
            }),
            (130, 86) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::MoiréHorizontal,
            }),
            (130, 88) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::MoiréVertical,
            }),
            (130, 94) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::InputLevelSelect,
            }),
            (130, 96) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::InputSourceSelect,
            }),
            (130, 98) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::StereoMode,
            }),
            (130, 108) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoBlackLevelRed,
            }),
            (130, 110) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoBlackLevelGreen,
            }),
            (130, 112) => Ok(Usage::VESAVirtualControls {
                usage: VESAVirtualControls::VideoBlackLevelBlue,
            }),
            (131, 0) => Ok(Usage::VESACommand {
                usage: VESACommand::Undefined,
            }),
            (131, 1) => Ok(Usage::VESACommand {
                usage: VESACommand::Settings,
            }),
            (131, 2) => Ok(Usage::VESACommand {
                usage: VESACommand::Degauss,
            }),
            (132, 6) => Ok(Usage::PowerDevice {
                usage: PowerDevice::PeripheralDevice,
            }),
            (140, 0) => Ok(Usage::BarCodeScanner {
                usage: BarCodeScanner::Undefined,
            }),
            (141, 0) => Ok(Usage::Scale {
                usage: Scale::Undefined,
            }),
            (142, 0) => Ok(Usage::MagneticStripeReading {
                usage: MagneticStripeReading::Undefined,
            }),
            (144, 0) => Ok(Usage::CameraControl {
                usage: CameraControl::Undefined,
            }),
            (144, 32) => Ok(Usage::CameraControl {
                usage: CameraControl::CameraAutofocus,
            }),
            (144, 33) => Ok(Usage::CameraControl {
                usage: CameraControl::CameraShutter,
            }),
            (145, 0) => Ok(Usage::ArcadePageOAAF {
                usage: ArcadePageOAAF::Undefined,
            }),
            (61904, 0) => Ok(Usage::FIDOAlliance {
                usage: FIDOAlliance::Undefined,
            }),
            (61904, 1) => Ok(Usage::FIDOAlliance {
                usage: FIDOAlliance::U2FAuthenticatorDevice,
            }),
            (61904, 32) => Ok(Usage::FIDOAlliance {
                usage: FIDOAlliance::InputReportData,
            }),
            (61904, 33) => Ok(Usage::FIDOAlliance {
                usage: FIDOAlliance::OutputReportData,
            }),
            (65293, 1) => Ok(Usage::Wacom {
                usage: Wacom::WacomDigitizer,
            }),
            (65293, 2) => Ok(Usage::Wacom {
                usage: Wacom::WacomPen,
            }),
            (65293, 3) => Ok(Usage::Wacom {
                usage: Wacom::LightPen,
            }),
            (65293, 4) => Ok(Usage::Wacom {
                usage: Wacom::TouchScreen,
            }),
            (65293, 5) => Ok(Usage::Wacom {
                usage: Wacom::TouchPad,
            }),
            (65293, 6) => Ok(Usage::Wacom {
                usage: Wacom::WhiteBoard,
            }),
            (65293, 7) => Ok(Usage::Wacom {
                usage: Wacom::CoordinateMeasuringMachine,
            }),
            (65293, 8) => Ok(Usage::Wacom {
                usage: Wacom::ThreeDDigitizer,
            }),
            (65293, 9) => Ok(Usage::Wacom {
                usage: Wacom::StereoPlotter,
            }),
            (65293, 10) => Ok(Usage::Wacom {
                usage: Wacom::ArticulatedArm,
            }),
            (65293, 11) => Ok(Usage::Wacom {
                usage: Wacom::Armature,
            }),
            (65293, 12) => Ok(Usage::Wacom {
                usage: Wacom::MultiplePointDigitizer,
            }),
            (65293, 13) => Ok(Usage::Wacom {
                usage: Wacom::FreeSpaceWand,
            }),
            (65293, 14) => Ok(Usage::Wacom {
                usage: Wacom::DeviceConfiguration,
            }),
            (65293, 32) => Ok(Usage::Wacom {
                usage: Wacom::Stylus,
            }),
            (65293, 33) => Ok(Usage::Wacom { usage: Wacom::Puck }),
            (65293, 34) => Ok(Usage::Wacom {
                usage: Wacom::Finger,
            }),
            (65293, 35) => Ok(Usage::Wacom {
                usage: Wacom::DeviceSettings,
            }),
            (65293, 48) => Ok(Usage::Wacom {
                usage: Wacom::TipPressure,
            }),
            (65293, 49) => Ok(Usage::Wacom {
                usage: Wacom::BarrelPressure,
            }),
            (65293, 50) => Ok(Usage::Wacom {
                usage: Wacom::InRange,
            }),
            (65293, 51) => Ok(Usage::Wacom {
                usage: Wacom::Touch,
            }),
            (65293, 52) => Ok(Usage::Wacom {
                usage: Wacom::Untouch,
            }),
            (65293, 53) => Ok(Usage::Wacom { usage: Wacom::Tap }),
            (65293, 54) => Ok(Usage::Wacom {
                usage: Wacom::WacomSense,
            }),
            (65293, 55) => Ok(Usage::Wacom {
                usage: Wacom::DataValid,
            }),
            (65293, 56) => Ok(Usage::Wacom {
                usage: Wacom::TransducerIndex,
            }),
            (65293, 57) => Ok(Usage::Wacom {
                usage: Wacom::WacomDigitizerFnKeys,
            }),
            (65293, 58) => Ok(Usage::Wacom {
                usage: Wacom::ProgramChangeKeys,
            }),
            (65293, 59) => Ok(Usage::Wacom {
                usage: Wacom::BatteryStrength,
            }),
            (65293, 60) => Ok(Usage::Wacom {
                usage: Wacom::Invert,
            }),
            (65293, 61) => Ok(Usage::Wacom {
                usage: Wacom::XTilt,
            }),
            (65293, 62) => Ok(Usage::Wacom {
                usage: Wacom::YTilt,
            }),
            (65293, 63) => Ok(Usage::Wacom {
                usage: Wacom::Azimuth,
            }),
            (65293, 64) => Ok(Usage::Wacom {
                usage: Wacom::Altitude,
            }),
            (65293, 65) => Ok(Usage::Wacom {
                usage: Wacom::Twist,
            }),
            (65293, 66) => Ok(Usage::Wacom {
                usage: Wacom::TipSwitch,
            }),
            (65293, 67) => Ok(Usage::Wacom {
                usage: Wacom::SecondaryTipSwitch,
            }),
            (65293, 68) => Ok(Usage::Wacom {
                usage: Wacom::BarrelSwitch,
            }),
            (65293, 69) => Ok(Usage::Wacom {
                usage: Wacom::Eraser,
            }),
            (65293, 70) => Ok(Usage::Wacom {
                usage: Wacom::TabletPick,
            }),
            (65293, 71) => Ok(Usage::Wacom {
                usage: Wacom::Confidence,
            }),
            (65293, 72) => Ok(Usage::Wacom {
                usage: Wacom::Width,
            }),
            (65293, 73) => Ok(Usage::Wacom {
                usage: Wacom::Height,
            }),
            (65293, 81) => Ok(Usage::Wacom {
                usage: Wacom::ContactId,
            }),
            (65293, 82) => Ok(Usage::Wacom {
                usage: Wacom::Inputmode,
            }),
            (65293, 83) => Ok(Usage::Wacom {
                usage: Wacom::DeviceIndex,
            }),
            (65293, 84) => Ok(Usage::Wacom {
                usage: Wacom::ContactCount,
            }),
            (65293, 85) => Ok(Usage::Wacom {
                usage: Wacom::ContactMax,
            }),
            (65293, 86) => Ok(Usage::Wacom {
                usage: Wacom::ScanTime,
            }),
            (65293, 87) => Ok(Usage::Wacom {
                usage: Wacom::SurfaceSwitch,
            }),
            (65293, 88) => Ok(Usage::Wacom {
                usage: Wacom::ButtonSwitch,
            }),
            (65293, 89) => Ok(Usage::Wacom {
                usage: Wacom::ButtonType,
            }),
            (65293, 90) => Ok(Usage::Wacom {
                usage: Wacom::SecondaryBarrelSwitch,
            }),
            (65293, 91) => Ok(Usage::Wacom {
                usage: Wacom::TransducerSerialNumber,
            }),
            (65293, 92) => Ok(Usage::Wacom {
                usage: Wacom::WacomSerialHi,
            }),
            (65293, 93) => Ok(Usage::Wacom {
                usage: Wacom::PreferredColorisLocked,
            }),
            (65293, 94) => Ok(Usage::Wacom {
                usage: Wacom::PreferredLineWidth,
            }),
            (65293, 95) => Ok(Usage::Wacom {
                usage: Wacom::PreferredLineWidthisLocked,
            }),
            (65293, 112) => Ok(Usage::Wacom {
                usage: Wacom::PreferredLineStyle,
            }),
            (65293, 113) => Ok(Usage::Wacom {
                usage: Wacom::PreferredLineStyleisLocked,
            }),
            (65293, 114) => Ok(Usage::Wacom { usage: Wacom::Ink }),
            (65293, 115) => Ok(Usage::Wacom {
                usage: Wacom::Pencil,
            }),
            (65293, 116) => Ok(Usage::Wacom {
                usage: Wacom::Highlighter,
            }),
            (65293, 117) => Ok(Usage::Wacom {
                usage: Wacom::ChiselMarker,
            }),
            (65293, 118) => Ok(Usage::Wacom {
                usage: Wacom::Brush,
            }),
            (65293, 119) => Ok(Usage::Wacom {
                usage: Wacom::WacomToolType,
            }),
            (65293, 128) => Ok(Usage::Wacom {
                usage: Wacom::DigitizerDiagnostic,
            }),
            (65293, 129) => Ok(Usage::Wacom {
                usage: Wacom::DigitizerError,
            }),
            (65293, 130) => Ok(Usage::Wacom {
                usage: Wacom::ErrNormalStatus,
            }),
            (65293, 131) => Ok(Usage::Wacom {
                usage: Wacom::ErrTransducersExceeded,
            }),
            (65293, 132) => Ok(Usage::Wacom {
                usage: Wacom::ErrFullTransFeaturesUnavail,
            }),
            (65293, 133) => Ok(Usage::Wacom {
                usage: Wacom::ErrChargeLow,
            }),
            (65293, 304) => Ok(Usage::Wacom { usage: Wacom::X }),
            (65293, 305) => Ok(Usage::Wacom { usage: Wacom::Y }),
            (65293, 306) => Ok(Usage::Wacom {
                usage: Wacom::WacomDistance,
            }),
            (65293, 310) => Ok(Usage::Wacom {
                usage: Wacom::WacomTouchStrip,
            }),
            (65293, 311) => Ok(Usage::Wacom {
                usage: Wacom::WacomTouchStrip2,
            }),
            (65293, 312) => Ok(Usage::Wacom {
                usage: Wacom::WacomTouchRing,
            }),
            (65293, 313) => Ok(Usage::Wacom {
                usage: Wacom::WacomTouchRingStatus,
            }),
            (65293, 1025) => Ok(Usage::Wacom {
                usage: Wacom::WacomAccelerometerX,
            }),
            (65293, 1026) => Ok(Usage::Wacom {
                usage: Wacom::WacomAccelerometerY,
            }),
            (65293, 1027) => Ok(Usage::Wacom {
                usage: Wacom::WacomAccelerometerZ,
            }),
            (65293, 1028) => Ok(Usage::Wacom {
                usage: Wacom::WacomBatteryCharging,
            }),
            (65293, 1108) => Ok(Usage::Wacom {
                usage: Wacom::WacomTouchOnOff,
            }),
            (65293, 1083) => Ok(Usage::Wacom {
                usage: Wacom::WacomBatteryLevel,
            }),
            (65293, 2320) => Ok(Usage::Wacom {
                usage: Wacom::WacomExpressKey00,
            }),
            (65293, 2384) => Ok(Usage::Wacom {
                usage: Wacom::WacomExpressKeyCap00,
            }),
            (65293, 2432) => Ok(Usage::Wacom {
                usage: Wacom::WacomModeChange,
            }),
            (65293, 2433) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonDesktopCenter,
            }),
            (65293, 2434) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonOnScreenKeyboard,
            }),
            (65293, 2435) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonDisplaySetting,
            }),
            (65293, 2438) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonTouchOnOff,
            }),
            (65293, 2448) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonHome,
            }),
            (65293, 2449) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonUp,
            }),
            (65293, 2450) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonDown,
            }),
            (65293, 2451) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonLeft,
            }),
            (65293, 2452) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonRight,
            }),
            (65293, 2453) => Ok(Usage::Wacom {
                usage: Wacom::WacomButtonCenter,
            }),
            (65293, 3331) => Ok(Usage::Wacom {
                usage: Wacom::WacomFingerWheel,
            }),
            (65293, 3376) => Ok(Usage::Wacom {
                usage: Wacom::WacomOffsetLeft,
            }),
            (65293, 3377) => Ok(Usage::Wacom {
                usage: Wacom::WacomOffsetTop,
            }),
            (65293, 3378) => Ok(Usage::Wacom {
                usage: Wacom::WacomOffsetRight,
            }),
            (65293, 3379) => Ok(Usage::Wacom {
                usage: Wacom::WacomOffsetBottom,
            }),
            (65293, 4098) => Ok(Usage::Wacom {
                usage: Wacom::WacomDataMode,
            }),
            (65293, 4115) => Ok(Usage::Wacom {
                usage: Wacom::WacomDigitizerInfo,
            }),
            (0xff00, n) => Ok(Usage::VendorDefinedPage1 {
                usage: VendorDefinedPage1::VendorUsage { usage_id: n as u16 },
            }),
            (_, _) => Err(HutError::UnknownUsage),
        }
    }
}
